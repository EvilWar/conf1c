////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы (УНФ)
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Сведения о библиотеке (или конфигурации).

// Заполняет основные сведения о библиотеке или основной конфигурации.
// Библиотека, имя которой имя совпадает с именем конфигурации в метаданных, определяется как основная конфигурация.
// 
// Параметры:
//  Описание - Структура - сведения о библиотеке:
//
//   Имя                 - Строка - имя библиотеки, например, "СтандартныеПодсистемы".
//   Версия              - Строка - версия в формате из 4-х цифр, например, "2.1.3.1".
//
//   ТребуемыеПодсистемы - Массив - имена других библиотек (Строка), от которых зависит данная библиотека.
//                                  Обработчики обновления таких библиотек должны быть вызваны ранее
//                                  обработчиков обновления данной библиотеки.
//                                  При циклических зависимостях или, напротив, отсутствии каких-либо зависимостей,
//                                  порядок вызова обработчиков обновления определяется порядком добавления модулей
//                                  в процедуре ПриДобавленииПодсистем общего модуля ПодсистемыКонфигурацииПереопределяемый.
//
Процедура ПриДобавленииПодсистемы(Описание) Экспорт
	
	Описание.Версия = "1.6.10.44";
	
	УправлениеНебольшойФирмойСервер.ПередДобавлениемПодсистемы(Описание);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики обновления информационной базы

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
// Параметры:
//  Обработчики - ТаблицаЗначений - описание полей 
//                                  см. в процедуре ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.0.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_0_0_0";
//  Обработчик.МонопольныйРежим    = Ложь;
//  Обработчик.Опциональный        = Истина;
// 
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.0.1";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.ПервыйЗапуск_РазделенныеДанные";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.0.1";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.ПервыйЗапуск_ОбщиеДанные";
	Обработчик.ОбщиеДанные = Истина;
	
	#Область ОбновлениеПодсистемыПечать
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.6.10.2";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.КонвертацияРегистраОтветственныхЛицВПодписи";
	Обработчик.Комментарий = НСтр("ru = 'Конвертация регистра сведений ответственных лиц в справочник Подписи'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Версия = "1.6.10.2";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.ПодписиВДокументах_АвансовыйОтчет";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("db646178-a6ff-45b5-9a38-d28f95c53571");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение подписантов в последних документах вида Авансовый отчет'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Версия = "1.6.10.2";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.ПодписиВДокументах_АктВыполненныхРабот";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("9c2bea14-74f7-491d-bb55-e81d2c5abc6c");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение подписантов в последних документах вида Акт выполненных работ'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Версия = "1.6.10.2";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.ПодписиВДокументах_Доверенность";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("62eaec04-7ad1-4ed5-ac52-0ef8888818ec");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение подписантов в последних документах вида Доверенность'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Версия = "1.6.10.2";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.ПодписиВДокументах_ЗаказПокупателя";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("c5698121-bbf4-4d13-a168-265d167f0ab9ы");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение подписантов в последних документах вида Заказ покупателя'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Версия = "1.6.10.2";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.ПодписиВДокументах_ЗаказНаряд";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("4c42fbe7-cc1c-49e9-9e97-2444d9d86b43");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение подписантов в последних документах вида Заказ-наряд'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Версия = "1.6.10.2";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.ПодписиВДокументах_КорректировкаРеализации";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("9954056d-6d44-4efc-876a-ea4d9be26ada");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение подписантов в последних документах вида Корректировка реализации'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Версия = "1.6.10.2";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.ПодписиВДокументах_ОтчетОПереработке";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("973f0412-62e7-43d8-998f-a706d8deb572");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение подписантов в последних документах вида Отчет о переработке'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Версия = "1.6.10.2";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.ПодписиВДокументах_ОтчетОРозничныхПродажах";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("9f17de30-60e2-44f4-946a-d7a5da4af1da");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение подписантов в последних документах вида Отчет о розничных продажах'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Версия = "1.6.10.2";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.ПодписиВДокументах_ПеремещениеЗапасов";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("6cc0066a-8958-48e0-b2ed-825743cd8fb6");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение подписантов в последних документах вида Перемещение запасов'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Версия = "1.6.10.2";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.ПодписиВДокументах_ПлатежнаяВедомость";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("c73c9a38-9ad7-43d2-b367-379da894ae25");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение подписантов в последних документах вида Платежная ведомость'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Версия = "1.6.10.2";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.ПодписиВДокументах_ПоступлениеВКассу";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("66125eb4-7f07-405d-889c-424a9a0db8f0");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение подписантов в последних документах вида Поступление в кассу'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Версия = "1.6.10.2";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.ПодписиВДокументах_РасходДСПлан";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("f74eb8a3-f8c5-4d37-a7f8-c4376dc5eba5");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение подписантов в последних документах вида Заявка на расход денег'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Версия = "1.6.10.2";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.ПодписиВДокументах_РасходнаяНакладная";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("b1175700-40d5-4f23-a3f6-887d72960f21");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение подписантов в последних документах вида Расходная накладная'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Версия = "1.6.10.2";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.ПодписиВДокументах_СверкаВзаиморасчетов";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("b6cb4731-ce9a-47c5-94ca-382dea10a543");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение подписантов в последних документах вида Сверка взаиморасчетов'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Версия = "1.6.10.2";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.ПодписиВДокументах_СчетНаОплату";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("4ae39501-9659-42d9-af07-4dba1ca25479");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение подписантов в последних документах вида Счет на оплату покупателю'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Версия = "1.6.10.2";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.ПодписиВДокументах_СчетФактура";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("4b0d41fb-d0df-47a5-aaa7-80be5cbe024c");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение подписантов в последних документах вида Счет фактура'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Версия = "1.6.10.2";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.ПодписиВДокументах_Табель";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("6f0d9edc-3a87-4f97-b3e2-426f59af8667");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение подписантов в последних документах вида Табель'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Версия = "1.6.10.2";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.ПодписиВДокументах_ЧекККМ";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("6a299cbd-2609-496d-96ed-d920a3f66a42");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение подписантов в последних документах вида Чек ККМ'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Версия = "1.6.10.2";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.ПечатныеФормыПоддерживающиеФаксимильнуюПодпись";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("52c119a0-5b90-42e7-8a08-0c175841b49f");
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Комментарий = НСтр("ru = 'Настройка использования факсимиле'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.6.10.6";
	Обработчик.Процедура = "Справочники.Банки.УстановитьСтрануВБанках";
	Обработчик.Комментарий = НСтр("ru = 'Заполнение стран в банках'");
	
	#КонецОбласти
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Версия = "1.6.10.10";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.ЗаполнитьЗакупкиДляКУДиР";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("ec69f0bb-37eb-4a5d-84d7-aff3ec3a1975");
	Обработчик.Комментарий = НСтр("ru = 'Обработка документов для Книги учета доходов и расходов'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Версия = "1.6.10.13";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.ОбновитьПараметрыРасчетаДоставки_1_6_10";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("55327c13-538c-45a8-909d-2cfbbd9e9380");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение реквизитов собственной службы доставки'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Версия = "1.6.10.14";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.КонвертацияПризнакаИспользоватьФаксимилеВПеречисление";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("f89df4b0-5c58-449c-988d-ae6b70ce678e");
	Обработчик.Комментарий = НСтр("ru = 'Конвертация булевского признака в значение перечисления для настроек факсимиле.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Версия = "1.6.10.15";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.СоздатьПредопределенныеШаблоныКоммерческогоПредложения";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("20496e0f-b298-4749-a241-ac87964b7fa1");
	Обработчик.Комментарий = НСтр("ru = 'Создание предопределенных шаблонов коммерческого предложения.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Версия = "1.6.10.17";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.ЗаполнитьРеквизитыСобственнойСлужбыДоставки_1_6_10";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("3e1cd449-e7eb-4b9a-8c8e-820e2cea358f");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение реквизитов собственной службы доставки'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.6.10.28";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.ОбновитьВидыВычетовНДФЛ2017";
	Обработчик.ОбщиеДанные = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Версия = "1.6.10.31";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.ВключитьИспользованиеМобильнойТелефонии";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("2ab161ea-3a59-42c3-9099-6bfbaa583741");
	Обработчик.Комментарий = НСтр("ru = 'Включение функцональной опции ""Использовать мобильную телефонию""'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.6.10.33";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.СнятьРегистрациюКонстантыОтложенноеОбновлениеЗавершеноУспешно";
	Обработчик.ОбщиеДанные = Ложь;
	
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия      = "1.6.10.37";
	Обработчик.Процедура = "Справочники.РегламентированныеОтчеты.ЗаполнитьСписокРегламентированныхОтчетов";
	Обработчик.ОбщиеДанные = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия      = "1.6.10.37";
	Обработчик.Процедура = "Справочники.ВидыТарифовСтраховыхВзносов.ЗаполнитьКодыВидовТарифаСтраховыхВзносов_2012";
	Обработчик.ОбщиеДанные = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.ОбщиеДанные = Истина;
	Обработчик.Версия = "1.6.10.38";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.ПометитьЗадачиСЗВМНаУдаление";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия      = "1.6.10.38";
	Обработчик.Процедура   = "ОбновлениеИнформационнойБазыУНФ.ДобавитьЗадачуРасчетСтраховыхВзносовНа2017год";
	Обработчик.ОбщиеДанные = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия      = "1.6.10.39";
	Обработчик.Процедура   = "ОбновлениеИнформационнойБазыУНФ.ОбработатьГодовые6НДФЛ";
	Обработчик.ОбщиеДанные = Истина;
КонецПроцедуры

// Вызывается перед процедурами-обработчиками обновления данных ИБ.
//
Процедура ПередОбновлениемИнформационнойБазы() Экспорт
	
	
	
КонецПроцедуры

// Вызывается после завершения обновления данных ИБ.
// 
// Параметры:
//   ПредыдущаяВерсия       - Строка - версия до обновления. "0.0.0.0" для "пустой" ИБ.
//   ТекущаяВерсия          - Строка - версия после обновления.
//   ВыполненныеОбработчики - ДеревоЗначений - список выполненных процедур-обработчиков обновления,
//                                             сгруппированных по номеру версии.
//   ВыводитьОписаниеОбновлений - Булево - (возвращаемое значение) если установить Истина,
//                                то будет выведена форма с описанием обновлений. По умолчанию, Истина.
//   МонопольныйРежим           - Булево - Истина, если обновление выполнялось в монопольном режиме.
//
// Пример обхода выполненных обработчиков обновления:
//
//	Для Каждого Версия Из ВыполненныеОбработчики.Строки Цикл
//		
//		Если Версия.Версия = "*" Тогда
//			// Обработчик, который может выполнятся при каждой смене версии.
//		Иначе
//			// Обработчик, который выполняется для определенной версии.
//		КонецЕсли;
//		
//		Для Каждого Обработчик Из Версия.Строки Цикл
//			...
//		КонецЦикла;
//		
//	КонецЦикла;
//
Процедура ПослеОбновленияИнформационнойБазы(Знач ПредыдущаяВерсия, Знач ТекущаяВерсия,
		Знач ВыполненныеОбработчики, ВыводитьОписаниеОбновлений, МонопольныйРежим) Экспорт
	
	
	
КонецПроцедуры

// Вызывается при подготовке табличного документа с описанием изменений в программе.
//
// Параметры:
//   Макет - ТабличныйДокумент - описание обновления всех библиотек и конфигурации.
//           Макет можно дополнить или заменить.
//           См. также общий макет ОписаниеИзмененийСистемы.
//
Процедура ПриПодготовкеМакетаОписанияОбновлений(Знач Макет) Экспорт
	
КонецПроцедуры

// Добавляет в список процедуры-обработчики перехода с другой программы (с другим именем конфигурации).
// Например, для перехода между разными, но родственными конфигурациями: базовая -> проф -> корп.
// Вызывается перед началом обновления данных ИБ.
//
// Параметры:
//  Обработчики - ТаблицаЗначений - с колонками:
//    * ПредыдущееИмяКонфигурации - Строка - имя конфигурации, с которой выполняется переход;
//    * Процедура                 - Строка - полное имя процедуры-обработчика перехода с программы ПредыдущееИмяКонфигурации. 
//                                  Например, "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику"
//                                  Обязательно должна быть экспортной.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.ПредыдущееИмяКонфигурации  = "УправлениеТорговлей";
//  Обработчик.Процедура                  = "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику";
//
Процедура ПриДобавленииОбработчиковПереходаСДругойПрограммы(Обработчики) Экспорт
	
	
	
КонецПроцедуры // ПриДобавленииОбработчиковПереходаСДругойПрограммы()

// Позволяет переопределить режим обновления данных информационной базы.
// Для использования в редких (нештатных) случаях перехода, не предусмотренных в
// стандартной процедуре определения режима обновления.
//
// Параметры:
//   РежимОбновленияДанных - Строка - в обработчике можно присвоить одно из значений:
//              "НачальноеЗаполнение"     - если это первый запуск пустой базы (области данных);
//              "ОбновлениеВерсии"        - если выполняется первый запуск после обновление конфигурации базы данных;
//              "ПереходСДругойПрограммы" - если выполняется первый запуск после обновление конфигурации базы данных, 
//                                          в которой изменилось имя основной конфигурации.
//
//   СтандартнаяОбработка  - Булево - если присвоить Ложь, то стандартная процедура
//                                    определения режима обновления не выполняется, 
//                                    а используется значение РежимОбновленияДанных.
//
Процедура ПриОпределенииРежимаОбновленияДанных(РежимОбновленияДанных, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

// Вызывается после выполнения всех процедур-обработчиков перехода с другой программы (с другим именем конфигурации),
// и до начала выполнения обновления данных ИБ.
//
// Параметры:
//  ПредыдущееИмяКонфигурации    - Строка - имя конфигурации до перехода.
//  ПредыдущаяВерсияКонфигурации - Строка - имя предыдущей конфигурации (до перехода).
//  Параметры                    - Структура - 
//    * ВыполнитьОбновлениеСВерсии   - Булево - по умолчанию Истина. Если установить Ложь, 
//        то будут выполнена только обязательные обработчики обновления (с версией "*").
//    * ВерсияКонфигурации           - Строка - номер версии после перехода. 
//        По умолчанию, равен значению версии конфигурации в свойствах метаданных.
//        Для того чтобы выполнить, например, все обработчики обновления с версии ПредыдущаяВерсияКонфигурации, 
//        следует установить значение параметра в ПредыдущаяВерсияКонфигурации.
//        Для того чтобы выполнить вообще все обработчики обновления, установить значение "0.0.0.1".
//    * ОчиститьСведенияОПредыдущейКонфигурации - Булево - по умолчанию Истина. 
//        Для случаев когда предыдущая конфигурация совпадает по имени с подсистемой текущей конфигурации, следует указать Ложь.
//
Процедура ПриЗавершенииПереходаСДругойПрограммы(Знач ПредыдущееИмяКонфигурации, Знач ПредыдущаяВерсияКонфигурации, Параметры) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПервыйЗапуск_ОбщиеДанные

//(5.Общий) Заполняем справочник ОКУН
Процедура ЗагрузитьОКУН() Экспорт
	
	Справочники.ОКУН.ЗагрузитьКлассификатор();
	Справочники.ОКУН.ПроставитьВидДеятельностиОКУН();
	
КонецПроцедуры

//(6.Общий) Заполняет РС КоэффициентДефлятор
//
Процедура ЗаполнитьКоэффициентДефлятор() Экспорт
	
	// переписываем сразу весь набор
	Набор = РегистрыСведений.КоэффициентДефлятор.СоздатьНаборЗаписей();
	
	Запись = Набор.Добавить();
	Запись.Период = '20030101';
	Запись.Значение = 1;
	
	Запись = Набор.Добавить();
	Запись.Период = '20040101';
	Запись.Значение = 1.133;
	
	Запись = Набор.Добавить();
	Запись.Период = '20050101';
	Запись.Значение = 1.104;
	
	Запись = Набор.Добавить();
	Запись.Период = '20060101';
	Запись.Значение = 1.132;
	
	Запись = Набор.Добавить();
	Запись.Период = '20070101';
	Запись.Значение = 1.096;
	
	Запись = Набор.Добавить();
	Запись.Период = '20080101';
	Запись.Значение = 1.081;
	
	Запись = Набор.Добавить();
	Запись.Период = '20090101';
	Запись.Значение = 1.148;
	
	Запись = Набор.Добавить();
	Запись.Период = '20100101';
	Запись.Значение = 1.295;
	
	Запись = Набор.Добавить();
	Запись.Период = '20110101';
	Запись.Значение = 1.372;
	
	Запись = Набор.Добавить();
	Запись.Период = '20120101';
	Запись.Значение = 1.4942;
	
	Запись = Набор.Добавить();
	Запись.Период = '20130101';
	Запись.Значение = 1.569;
	
	Запись = Набор.Добавить();
	Запись.Период = '20140101';
	Запись.Значение = 1.672;
	
	Запись = Набор.Добавить();
	Запись.Период = '20150101';
	Запись.Значение = 1.798;
	
	Запись = Набор.Добавить();
	Запись.Период = '20160101';
	Запись.Значение = 1.798;
	
	Набор.Записать();
	
КонецПроцедуры

//(7.Общий) Заполнять РС МРОТ
//
Процедура ЗагрузитьМРОТ() Экспорт
	
	Набор = РегистрыСведений.МРОТ.СоздатьНаборЗаписей();
	
	Запись = Набор.Добавить();
	
	Запись.Период = '20000701';
	Запись.Значение = 132;
	
	Запись = Набор.Добавить();
	
	Запись.Период = '20010101';
	Запись.Значение = 200;
	
	Запись = Набор.Добавить();
	
	Запись.Период = '20010701';
	Запись.Значение = 300;
	
	Запись = Набор.Добавить();
	
	Запись.Период = '20020501';
	Запись.Значение = 450;
	
	Запись = Набор.Добавить();
	
	Запись.Период = '20031001';
	Запись.Значение = 600;
	
	Запись = Набор.Добавить();
	
	Запись.Период = '20050101';
	Запись.Значение = 720;
	
	Запись = Набор.Добавить();
	
	Запись.Период = '20050901';
	Запись.Значение = 800;
	
	Запись = Набор.Добавить();
	
	Запись.Период = '20060501';
	Запись.Значение = 1100;
	
	Запись = Набор.Добавить();
	
	Запись.Период = '20070901';
	Запись.Значение = 2300;
	
	Запись = Набор.Добавить();
	
	Запись.Период = '20090101';
	Запись.Значение = 4330;
	
	Запись = Набор.Добавить();
	
	Запись.Период = '20110601';
	Запись.Значение = 4611;
	
	Запись = Набор.Добавить();
	
	Запись.Период = '20130101';
	Запись.Значение = 5205;
	
	Запись = Набор.Добавить();
	
	Запись.Период = '20140101';
	Запись.Значение = 5554;
	
	Запись = Набор.Добавить();
	
	Запись.Период = '20150101';
	Запись.Значение = 5965;
	
	Запись = Набор.Добавить();
	
	Запись.Период = '20160101';
	Запись.Значение = 6204;
	
	Запись.Период = '20170101';
	Запись.Значение = 7500;
	
	Набор.Записать();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПервыйЗапуск_РазделенныеДанные

//(1) Процедура загружает управленческий план счетов из макета.
//
Процедура ЗагрузитьУправленческийПланСчетовПервыйЗапуск()
	
	// 00.
	Счет = ПланыСчетов.Управленческий.Служебный.ПолучитьОбъект();
	Счет.ТипСчета = Перечисления.ТипыСчетов.ГруппаСчетов;
	Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
	Счет.Записать();
	
	// 01.
	Счет = ПланыСчетов.Управленческий.ВнеоборотныеАктивы.ПолучитьОбъект();
	Счет.ТипСчета = Перечисления.ТипыСчетов.ВнеоборотныеАктивы;
	Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
	Счет.Записать();
	
	// 02.
	Счет = ПланыСчетов.Управленческий.АмортизацияВнеоборотныхАктивов.ПолучитьОбъект();
	Счет.ТипСчета = Перечисления.ТипыСчетов.АмортизацияВнеоборотныхАктивов;
	Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
	Счет.Записать();
	
	// 08.
	Счет = ПланыСчетов.Управленческий.ВложенияВоВнеоборотныеАктивы.ПолучитьОбъект();
	Счет.ТипСчета = Перечисления.ТипыСчетов.ПрочиеВнеоборотныеАктивы;
	Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
	Счет.Записать();
	
	// 10.
	Счет = ПланыСчетов.Управленческий.СырьеИМатериалы.ПолучитьОбъект();
	Счет.ТипСчета = Перечисления.ТипыСчетов.Запасы;
	Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
	Счет.Записать();
	
	// 20.
	Счет = ПланыСчетов.Управленческий.НезавершенноеПроизводство.ПолучитьОбъект();
	Счет.ТипСчета = Перечисления.ТипыСчетов.НезавершенноеПроизводство;
	Счет.СчетЗакрытия = ПланыСчетов.Управленческий.ТоварыПродукция;
	Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
	Счет.Записать();
	
	// 25.
	Счет = ПланыСчетов.Управленческий.КосвенныеЗатраты.ПолучитьОбъект();
	Счет.ТипСчета = Перечисления.ТипыСчетов.КосвенныеЗатраты;
	Счет.СчетЗакрытия = ПланыСчетов.Управленческий.НезавершенноеПроизводство;
	Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.ОбъемВыпуска;
	Счет.Записать();
	
	// 41.
	Счет = ПланыСчетов.Управленческий.ТоварыПродукция.ПолучитьОбъект();
	Счет.ТипСчета = Перечисления.ТипыСчетов.Запасы;
	Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
	Счет.Записать();
	
	// 42.
	Счет = ПланыСчетов.Управленческий.ТорговаяНаценка.ПолучитьОбъект();
	Счет.ТипСчета = Перечисления.ТипыСчетов.ТорговаяНаценка;
	Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
	Счет.Записать();
	
	// 50.
	Счет = ПланыСчетов.Управленческий.Касса.ПолучитьОбъект();
	Счет.ТипСчета = Перечисления.ТипыСчетов.ДенежныеСредства;
	Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
	Счет.Записать();
	
	// 51.
	Счет = ПланыСчетов.Управленческий.Банк.ПолучитьОбъект();
	Счет.ТипСчета = Перечисления.ТипыСчетов.ДенежныеСредства;
	Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
	Счет.Записать();
	
	// 57.
	Счет = ПланыСчетов.Управленческий.ПереводыВПути.ПолучитьОбъект();
	Счет.ТипСчета = Перечисления.ТипыСчетов.ДенежныеСредства;
	Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
	Счет.Записать();
	
	// 58.
	Счет = ПланыСчетов.Управленческий.ФинансовыеВложения.ПолучитьОбъект();
	Счет.ТипСчета = Перечисления.ТипыСчетов.ДенежныеСредства;
	Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
	Счет.Записать();
	
	// 60.
	Счет = ПланыСчетов.Управленческий.РасчетыСПоставщикамиИПодрядчиками.ПолучитьОбъект();
	Счет.ТипСчета = Перечисления.ТипыСчетов.ГруппаСчетов;
	Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
	Счет.Записать();
	
		// 60.01
		Счет = ПланыСчетов.Управленческий.РасчетыСПоставщиками.ПолучитьОбъект();
		Счет.Родитель = ПланыСчетов.Управленческий.РасчетыСПоставщикамиИПодрядчиками;
		Счет.ТипСчета = Перечисления.ТипыСчетов.Кредиторы;
		Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
		Счет.Записать();
		
		// 60.02
		Счет = ПланыСчетов.Управленческий.РасчетыПоАвансамВыданным.ПолучитьОбъект();
		Счет.Родитель = ПланыСчетов.Управленческий.РасчетыСПоставщикамиИПодрядчиками;
		Счет.ТипСчета = Перечисления.ТипыСчетов.Дебиторы;
		Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
		Счет.Записать();
		
	// 62.
	Счет = ПланыСчетов.Управленческий.РасчетыСПокупателямиИЗаказчиками.ПолучитьОбъект();
	Счет.ТипСчета = Перечисления.ТипыСчетов.ГруппаСчетов;
	Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
	Счет.Записать();
	
		// 62.01
		Счет = ПланыСчетов.Управленческий.РасчетыСПокупателями.ПолучитьОбъект();
		Счет.Родитель = ПланыСчетов.Управленческий.РасчетыСПокупателямиИЗаказчиками;
		Счет.ТипСчета = Перечисления.ТипыСчетов.Дебиторы;
		Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
		Счет.Записать();
		
		// 62.02
		Счет = ПланыСчетов.Управленческий.РасчетыПоАвансамПолученным.ПолучитьОбъект();
		Счет.Родитель = ПланыСчетов.Управленческий.РасчетыСПокупателямиИЗаказчиками;
		Счет.ТипСчета = Перечисления.ТипыСчетов.Кредиторы;
		Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
		Счет.Записать();
		
	// 66.
	Счет = ПланыСчетов.Управленческий.РасчетыПоКраткосрочнымКредитамИЗаймам.ПолучитьОбъект();
	Счет.ТипСчета = Перечисления.ТипыСчетов.КредитыИЗаймы;
	Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
	Счет.Записать();
	
	// 67.
	Счет = ПланыСчетов.Управленческий.РасчетыПоДолгосрочнымКредитамИЗаймам.ПолучитьОбъект();
	Счет.ТипСчета = Перечисления.ТипыСчетов.ДолгосрочныеОбязательства;
	Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
	Счет.Записать();
	
	// 68.
	Счет = ПланыСчетов.Управленческий.РасчетыПоНалогам.ПолучитьОбъект();
	Счет.ТипСчета = Перечисления.ТипыСчетов.ГруппаСчетов;
	Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
	Счет.Записать();
	
		// 68.01
		Счет = ПланыСчетов.Управленческий.Налоги.ПолучитьОбъект();
		Счет.Родитель = ПланыСчетов.Управленческий.РасчетыПоНалогам;
		Счет.ТипСчета = Перечисления.ТипыСчетов.Кредиторы;
		Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
		Счет.Записать();
		
		// 68.02
		Счет = ПланыСчетов.Управленческий.НалогиКВозмещению.ПолучитьОбъект();
		Счет.Родитель = ПланыСчетов.Управленческий.РасчетыПоНалогам;
		Счет.ТипСчета = Перечисления.ТипыСчетов.Дебиторы;
		Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
		Счет.Записать();
	
	// 70.
	Счет = ПланыСчетов.Управленческий.РасчетыСПерсоналомПоОплатеТруда.ПолучитьОбъект();
	Счет.ТипСчета = Перечисления.ТипыСчетов.Кредиторы;
	Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
	Счет.Записать();
	
	// 71.
	Счет = ПланыСчетов.Управленческий.РасчетыСПодотчетнымиЛицами.ПолучитьОбъект();
	Счет.ТипСчета = Перечисления.ТипыСчетов.ГруппаСчетов;
	Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
	Счет.Записать();
	
		// 71.01
		Счет = ПланыСчетов.Управленческий.РасчетыСПодотчетниками.ПолучитьОбъект();
		Счет.Родитель = ПланыСчетов.Управленческий.РасчетыСПодотчетнымиЛицами;
		Счет.ТипСчета = Перечисления.ТипыСчетов.Дебиторы;
		Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
		Счет.Записать();
		
		// 71.02
		Счет = ПланыСчетов.Управленческий.ПерерасходПодотчетников.ПолучитьОбъект();
		Счет.Родитель = ПланыСчетов.Управленческий.РасчетыСПодотчетнымиЛицами;
		Счет.ТипСчета = Перечисления.ТипыСчетов.Кредиторы;
		Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
		Счет.Записать();
		
	// Прочие расчеты
	// 73
	Счет = ПланыСчетов.Управленческий.РасчетыСПерсоналомПоПрочимОперациям.ПолучитьОбъект();
	Счет.ТипСчета = Перечисления.ТипыСчетов.ГруппаСчетов;
	Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
	Счет.Записать();
	
		// 73.01
		Счет = ПланыСчетов.Управленческий.РасчетыПоПредоставленнымЗаймам.ПолучитьОбъект();
		Счет.Родитель = ПланыСчетов.Управленческий.РасчетыСПерсоналомПоПрочимОперациям;
		Счет.ТипСчета = Перечисления.ТипыСчетов.КредитыИЗаймы;
		Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
		Счет.Записать();
		
		// 73.02
		Счет = ПланыСчетов.Управленческий.РасчетыПоВозмещениюМатериальногоУщерба.ПолучитьОбъект();
		Счет.Родитель = ПланыСчетов.Управленческий.РасчетыСПерсоналомПоПрочимОперациям;
		Счет.ТипСчета = Перечисления.ТипыСчетов.Дебиторы;
		Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
		Счет.Записать();
	
	// 75
	Счет = ПланыСчетов.Управленческий.РасчетыСУчредителями.ПолучитьОбъект();
	Счет.ТипСчета = Перечисления.ТипыСчетов.ГруппаСчетов;
	Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
	Счет.Записать();
	
		// 75.01
		Счет = ПланыСчетов.Управленческий.РасчетыПоВкладамВУставныйКапитал.ПолучитьОбъект();
		Счет.Родитель = ПланыСчетов.Управленческий.РасчетыСУчредителями;
		Счет.ТипСчета = Перечисления.ТипыСчетов.Дебиторы;
		Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
		Счет.Записать();
		
		// 75.02
		Счет = ПланыСчетов.Управленческий.РасчетыПоВыплатеДоходов.ПолучитьОбъект();
		Счет.Родитель = ПланыСчетов.Управленческий.РасчетыСУчредителями;
		Счет.ТипСчета = Перечисления.ТипыСчетов.Кредиторы;
		Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
		Счет.Записать();
	
	// 76
	Счет = ПланыСчетов.Управленческий.РасчетыСРазнымиДебиторамиИКредиторами.ПолучитьОбъект();
	Счет.ТипСчета = Перечисления.ТипыСчетов.ГруппаСчетов;
	Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
	Счет.Записать();
	
		// 76.01
		Счет = ПланыСчетов.Управленческий.РасчетыСРазнымиДебиторами.ПолучитьОбъект();
		Счет.Родитель = ПланыСчетов.Управленческий.РасчетыСРазнымиДебиторамиИКредиторами;
		Счет.ТипСчета = Перечисления.ТипыСчетов.Дебиторы;
		Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
		Счет.Записать();
		
		// 76.02
		Счет = ПланыСчетов.Управленческий.РасчетыСРазнымиКредиторами.ПолучитьОбъект();
		Счет.Родитель = ПланыСчетов.Управленческий.РасчетыСРазнымиДебиторамиИКредиторами;
		Счет.ТипСчета = Перечисления.ТипыСчетов.Кредиторы;
		Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
		Счет.Записать();
		
		//76.05
		Счет = ПланыСчетов.Управленческий.РасчетыСПрочимиПоставщикамиИТаможеннымиОрганами.ПолучитьОбъект();
		Счет.Родитель = ПланыСчетов.Управленческий.РасчетыСРазнымиДебиторамиИКредиторами;
		Счет.ТипСчета = Перечисления.ТипыСчетов.Кредиторы;
		Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
		Счет.Записать();
	// Конец Прочие расчеты
	
	// 80.
	Счет = ПланыСчетов.Управленческий.УставныйКапитал.ПолучитьОбъект();
	Счет.ТипСчета = Перечисления.ТипыСчетов.Капитал;
	Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
	Счет.Записать();
	
	// 82.
	Счет = ПланыСчетов.Управленческий.РезервныйИДобавочныйКапитал.ПолучитьОбъект();
	Счет.ТипСчета = Перечисления.ТипыСчетов.РезервныйИДобавочныйКапитал;
	Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
	Счет.Записать();
	
	// 84.
	Счет = ПланыСчетов.Управленческий.НераспределеннаяПрибыль.ПолучитьОбъект();
	Счет.ТипСчета = Перечисления.ТипыСчетов.НераспределеннаяПрибыль;
	Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
	Счет.Записать();

	// 90.
	Счет = ПланыСчетов.Управленческий.Продажи.ПолучитьОбъект();
	Счет.ТипСчета = Перечисления.ТипыСчетов.ГруппаСчетов;
	Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
	Счет.Записать();
	
		// 90.01
		Счет = ПланыСчетов.Управленческий.ВыручкаОтПродаж.ПолучитьОбъект();
		Счет.Родитель = ПланыСчетов.Управленческий.Продажи;
		Счет.ТипСчета = Перечисления.ТипыСчетов.Доходы;
		Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
		Счет.Записать();
		
		// 90.02
		Счет = ПланыСчетов.Управленческий.СебестоимостьПродаж.ПолучитьОбъект();
		Счет.Родитель = ПланыСчетов.Управленческий.Продажи;
		Счет.ТипСчета = Перечисления.ТипыСчетов.СебестоимостьПродаж;
		Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
		Счет.Записать();
		
		// 90.07
		Счет = ПланыСчетов.Управленческий.КоммерческиеРасходы.ПолучитьОбъект();
		Счет.Родитель = ПланыСчетов.Управленческий.Продажи;
		Счет.ТипСчета = Перечисления.ТипыСчетов.Расходы;
		Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.ОбъемПродаж;
		Счет.Записать();
		
		// 90.08
		Счет = ПланыСчетов.Управленческий.УправленческиеРасходы.ПолучитьОбъект();
		Счет.Родитель = ПланыСчетов.Управленческий.Продажи;
		Счет.ТипСчета = Перечисления.ТипыСчетов.Расходы;
		Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.ОбъемПродаж;
		Счет.Записать();
		
	// 91.
	Счет = ПланыСчетов.Управленческий.ПрочиеДоходыИРасходы.ПолучитьОбъект();
	Счет.ТипСчета = Перечисления.ТипыСчетов.ГруппаСчетов;
	Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
	Счет.Записать();
	
		// 91.01
		Счет = ПланыСчетов.Управленческий.ПрочиеДоходы.ПолучитьОбъект();
		Счет.Родитель = ПланыСчетов.Управленческий.ПрочиеДоходыИРасходы;
		Счет.ТипСчета = Перечисления.ТипыСчетов.ПрочиеДоходы;
		Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.ОбъемПродаж;
		Счет.Записать();
		
		// 91.02
		Счет = ПланыСчетов.Управленческий.ПрочиеРасходы.ПолучитьОбъект();
		Счет.Родитель = ПланыСчетов.Управленческий.ПрочиеДоходыИРасходы;
		Счет.ТипСчета = Перечисления.ТипыСчетов.ПрочиеРасходы;
		Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.ОбъемПродаж;
		Счет.Записать();
		
		// 91.03
		Счет = ПланыСчетов.Управленческий.ПроцентыПоКредитам.ПолучитьОбъект();
		Счет.Родитель = ПланыСчетов.Управленческий.ПрочиеДоходыИРасходы;
		Счет.ТипСчета = Перечисления.ТипыСчетов.ПроцентыПоКредитам;
		Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.ОбъемПродаж;
		Счет.Записать();
		
	// 94.
	Счет = ПланыСчетов.Управленческий.НедостачиИПотериОтПорчиЦенностей.ПолучитьОбъект();
	Счет.ТипСчета = Перечисления.ТипыСчетов.ПрочиеОборотныеАктивы;
	Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
	Счет.Записать();
	
	// 97.
	Счет = ПланыСчетов.Управленческий.РасходыБудущихПериодов.ПолучитьОбъект();
	Счет.ТипСчета = Перечисления.ТипыСчетов.ПрочиеОборотныеАктивы;
	Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
	Счет.Записать();
	
	// 99.
	Счет = ПланыСчетов.Управленческий.ПрибылиИУбытки.ПолучитьОбъект();
	Счет.ТипСчета = Перечисления.ТипыСчетов.ГруппаСчетов;
	Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
	Счет.Записать();
	
		// 99.01
		Счет = ПланыСчетов.Управленческий.ПрибылиИУбыткиБезНалогаНаПрибыль.ПолучитьОбъект();
		Счет.Родитель = ПланыСчетов.Управленческий.ПрибылиИУбытки;
		Счет.ТипСчета = Перечисления.ТипыСчетов.ПрибылиУбытки;
		Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
		Счет.Записать();
		
		// 99.02
		Счет = ПланыСчетов.Управленческий.ПрибылиИУбытки_НалогНаПрибыль.ПолучитьОбъект();
		Счет.Родитель = ПланыСчетов.Управленческий.ПрибылиИУбытки;
		Счет.ТипСчета = Перечисления.ТипыСчетов.НалогНаПрибыль;
		Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
		Счет.Записать();		
		
КонецПроцедуры // ЗагрузитьУправленческийПланСчетовПервыйЗапуск()

//(3) Процедура заполняет в ИБ справочник "Виды налогов".
//
Процедура ЗаполнитьВидыНалоговПервыйЗапуск()
	
	// 1. НДС.
	ВидНалога = Справочники.ВидыНалогов.СоздатьЭлемент();
	ВидНалога.Наименование = "НДС";
	ВидНалога.СчетУчета = ПланыСчетов.Управленческий.Налоги;
	ВидНалога.СчетУчетаКВозмещению = ПланыСчетов.Управленческий.НалогиКВозмещению;
	ВидНалога.Записать();
	
	// 2. Налог на прибыль.
	ВидНалога = Справочники.ВидыНалогов.СоздатьЭлемент();
	ВидНалога.Наименование = "Налог на прибыль";
	ВидНалога.СчетУчета = ПланыСчетов.Управленческий.Налоги;
	ВидНалога.СчетУчетаКВозмещению = ПланыСчетов.Управленческий.НалогиКВозмещению;
	ВидНалога.Записать();
	
	ВидНалога = Справочники.ВидыНалогов.АвансовыйПлатежПриУСН.ПолучитьОбъект();
	ВидНалога.СчетУчета = ПланыСчетов.Управленческий.Налоги;
	ВидНалога.СчетУчетаКВозмещению = ПланыСчетов.Управленческий.НалогиКВозмещению;
	ВидНалога.Записать();
	
	ВидНалога = Справочники.ВидыНалогов.ЕдиныйНалогПриУСН.ПолучитьОбъект();
	ВидНалога.СчетУчета = ПланыСчетов.Управленческий.Налоги;
	ВидНалога.СчетУчетаКВозмещению = ПланыСчетов.Управленческий.НалогиКВозмещению;
	ВидНалога.Записать();
	
	ВидНалога = Справочники.ВидыНалогов.ПФРНакопительная.ПолучитьОбъект();
	ВидНалога.СчетУчета = ПланыСчетов.Управленческий.Налоги;
	ВидНалога.СчетУчетаКВозмещению = ПланыСчетов.Управленческий.НалогиКВозмещению;
	ВидНалога.ВидНалога = Перечисления.ВидыНалогов.ФиксированныеВзносы_ПФР_НакопительнаяЧасть;
	ДанныеПоНалогу = Справочники.ВидыНалогов.НайтиПоставляемыеДанные(ВидНалога.ВидНалога, Неопределено, Неопределено);
	Если ДанныеПоНалогу <> Неопределено Тогда
		ВидНалога.КодБК = ДанныеПоНалогу.КодБК;
	КонецЕсли;
	ВидНалога.Записать();
	
	ВидНалога = Справочники.ВидыНалогов.ПФРСтраховая.ПолучитьОбъект();
	ВидНалога.СчетУчета = ПланыСчетов.Управленческий.Налоги;
	ВидНалога.СчетУчетаКВозмещению = ПланыСчетов.Управленческий.НалогиКВозмещению;
	ВидНалога.ВидНалога = Перечисления.ВидыНалогов.ФиксированныеВзносы_ПФР_СтраховаяЧасть;
	ДанныеПоНалогу = Справочники.ВидыНалогов.НайтиПоставляемыеДанные(ВидНалога.ВидНалога, Неопределено, Неопределено);
	Если ДанныеПоНалогу <> Неопределено Тогда
		ВидНалога.КодБК = ДанныеПоНалогу.КодБК;
	КонецЕсли;
	ВидНалога.Записать();
	
	ВидНалога = Справочники.ВидыНалогов.ТФОМС.ПолучитьОбъект();
	ВидНалога.СчетУчета = ПланыСчетов.Управленческий.Налоги;
	ВидНалога.СчетУчетаКВозмещению = ПланыСчетов.Управленческий.НалогиКВозмещению;
	ВидНалога.Записать();
	
	ВидНалога = Справочники.ВидыНалогов.ФФОМС.ПолучитьОбъект();
	ВидНалога.СчетУчета = ПланыСчетов.Управленческий.Налоги;
	ВидНалога.СчетУчетаКВозмещению = ПланыСчетов.Управленческий.НалогиКВозмещению;
	ВидНалога.ВидНалога = Перечисления.ВидыНалогов.ФиксированныеВзносы_ФФОМС;
	ДанныеПоНалогу = Справочники.ВидыНалогов.НайтиПоставляемыеДанные(ВидНалога.ВидНалога, Неопределено, Неопределено);
	Если ДанныеПоНалогу <> Неопределено Тогда
		ВидНалога.КодБК = ДанныеПоНалогу.КодБК;
	КонецЕсли;
	ВидНалога.Записать();
	
	ВидНалога = Справочники.ВидыНалогов.ЕНВД.ПолучитьОбъект();
	ВидНалога.СчетУчета = ПланыСчетов.Управленческий.Налоги;
	ВидНалога.СчетУчетаКВозмещению = ПланыСчетов.Управленческий.НалогиКВозмещению;
	ВидНалога.ВидНалога = Перечисления.ВидыНалогов.ЕНВД;
	ДанныеПоНалогу = Справочники.ВидыНалогов.НайтиПоставляемыеДанные(ВидНалога.ВидНалога, Неопределено, Неопределено);
	Если ДанныеПоНалогу <> Неопределено Тогда
		ВидНалога.КодБК = ДанныеПоНалогу.КодБК;
	КонецЕсли;
	ВидНалога.Записать();
	
	ВидНалога = Справочники.ВидыНалогов.НДФЛСотрудники.ПолучитьОбъект();
	ВидНалога.СчетУчета = ПланыСчетов.Управленческий.Налоги;
	ВидНалога.СчетУчетаКВозмещению = ПланыСчетов.Управленческий.НалогиКВозмещению;
	ВидНалога.ВидНалога = Перечисления.ВидыНалогов.НДФЛ;
	ДанныеПоНалогу = Справочники.ВидыНалогов.НайтиПоставляемыеДанные(ВидНалога.ВидНалога, Неопределено, Неопределено);
	Если ДанныеПоНалогу <> Неопределено Тогда
		ВидНалога.КодБК = ДанныеПоНалогу.КодБК;
	КонецЕсли;
	ВидНалога.Записать();
	
	ВидНалога = Справочники.ВидыНалогов.ПФРНакопительнаяСотрудники.ПолучитьОбъект();
	ВидНалога.СчетУчета = ПланыСчетов.Управленческий.Налоги;
	ВидНалога.СчетУчетаКВозмещению = ПланыСчетов.Управленческий.НалогиКВозмещению;
	ВидНалога.ВидНалога = Перечисления.ВидыНалогов.СтраховыеВзносы_ПФР_НакопительнаяЧасть;
	ДанныеПоНалогу = Справочники.ВидыНалогов.НайтиПоставляемыеДанные(ВидНалога.ВидНалога, Неопределено, Неопределено);
	Если ДанныеПоНалогу <> Неопределено Тогда
		ВидНалога.КодБК = ДанныеПоНалогу.КодБК;
	КонецЕсли;
	ВидНалога.Записать();
	
	ВидНалога = Справочники.ВидыНалогов.ПФРСтраховаяСотрудники.ПолучитьОбъект();
	ВидНалога.СчетУчета = ПланыСчетов.Управленческий.Налоги;
	ВидНалога.СчетУчетаКВозмещению = ПланыСчетов.Управленческий.НалогиКВозмещению;
	ВидНалога.ВидНалога = Перечисления.ВидыНалогов.СтраховыеВзносы_ПФР_СтраховаяЧасть;
	ДанныеПоНалогу = Справочники.ВидыНалогов.НайтиПоставляемыеДанные(ВидНалога.ВидНалога, Неопределено, Неопределено);
	Если ДанныеПоНалогу <> Неопределено Тогда
		ВидНалога.КодБК = ДанныеПоНалогу.КодБК;
	КонецЕсли;
	ВидНалога.Записать();
	
	ВидНалога = Справочники.ВидыНалогов.ФСССотрудники.ПолучитьОбъект();
	ВидНалога.СчетУчета = ПланыСчетов.Управленческий.Налоги;
	ВидНалога.СчетУчетаКВозмещению = ПланыСчетов.Управленческий.НалогиКВозмещению;
	ВидНалога.ВидНалога = Перечисления.ВидыНалогов.СтраховыеВзносы_ФСС;
	ДанныеПоНалогу = Справочники.ВидыНалогов.НайтиПоставляемыеДанные(ВидНалога.ВидНалога, Неопределено, Неопределено);
	Если ДанныеПоНалогу <> Неопределено Тогда
		ВидНалога.КодБК = ДанныеПоНалогу.КодБК;
	КонецЕсли;
	ВидНалога.Записать();
	
	ВидНалога = Справочники.ВидыНалогов.ФССТравматизмСотрудники.ПолучитьОбъект();
	ВидНалога.СчетУчета = ПланыСчетов.Управленческий.Налоги;
	ВидНалога.СчетУчетаКВозмещению = ПланыСчетов.Управленческий.НалогиКВозмещению;
	ВидНалога.ВидНалога = Перечисления.ВидыНалогов.СтраховыеВзносы_ФСС_НСиПЗ;
	ДанныеПоНалогу = Справочники.ВидыНалогов.НайтиПоставляемыеДанные(ВидНалога.ВидНалога, Неопределено, Неопределено);
	Если ДанныеПоНалогу <> Неопределено Тогда
		ВидНалога.КодБК = ДанныеПоНалогу.КодБК;
	КонецЕсли;
	ВидНалога.Записать();
	
	ВидНалога = Справочники.ВидыНалогов.ФОМССотрудники.ПолучитьОбъект();
	ВидНалога.СчетУчета = ПланыСчетов.Управленческий.Налоги;
	ВидНалога.СчетУчетаКВозмещению = ПланыСчетов.Управленческий.НалогиКВозмещению;
	ВидНалога.ВидНалога = Перечисления.ВидыНалогов.СтраховыеВзносы_ФФОМС;
	ДанныеПоНалогу = Справочники.ВидыНалогов.НайтиПоставляемыеДанные(ВидНалога.ВидНалога, Неопределено, Неопределено);
	Если ДанныеПоНалогу <> Неопределено Тогда
		ВидНалога.КодБК = ДанныеПоНалогу.КодБК;
	КонецЕсли;
	ВидНалога.Записать();
	
	ВидНалога = Справочники.ВидыНалогов.ПФРСвыше300тр.ПолучитьОбъект();
	ВидНалога.СчетУчета = ПланыСчетов.Управленческий.Налоги;
	ВидНалога.СчетУчетаКВозмещению = ПланыСчетов.Управленческий.НалогиКВозмещению;
	ВидНалога.ВидНалога = Перечисления.ВидыНалогов.ПустаяСсылка();
	ВидНалога.Записать();
	
	ВидНалога = Справочники.ВидыНалогов.Патент.ПолучитьОбъект();
	ВидНалога.СчетУчета = ПланыСчетов.Управленческий.Налоги;
	ВидНалога.СчетУчетаКВозмещению = ПланыСчетов.Управленческий.НалогиКВозмещению;
	ВидНалога.Записать();
	
	ВидНалога = Справочники.ВидыНалогов.ТорговыйСбор.ПолучитьОбъект();
	ВидНалога.СчетУчета = ПланыСчетов.Управленческий.Налоги;
	ВидНалога.СчетУчетаКВозмещению = ПланыСчетов.Управленческий.НалогиКВозмещению;
	ВидНалога.ВидНалога = Перечисления.ВидыНалогов.ТорговыйСбор;
	ДанныеПоНалогу = Справочники.ВидыНалогов.НайтиПоставляемыеДанные(ВидНалога.ВидНалога, Неопределено, Неопределено);
	Если ДанныеПоНалогу <> Неопределено Тогда
		ВидНалога.КодБК = ДанныеПоНалогу.КодБК;
	КонецЕсли;
	ВидНалога.Записать();
	
КонецПроцедуры // ЗаполнитьВидыНалоговПервыйЗапуск()

//(4) Возвращает объект по коду.
//    Если объект не найден в справочнике, создаёт новый объет и заполняет его из классификатора.
Функция СправочникОбъектВалютыПоКоду(Знач КодВалюты)
	
	ВалютаСсылка = Справочники.Валюты.НайтиПоКоду(КодВалюты);
	Если ЗначениеЗаполнено(ВалютаСсылка) Тогда
		Возврат ВалютаСсылка.ПолучитьОбъект();
	КонецЕсли;
	
	Результат = Справочники.Валюты.СоздатьЭлемент();
	
	КлассификаторXML = Справочники.Валюты.ПолучитьМакет("ОбщероссийскийКлассификаторВалют").ПолучитьТекст();
	
	КлассификаторТаблица = ОбщегоНазначения.ПрочитатьXMLВТаблицу(КлассификаторXML).Данные;
	
	ЗаписьОКВ = КлассификаторТаблица.Найти(КодВалюты, "Code"); 
	Если ЗаписьОКВ = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	Результат.Код = ЗаписьОКВ.Code;
	Результат.Наименование = ЗаписьОКВ.CodeSymbol;
	Результат.НаименованиеПолное = ЗаписьОКВ.Name;
	Если ЗаписьОКВ.RBCLoading Тогда
		Результат.СпособУстановкиКурса = Перечисления.СпособыУстановкиКурсаВалюты.ЗагрузкаИзИнтернета;
	Иначе
		Результат.СпособУстановкиКурса = Перечисления.СпособыУстановкиКурсаВалюты.РучнойВвод;
	КонецЕсли;
	Результат.ПараметрыПрописиНаРусском = ЗаписьОКВ.NumerationItemOptions;
	
	Возврат Результат;
	
КонецФункции

//(5) Функция заполняет в ИБ спрвочник "Ставки НДС" и возвращает
// ссылку на ставку НДС 18% для дальнейшего использования.
//
Функция ЗаполнитьСтавкиНДСПервыйЗапуск()
	
	// 10%
	СтавкаНДС = Справочники.СтавкиНДС.СоздатьЭлемент();
	СтавкаНДС.Наименование = "10%";
	СтавкаНДС.Ставка = 10;
	СтавкаНДС.Записать();
	
	// 18% / 118%
	СтавкаНДС = Справочники.СтавкиНДС.СоздатьЭлемент();
	СтавкаНДС.Наименование = "18% / 118%";
	СтавкаНДС.Расчетная = Истина;
	СтавкаНДС.Ставка = 18;
	СтавкаНДС.Записать();
	
	// 10% / 110%
	СтавкаНДС = Справочники.СтавкиНДС.СоздатьЭлемент();
	СтавкаНДС.Наименование = "10% / 110%";
	СтавкаНДС.Расчетная = Истина;
	СтавкаНДС.Ставка = 10;
	СтавкаНДС.Записать();
	
	// 0%
	СтавкаНДС = Справочники.СтавкиНДС.СоздатьЭлемент();
	СтавкаНДС.Наименование = "0%";
	СтавкаНДС.Ставка = 0;
	СтавкаНДС.Записать();
	
	// Без НДС
	СтавкаНДС = Справочники.СтавкиНДС.СоздатьЭлемент();
	СтавкаНДС.Наименование = "Без НДС";
	СтавкаНДС.НеОблагается = Истина;
	СтавкаНДС.Ставка = 0;
	СтавкаНДС.Записать();
	
	// 18%
	СтавкаНДС = Справочники.СтавкиНДС.СоздатьЭлемент();
	СтавкаНДС.Наименование = "18%";
	СтавкаНДС.Ставка = 18;	
	СтавкаНДС.Записать();
	
	Возврат СтавкаНДС.Ссылка;
	
КонецФункции // ЗаполнитьСтавкиНДСПервыйЗапуск()

//(7) Процедура создает график работы на основе производственного календаря 
// Российской Федерации по шаблону "Пятидневка"
//
Процедура СоздатьКалендарьПятидневкаРоссийскойФедерации() Экспорт
	
	ПроизводственныйКалендарь = КалендарныеГрафики.ПроизводственныйКалендарьРоссийскойФедерации();
	Если ПроизводственныйКалендарь = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не Справочники.Календари.НайтиПоРеквизиту("ПроизводственныйКалендарь", ПроизводственныйКалендарь).Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	НовыйГрафикРаботы = Справочники.Календари.СоздатьЭлемент();
	НовыйГрафикРаботы.Наименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПроизводственныйКалендарь, "Наименование");
	НовыйГрафикРаботы.ПроизводственныйКалендарь = ПроизводственныйКалендарь;
	НовыйГрафикРаботы.СпособЗаполнения = Перечисления.СпособыЗаполненияГрафикаРаботы.ПоНеделям;
	НовыйГрафикРаботы.ДатаНачала = НачалоГода(ТекущаяДатаСеанса());
	НовыйГрафикРаботы.УчитыватьПраздники = Истина;
	
	// Заполняем недельный цикл как пятидневку
	Для НомерДня = 1 По 7 Цикл
		НовыйГрафикРаботы.ШаблонЗаполнения.Добавить().ДеньВключенВГрафик = НомерДня <= 5;
	КонецЦикла;
	
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(НовыйГрафикРаботы, Истина, Истина);
	
КонецПроцедуры // СоздатьКалендарьПятидневкаРоссийскойФедерации()

//(14) Процедура заполняет классификатор использования рабочего времени.
//
Процедура ЗаполнитьКлассификаторИспользованияРабочегоВремени()
	
	// Б.
	ВидыРабочегоВремениСсылка = Справочники.ВидыРабочегоВремени.Болезнь;
	ВидыРабочегоВремени = ВидыРабочегоВремениСсылка.ПолучитьОбъект();
	ВидыРабочегоВремени.ПолноеНаименование = "Временная нетрудоспособность с назначением пособия согласно законодательству";
	ВидыРабочегоВремени.Записать();
	
	// В.
	ВидыРабочегоВремениСсылка = Справочники.ВидыРабочегоВремени.ВыходныеДни;
	ВидыРабочегоВремени = ВидыРабочегоВремениСсылка.ПолучитьОбъект();
	ВидыРабочегоВремени.ПолноеНаименование = "Выходные дни (еженедельный отпуск) и  нерабочие праздничные дни";
	ВидыРабочегоВремени.Записать();
	
	// ВП.
	ВидыРабочегоВремениСсылка = Справочники.ВидыРабочегоВремени.ПростойПоВинеРаботника;
	ВидыРабочегоВремени = ВидыРабочегоВремениСсылка.ПолучитьОбъект();
	ВидыРабочегоВремени.ПолноеНаименование = "Простои по вине работника";
	ВидыРабочегоВремени.Записать();
	
	// ВЧ.
	ВидыРабочегоВремениСсылка = Справочники.ВидыРабочегоВремени.РаботаВечерниеЧасы;
	ВидыРабочегоВремени = ВидыРабочегоВремениСсылка.ПолучитьОбъект();
	ВидыРабочегоВремени.ПолноеНаименование = "Продолжительность работы в вечернее время";
	ВидыРабочегоВремени.Записать();
	
	// Г.
	ВидыРабочегоВремениСсылка = Справочники.ВидыРабочегоВремени.ГосударственныеОбязанности;
	ВидыРабочегоВремени = ВидыРабочегоВремениСсылка.ПолучитьОбъект();
	ВидыРабочегоВремени.ПолноеНаименование = "Невыходы на время исполнения государственных или общественных обязанностей согласно законодательству";
	ВидыРабочегоВремени.Записать();
	
	// ДБ.
	ВидыРабочегоВремениСсылка = Справочники.ВидыРабочегоВремени.НеоплачиваемыйДополнительныйОтпуск;
	ВидыРабочегоВремени = ВидыРабочегоВремениСсылка.ПолучитьОбъект();
	ВидыРабочегоВремени.ПолноеНаименование = "Ежегодный дополнительный отпуск без сохранения заработной платы";
	ВидыРабочегоВремени.Записать();
	
	// ДО.
	ВидыРабочегоВремениСсылка = Справочники.ВидыРабочегоВремени.НеоплачиваемыйОтпускПоРазрешениюРаботодателя;
	ВидыРабочегоВремени = ВидыРабочегоВремениСсылка.ПолучитьОбъект();
	ВидыРабочегоВремени.ПолноеНаименование = "Отпуск без сохранения заработной платы, предоставляемый работнику по разрешению работодателя";
	ВидыРабочегоВремени.Записать();
	
	// ЗБ.
	ВидыРабочегоВремениСсылка = Справочники.ВидыРабочегоВремени.Забастовка;
	ВидыРабочегоВремени = ВидыРабочегоВремениСсылка.ПолучитьОбъект();
	ВидыРабочегоВремени.ПолноеНаименование = "Забастовка (при условиях и в порядке, предусмотренных законом)";
	ВидыРабочегоВремени.Записать();
	
	// К.
	ВидыРабочегоВремениСсылка = Справочники.ВидыРабочегоВремени.Командировка;
	ВидыРабочегоВремени = ВидыРабочегоВремениСсылка.ПолучитьОбъект();
	ВидыРабочегоВремени.ПолноеНаименование = "Служебная командировка";
	ВидыРабочегоВремени.Записать();
	
	// Н.
	ВидыРабочегоВремениСсылка = Справочники.ВидыРабочегоВремени.РаботаНочныеЧасы;
	ВидыРабочегоВремени = ВидыРабочегоВремениСсылка.ПолучитьОбъект();
	ВидыРабочегоВремени.ПолноеНаименование = "Продолжительность работы в ночное время";
	ВидыРабочегоВремени.Записать();
	
	// НБ.
	ВидыРабочегоВремениСсылка = Справочники.ВидыРабочегоВремени.ОтстранениеОтРаботыБезОплаты;
	ВидыРабочегоВремени = ВидыРабочегоВремениСсылка.ПолучитьОбъект();
	ВидыРабочегоВремени.ПолноеНаименование = "Отстранение от работы (недопущение к работе) по причинам, предусмотренным законодательством, без начисления заработной платы";
	ВидыРабочегоВремени.Записать();
	
	// НВ.
	ВидыРабочегоВремениСсылка = Справочники.ВидыРабочегоВремени.ДополнительныеВыходныеДниНеОплачиваемые;
	ВидыРабочегоВремени = ВидыРабочегоВремениСсылка.ПолучитьОбъект();
	ВидыРабочегоВремени.ПолноеНаименование = "Дополнительные выходные дни (без сохранения заработной платы)";
	ВидыРабочегоВремени.Записать();
	
	// НЗ.
	ВидыРабочегоВремениСсылка = Справочники.ВидыРабочегоВремени.ЗадержкаВыплатыЗаработнойПлаты;
	ВидыРабочегоВремени = ВидыРабочегоВремениСсылка.ПолучитьОбъект();
	ВидыРабочегоВремени.ПолноеНаименование = "Время приостановки работы в случае задержки выплаты заработной платы";
	ВидыРабочегоВремени.Записать();
	
	// НН.
	ВидыРабочегоВремениСсылка = Справочники.ВидыРабочегоВремени.НеявкиПоНевыясненнымПричинам;
	ВидыРабочегоВремени = ВидыРабочегоВремениСсылка.ПолучитьОбъект();
	ВидыРабочегоВремени.ПолноеНаименование = "Неявки по невыясненным причинам (до выяснения обстоятельств)";
	ВидыРабочегоВремени.Записать();
	
	// НО.
	ВидыРабочегоВремениСсылка = Справочники.ВидыРабочегоВремени.ОтстранениеОтРаботыСОплатой;
	ВидыРабочегоВремени = ВидыРабочегоВремениСсылка.ПолучитьОбъект();
	ВидыРабочегоВремени.ПолноеНаименование = "Отстранение от работы (недопущение к работе) с оплатой (пособием) в соответствии с законодательством";
	ВидыРабочегоВремени.Записать();
	
	// НП.
	ВидыРабочегоВремениСсылка = Справочники.ВидыРабочегоВремени.Простой;
	ВидыРабочегоВремени = ВидыРабочегоВремениСсылка.ПолучитьОбъект();
	ВидыРабочегоВремени.ПолноеНаименование = "Время простоя по причинам, не зависящим от работодателя и работника";
	ВидыРабочегоВремени.Записать();
	
	// ОВ.
	ВидыРабочегоВремениСсылка = Справочники.ВидыРабочегоВремени.ДополнительныеВыходныеДниОплачиваемые;
	ВидыРабочегоВремени = ВидыРабочегоВремениСсылка.ПолучитьОбъект();
	ВидыРабочегоВремени.ПолноеНаименование = "Дополнительные выходные дни (оплачиваемые)";
	ВидыРабочегоВремени.Записать();
	
	// ОД.
	ВидыРабочегоВремениСсылка = Справочники.ВидыРабочегоВремени.ДополнительныйОтпуск;
	ВидыРабочегоВремени = ВидыРабочегоВремениСсылка.ПолучитьОбъект();
	ВидыРабочегоВремени.ПолноеНаименование = "Ежегодный дополнительный оплачиваемый отпуск";
	ВидыРабочегоВремени.Записать();
	
	// ОЖ.
	ВидыРабочегоВремениСсылка = Справочники.ВидыРабочегоВремени.ОтпускПоУходуЗаРебенком;
	ВидыРабочегоВремени = ВидыРабочегоВремениСсылка.ПолучитьОбъект();
	ВидыРабочегоВремени.ПолноеНаименование = "Отпуск по уходу за ребенком до достижения им возраста трех лет";
	ВидыРабочегоВремени.Записать();
	
	// ОЗ.
	ВидыРабочегоВремениСсылка = Справочники.ВидыРабочегоВремени.НеоплачиваемыйОтпускПоЗаконодательству;
	ВидыРабочегоВремени = ВидыРабочегоВремениСсылка.ПолучитьОбъект();
	ВидыРабочегоВремени.ПолноеНаименование = "Отпуск без сохранения заработной платы в случаях, предусмотренных законодательством";
	ВидыРабочегоВремени.Записать();
	
	// ОТ.
	ВидыРабочегоВремениСсылка = Справочники.ВидыРабочегоВремени.ОсновнойОтпуск;
	ВидыРабочегоВремени = ВидыРабочегоВремениСсылка.ПолучитьОбъект();
	ВидыРабочегоВремени.ПолноеНаименование = "Ежегодный основной оплачиваемый отпуск";
	ВидыРабочегоВремени.Записать();
	
	// ПВ.
	ВидыРабочегоВремениСсылка = Справочники.ВидыРабочегоВремени.ВынужденныйПрогул;
	ВидыРабочегоВремени = ВидыРабочегоВремениСсылка.ПолучитьОбъект();
	ВидыРабочегоВремени.ПолноеНаименование = "Время вынужденного прогула в случае признания увольнения, перевода на другую работу или отстранения от работы незаконными с восстановлением на прежней работе";
	ВидыРабочегоВремени.Записать();
	
	// ПК.
	ВидыРабочегоВремениСсылка = Справочники.ВидыРабочегоВремени.ПовышениеКвалификации;
	ВидыРабочегоВремени = ВидыРабочегоВремениСсылка.ПолучитьОбъект();
	ВидыРабочегоВремени.ПолноеНаименование = "Повышение квалификации с отрывом от работы";
	ВидыРабочегоВремени.Записать();
	
	// ПМ.
	ВидыРабочегоВремениСсылка = Справочники.ВидыРабочегоВремени.ПовышениеКвалификацииВДругойМестности;
	ВидыРабочегоВремени = ВидыРабочегоВремениСсылка.ПолучитьОбъект();
	ВидыРабочегоВремени.ПолноеНаименование = "Повышение квалификации с отрывом от работы в другой местности";
	ВидыРабочегоВремени.Записать();
	
	// ПР.
	ВидыРабочегоВремениСсылка = Справочники.ВидыРабочегоВремени.Прогулы;
	ВидыРабочегоВремени = ВидыРабочегоВремениСсылка.ПолучитьОбъект();
	ВидыРабочегоВремени.ПолноеНаименование = "Прогулы (отсутствие на рабочем месте без уважительных причин в течение времени, установленного законодательством)";
	ВидыРабочегоВремени.Записать();
	
	// Р.
	ВидыРабочегоВремениСсылка = Справочники.ВидыРабочегоВремени.ОтпускПоБеременностиИРодам;
	ВидыРабочегоВремени = ВидыРабочегоВремениСсылка.ПолучитьОбъект();
	ВидыРабочегоВремени.ПолноеНаименование = "Отпуск по беременности и родам (отпуск в связи с усыновлением новорожденного ребенка)";
	ВидыРабочегоВремени.Записать();
	
	// РВ.
	ВидыРабочегоВремениСсылка = Справочники.ВидыРабочегоВремени.Праздники;
	ВидыРабочегоВремени = ВидыРабочегоВремениСсылка.ПолучитьОбъект();
	ВидыРабочегоВремени.ПолноеНаименование = "Продолжительность работы в выходные и нерабочие, праздничные дни";
	ВидыРабочегоВремени.Записать();
	
	// РП.
	ВидыРабочегоВремениСсылка = Справочники.ВидыРабочегоВремени.ПростойПоВинеРаботодателя;
	ВидыРабочегоВремени = ВидыРабочегоВремениСсылка.ПолучитьОбъект();
	ВидыРабочегоВремени.ПолноеНаименование = "Время простоя по вине работодателя";
	ВидыРабочегоВремени.Записать();
	
	// С.
	ВидыРабочегоВремениСсылка = Справочники.ВидыРабочегоВремени.Сверхурочные;
	ВидыРабочегоВремени = ВидыРабочегоВремениСсылка.ПолучитьОбъект();
	ВидыРабочегоВремени.ПолноеНаименование = "Продолжительность сверхурочной работы";
	ВидыРабочегоВремени.Записать();
	
	// Т.
	ВидыРабочегоВремениСсылка = Справочники.ВидыРабочегоВремени.БолезньБезОплаты;
	ВидыРабочегоВремени = ВидыРабочегоВремениСсылка.ПолучитьОбъект();
	ВидыРабочегоВремени.ПолноеНаименование = "Временная нетрудоспособность без назначения пособия в случаях, предусмотренных законодательством";
	ВидыРабочегоВремени.Записать();
	
	// У.
	ВидыРабочегоВремениСсылка = Справочники.ВидыРабочегоВремени.ОтпускНаОбучение;
	ВидыРабочегоВремени = ВидыРабочегоВремениСсылка.ПолучитьОбъект();
	ВидыРабочегоВремени.ПолноеНаименование = "Дополнительный отпуск в связи с обучением с сохранением среднего заработка работникам, совмещающим работу с обучением";
	ВидыРабочегоВремени.Записать();
	
	// УД.
	ВидыРабочегоВремениСсылка = Справочники.ВидыРабочегоВремени.ОтпускНаОбучениеНеоплачиваемый;
	ВидыРабочегоВремени = ВидыРабочегоВремениСсылка.ПолучитьОбъект();
	ВидыРабочегоВремени.ПолноеНаименование = "Дополнительный отпуск в связи с обучением без сохранения заработной платы";
	ВидыРабочегоВремени.Записать();
	
	// Я.
	ВидыРабочегоВремениСсылка = Справочники.ВидыРабочегоВремени.Работа;
	ВидыРабочегоВремени = ВидыРабочегоВремениСсылка.ПолучитьОбъект();
	ВидыРабочегоВремени.ПолноеНаименование = "Продолжительность работы в дневное время";
	ВидыРабочегоВремени.Записать();
	
КонецПроцедуры // ЗаполнитьКлассификаторИспользованияРабочегоВремени()

//(15) Процедура заполняет справочники "Параметры расчетов" и "Виды начислений и удержаний".
//
Процедура ЗаполнитьПараметрыРасчетовИВидыНачислений()
	
	// Параметры расчетов.
	
	// Сумму продаж по ответственному (СПО)
	Если НЕ УправлениеНебольшойФирмойСервер.ПараметрРасчетаСуществует("СуммуПродажПоОтветственному") Тогда
		
		ПараметрРасчетовСПО = Справочники.ПараметрыРасчетов.СоздатьЭлемент();
		
		ПараметрРасчетовСПО.Наименование 		 = "Сумму продаж по ответственному";
		ПараметрРасчетовСПО.Идентификатор 	 = "СуммуПродажПоОтветственному"; 
		ПараметрРасчетовСПО.ПроизвольныйЗапрос = Истина;
		ПараметрРасчетовСПО.ЗадаватьЗначениеПриРасчетеЗП = Ложь;
		
		НовыйПараметрЗапроса 						 = ПараметрРасчетовСПО.ПараметрыЗапроса.Добавить();
		НовыйПараметрЗапроса.Имя 					 = "ВалютаУчетаКурс";
		НовыйПараметрЗапроса.Представление 			 = "ВалютаУчетаКурс";
		
		НовыйПараметрЗапроса 						 = ПараметрРасчетовСПО.ПараметрыЗапроса.Добавить();
		НовыйПараметрЗапроса.Имя 					 = "ВалютаДокументаКратность";
		НовыйПараметрЗапроса.Представление 			 = "ВалютаДокументаКратность";
		
		НовыйПараметрЗапроса 						 = ПараметрРасчетовСПО.ПараметрыЗапроса.Добавить();
		НовыйПараметрЗапроса.Имя 					 = "ВалютаДокументаКурс";
		НовыйПараметрЗапроса.Представление 			 = "ВалютаДокументаКурс";
		
		НовыйПараметрЗапроса 						 = ПараметрРасчетовСПО.ПараметрыЗапроса.Добавить();
		НовыйПараметрЗапроса.Имя 					 = "ВалютаУчетаКратность";
		НовыйПараметрЗапроса.Представление 			 = "ВалютаУчетаКратность";
		
		НовыйПараметрЗапроса 						 = ПараметрРасчетовСПО.ПараметрыЗапроса.Добавить();
		НовыйПараметрЗапроса.Имя 					 = "НачалоПериода";
		НовыйПараметрЗапроса.Представление 			 = "НачалоПериода";
		
		НовыйПараметрЗапроса 						 = ПараметрРасчетовСПО.ПараметрыЗапроса.Добавить();
		НовыйПараметрЗапроса.Имя 					 = "КонецПериода";
		НовыйПараметрЗапроса.Представление 			 = "КонецПериода";
		
		НовыйПараметрЗапроса 						 = ПараметрРасчетовСПО.ПараметрыЗапроса.Добавить();
		НовыйПараметрЗапроса.Имя 					 = "Организация";
		НовыйПараметрЗапроса.Представление 			 = "Организация";
		
		НовыйПараметрЗапроса 						 = ПараметрРасчетовСПО.ПараметрыЗапроса.Добавить();
		НовыйПараметрЗапроса.Имя 					 = "Подразделение";
		НовыйПараметрЗапроса.Представление 			 = "Подразделение";
		
		НовыйПараметрЗапроса 						 = ПараметрРасчетовСПО.ПараметрыЗапроса.Добавить();
		НовыйПараметрЗапроса.Имя 					 = "Сотрудник";
		НовыйПараметрЗапроса.Представление 			 = "Сотрудник";
		
		ПараметрРасчетовСПО.Запрос = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СУММА(ЕСТЬNULL(Продажи.Сумма * &ВалютаУчетаКурс * &ВалютаДокументаКратность / (&ВалютаДокументаКурс * &ВалютаУчетаКратность), 0)) КАК СуммаПродаж
		|ИЗ
		|	РегистрНакопления.Продажи КАК Продажи
		|ГДЕ
		|	Продажи.Сумма >= 0
		|	И Продажи.Период МЕЖДУ &НачалоПериода И &КонецПериода
		|	И Продажи.Организация = &Организация
		|	И Продажи.Подразделение = &Подразделение
		|	И Продажи.Ответственный = &Сотрудник
		|	И (ВЫРАЗИТЬ(Продажи.Регистратор КАК Документ.АктВыполненныхРабот) ССЫЛКА Документ.АктВыполненныхРабот
		|			ИЛИ ВЫРАЗИТЬ(Продажи.Регистратор КАК Документ.ЗаказПокупателя) ССЫЛКА Документ.ЗаказПокупателя
		|			ИЛИ ВЫРАЗИТЬ(Продажи.Регистратор КАК Документ.ОтчетОПереработке) ССЫЛКА Документ.ОтчетОПереработке
		|			ИЛИ ВЫРАЗИТЬ(Продажи.Регистратор КАК Документ.ОтчетОРозничныхПродажах) ССЫЛКА Документ.ОтчетОРозничныхПродажах
		|			ИЛИ ВЫРАЗИТЬ(Продажи.Регистратор КАК Документ.РасходнаяНакладная) ССЫЛКА Документ.РасходнаяНакладная
		|			ИЛИ ВЫРАЗИТЬ(Продажи.Регистратор КАК Документ.ЧекККМ) ССЫЛКА Документ.ЧекККМ)
		|
		|СГРУППИРОВАТЬ ПО
		|	Продажи.Ответственный";
		
		ПараметрРасчетовСПО.Записать();
		
	КонецЕсли;
	
	// Фиксированная сумма
	Если НЕ УправлениеНебольшойФирмойСервер.ПараметрРасчетаСуществует("ФиксированнаяСумма") Тогда
		
		ПараметрРасчетовФиксированнаяСумма = Справочники.ПараметрыРасчетов.СоздатьЭлемент();
		ПараметрРасчетовФиксированнаяСумма.Наименование 				= "Фиксированная сумма";
		ПараметрРасчетовФиксированнаяСумма.Идентификатор 	 			= "ФиксированнаяСумма";
		ПараметрРасчетовФиксированнаяСумма.ПроизвольныйЗапрос 			= Ложь;
		ПараметрРасчетовФиксированнаяСумма.ЗадаватьЗначениеПриРасчетеЗП = Истина;
		ПараметрРасчетовФиксированнаяСумма.Записать();
		
	КонецЕсли;
	
	// Норма дней
	Если НЕ УправлениеНебольшойФирмойСервер.ПараметрРасчетаСуществует("НормаДней") Тогда
		
		ПараметрРасчетовНормаДней = Справочники.ПараметрыРасчетов.СоздатьЭлемент();
		ПараметрРасчетовНормаДней.Наименование 		 = "Норма дней";
		ПараметрРасчетовНормаДней.Идентификатор 	 = "НормаДней";
		ПараметрРасчетовНормаДней.ПроизвольныйЗапрос = Истина;
		ПараметрРасчетовНормаДней.ЗадаватьЗначениеПриРасчетеЗП = Ложь;
		НовыйПараметрЗапроса 						 = ПараметрРасчетовНормаДней.ПараметрыЗапроса.Добавить();
		НовыйПараметрЗапроса.Имя 					 = "Организация";
		НовыйПараметрЗапроса.Представление 			 = "Организация";
		НовыйПараметрЗапроса 						 = ПараметрРасчетовНормаДней.ПараметрыЗапроса.Добавить();
		НовыйПараметрЗапроса.Имя 					 = "ПериодРегистрации";
		НовыйПараметрЗапроса.Представление 			 = "Период регистрации";
		ПараметрРасчетовНормаДней.Запрос 			 = 
		"ВЫБРАТЬ
		|	СУММА(1) КАК НормаДней
		|ИЗ
		|	РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
		|		ПО КалендарныеГрафики.Календарь = Организации.ПроизводственныйКалендарь
		|			И (Организации.Ссылка = &Организация)
		|ГДЕ
		|	КалендарныеГрафики.Год = ГОД(&ПериодРегистрации)
		|	И КалендарныеГрафики.ДатаГрафика МЕЖДУ НАЧАЛОПЕРИОДА(&ПериодРегистрации, МЕСЯЦ) И КОНЕЦПЕРИОДА(&ПериодРегистрации, МЕСЯЦ)
		|	И КалендарныеГрафики.ДеньВключенВГрафик";
		
		ПараметрРасчетовНормаДней.Записать();
		
	КонецЕсли;
	
	// Норма часов
	Если НЕ УправлениеНебольшойФирмойСервер.ПараметрРасчетаСуществует("НормаЧасов") Тогда
		
		ПараметрРасчетовНормаЧасов = Справочники.ПараметрыРасчетов.СоздатьЭлемент();
		ПараметрРасчетовНормаЧасов.Наименование 	  = "Норма часов";
		ПараметрРасчетовНормаЧасов.Идентификатор 	  = "НормаЧасов";
		ПараметрРасчетовНормаЧасов.ПроизвольныйЗапрос = Истина;
		ПараметрРасчетовНормаЧасов.ЗадаватьЗначениеПриРасчетеЗП = Ложь;
		НовыйПараметрЗапроса 						 = ПараметрРасчетовНормаЧасов.ПараметрыЗапроса.Добавить();
		НовыйПараметрЗапроса.Имя 					 = "Организация";
		НовыйПараметрЗапроса.Представление 			 = "Организация";
		НовыйПараметрЗапроса 						 = ПараметрРасчетовНормаЧасов.ПараметрыЗапроса.Добавить();
		НовыйПараметрЗапроса.Имя 					 = "ПериодРегистрации";
		НовыйПараметрЗапроса.Представление 			 = "Период регистрации";
		ПараметрРасчетовНормаЧасов.Запрос 			 = 
		"ВЫБРАТЬ
		|	СУММА(8) КАК НормаЧасов
		|ИЗ
		|	РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
		|		ПО КалендарныеГрафики.Календарь = Организации.ПроизводственныйКалендарь
		|			И (Организации.Ссылка = &Организация)
		|ГДЕ
		|	КалендарныеГрафики.Год = ГОД(&ПериодРегистрации)
		|	И КалендарныеГрафики.ДатаГрафика МЕЖДУ НАЧАЛОПЕРИОДА(&ПериодРегистрации, МЕСЯЦ) И КОНЕЦПЕРИОДА(&ПериодРегистрации, МЕСЯЦ)
		|	И КалендарныеГрафики.ДеньВключенВГрафик";
		ПараметрРасчетовНормаЧасов.Записать();
		
	КонецЕсли;
	
	// Отработано дней
	Если НЕ УправлениеНебольшойФирмойСервер.ПараметрРасчетаСуществует("ОтработаноДней") Тогда
		
		ПараметрРасчетовОтработаноДней = Справочники.ПараметрыРасчетов.СоздатьЭлемент();
		ПараметрРасчетовОтработаноДней.Наименование 	  = "Отработано дней";
		ПараметрРасчетовОтработаноДней.Идентификатор	  = "ОтработаноДней";
		ПараметрРасчетовОтработаноДней.ПроизвольныйЗапрос = Ложь;
		ПараметрРасчетовОтработаноДней.ЗадаватьЗначениеПриРасчетеЗП = Истина;
		ПараметрРасчетовОтработаноДней.Записать();
		
	КонецЕсли;
	
	// Отработано часов
	Если НЕ УправлениеНебольшойФирмойСервер.ПараметрРасчетаСуществует("ОтработаноЧасов") Тогда
		
		ПараметрРасчетовОтработаноЧасов = Справочники.ПараметрыРасчетов.СоздатьЭлемент();
		ПараметрРасчетовОтработаноЧасов.Наименование 	   = "Отработано часов";
		ПараметрРасчетовОтработаноЧасов.Идентификатор 	   = "ОтработаноЧасов";
		ПараметрРасчетовОтработаноЧасов.ПроизвольныйЗапрос = Ложь;
		ПараметрРасчетовОтработаноЧасов.ЗадаватьЗначениеПриРасчетеЗП = Истина;
		ПараметрРасчетовОтработаноЧасов.Записать();
		
	КонецЕсли;
	
	// Тарифная ставка
	Если НЕ УправлениеНебольшойФирмойСервер.ПараметрРасчетаСуществует("ТарифнаяСтавка") Тогда
		
		ПараметрРасчетовТарифнаяСтавка = Справочники.ПараметрыРасчетов.СоздатьЭлемент();
		ПараметрРасчетовТарифнаяСтавка.Наименование 	  = "Тарифная ставка";
		ПараметрРасчетовТарифнаяСтавка.Идентификатор 	  = "ТарифнаяСтавка";
		ПараметрРасчетовТарифнаяСтавка.ПроизвольныйЗапрос = Ложь;
		ПараметрРасчетовТарифнаяСтавка.ЗадаватьЗначениеПриРасчетеЗП = Истина;
		ПараметрРасчетовТарифнаяСтавка.Записать();
		
	КонецЕсли;
	
	// Отработано по заданиям
	Если НЕ УправлениеНебольшойФирмойСервер.ПараметрРасчетаСуществует("ОтработаноЧасовПоЗаданиям") Тогда
		
		ПараметрРасчетовСдельнаяВыработка = Справочники.ПараметрыРасчетов.СоздатьЭлемент();
		ПараметрРасчетовСдельнаяВыработка.Наименование 	= "Отработано часов по заданиям";
		ПараметрРасчетовСдельнаяВыработка.Идентификатор = "ОтработаноЧасовПоЗаданиям";
		ПараметрРасчетовСдельнаяВыработка.ПроизвольныйЗапрос = Истина;
		ПараметрРасчетовСдельнаяВыработка.ЗадаватьЗначениеПриРасчетеЗП = Ложь;
		
		НовыйПараметрЗапроса = ПараметрРасчетовСдельнаяВыработка.ПараметрыЗапроса.Добавить();
		НовыйПараметрЗапроса.Имя = "НачалоПериода"; 
		НовыйПараметрЗапроса.Представление = "Начало периода"; 
		
		НовыйПараметрЗапроса = ПараметрРасчетовСдельнаяВыработка.ПараметрыЗапроса.Добавить();
		НовыйПараметрЗапроса.Имя = "КонецПериода";
		НовыйПараметрЗапроса.Представление = "Конец периода";
		
		НовыйПараметрЗапроса = ПараметрРасчетовСдельнаяВыработка.ПараметрыЗапроса.Добавить();
		НовыйПараметрЗапроса.Имя = "Сотрудник";
		НовыйПараметрЗапроса.Представление = "Сотрудник";
		
		НовыйПараметрЗапроса = ПараметрРасчетовСдельнаяВыработка.ПараметрыЗапроса.Добавить();
		НовыйПараметрЗапроса.Имя = "Организация"; 
		НовыйПараметрЗапроса.Представление = "Организация"; 
		
		НовыйПараметрЗапроса = ПараметрРасчетовСдельнаяВыработка.ПараметрыЗапроса.Добавить();
		НовыйПараметрЗапроса.Имя = "Подразделение";
		НовыйПараметрЗапроса.Представление = "Подразделение";
		
		ПараметрРасчетовСдельнаяВыработка.Запрос =
		"ВЫБРАТЬ
		|	Источник.ЗагрузкаФактОборот
		|ИЗ
		|	РегистрНакопления.ЗаданияНаРаботу.Обороты(&НачалоПериода, &КонецПериода, Авто, ) КАК Источник
		|ГДЕ
		|	Источник.Сотрудник = &Сотрудник
		|	И Источник.СтруктурнаяЕдиница = &Подразделение
		|	И Источник.Организация = &Организация";
		
		ПараметрРасчетовСдельнаяВыработка.Записать();
		
	КонецЕсли;
	
	// Виды начислений
	Если НЕ УправлениеНебольшойФирмойСервер.НачальноеЗаполнениеВидовНачисленийУдержанийПроизводилось() Тогда
		
		// Группы
		НовоеНачисление 			 = Справочники.ВидыНачисленийИУдержаний.СоздатьГруппу();
		НовоеНачисление.Наименование = "Начисления";
		НовоеНачисление.Записать(); 
		
		ГруппаНачисление 			 = НовоеНачисление.Ссылка;
		
		НовоеНачисление 			 = Справочники.ВидыНачисленийИУдержаний.СоздатьГруппу();
		НовоеНачисление.Наименование = "Удержания";
		НовоеНачисление.Записать();
		ГруппаУдержание 			 = НовоеНачисление.Ссылка;
		
		// Оклад по дням
		НовоеНачисление 					= Справочники.ВидыНачисленийИУдержаний.СоздатьЭлемент();
		НовоеНачисление.Родитель 			= ГруппаНачисление;
		НовоеНачисление.Наименование 		= "Оклад по дням";
		НовоеНачисление.Тип 				= Перечисления.ТипыНачисленийИУдержаний.Начисление;
		НовоеНачисление.СчетЗатрат			= ПланыСчетов.Управленческий.УправленческиеРасходы;
		НовоеНачисление.Формула				= "[ТарифнаяСтавка] * [ОтработаноДней] / [НормаДней]";
		НовоеНачисление.КодДоходаНДФЛ		= Справочники.КодыДоходовНДФЛ.Код2000;
		НовоеНачисление.ВидДоходаПоСтраховымВзносам = Справочники.ВидыДоходовПоСтраховымВзносам.ОблагаетсяЦеликом;
		НовоеНачисление.Записать();
		
		// Оклад по часам
		НовоеНачисление 					= Справочники.ВидыНачисленийИУдержаний.СоздатьЭлемент();
		НовоеНачисление.Родитель 			= ГруппаНачисление;
		НовоеНачисление.Наименование 		= "Оклад по часам";
		НовоеНачисление.Тип 				= Перечисления.ТипыНачисленийИУдержаний.Начисление;
		НовоеНачисление.СчетЗатрат			= ПланыСчетов.Управленческий.КосвенныеЗатраты;
		НовоеНачисление.Формула 			= "[ТарифнаяСтавка] * [ОтработаноЧасов] / [НормаЧасов]";
		НовоеНачисление.КодДоходаНДФЛ		= Справочники.КодыДоходовНДФЛ.Код2000;
		НовоеНачисление.ВидДоходаПоСтраховымВзносам = Справочники.ВидыДоходовПоСтраховымВзносам.ОблагаетсяЦеликом;
		НовоеНачисление.Записать();
		
		// Оплата по заданиям
		НовоеНачисление 					= Справочники.ВидыНачисленийИУдержаний.СоздатьЭлемент();
		НовоеНачисление.Родитель 			= ГруппаНачисление;
		НовоеНачисление.Наименование 		= "Оплата по заданиям";
		НовоеНачисление.Тип 				= Перечисления.ТипыНачисленийИУдержаний.Начисление;
		НовоеНачисление.СчетЗатрат			= ПланыСчетов.Управленческий.НезавершенноеПроизводство;
		НовоеНачисление.Формула 			= "[ТарифнаяСтавка] * [ОтработаноЧасовПоЗаданиям]";
		НовоеНачисление.КодДоходаНДФЛ		= Справочники.КодыДоходовНДФЛ.Код2000;
		НовоеНачисление.ВидДоходаПоСтраховымВзносам = Справочники.ВидыДоходовПоСтраховымВзносам.ОблагаетсяЦеликом;
		НовоеНачисление.Записать();
		
		// Процент от продаж по ответственному
		НовоеНачисление 					= Справочники.ВидыНачисленийИУдержаний.СоздатьЭлемент();
		НовоеНачисление.Родитель 			= ГруппаНачисление;
		НовоеНачисление.Наименование 		= "Процент от продаж по ответственному";
		НовоеНачисление.Тип 				= Перечисления.ТипыНачисленийИУдержаний.Начисление;
		НовоеНачисление.СчетЗатрат			= ПланыСчетов.Управленческий.НезавершенноеПроизводство;
		НовоеНачисление.Формула 			= "[СуммуПродажПоОтветственному]  / 100 *  [ТарифнаяСтавка]";
		НовоеНачисление.КодДоходаНДФЛ		= Справочники.КодыДоходовНДФЛ.Код2000;
		НовоеНачисление.ВидДоходаПоСтраховымВзносам = Справочники.ВидыДоходовПоСтраховымВзносам.ОблагаетсяЦеликом;
		НовоеНачисление.Записать();
		
		// Оплата по сдельным нарядам
		НовоеНачислениеСсылка				= Справочники.ВидыНачисленийИУдержаний.СдельнаяОплата;
		НовоеНачисление						= НовоеНачислениеСсылка.ПолучитьОбъект();
		НовоеНачисление.Родитель 			= ГруппаНачисление;
		НовоеНачисление.Наименование 		= "Сдельная оплата (тариф)";
		НовоеНачисление.Тип 				= Перечисления.ТипыНачисленийИУдержаний.Начисление;
		НовоеНачисление.СчетЗатрат			= ПланыСчетов.Управленческий.НезавершенноеПроизводство;
		НовоеНачисление.Формула 			= "";
		НовоеНачисление.КодДоходаНДФЛ		= Справочники.КодыДоходовНДФЛ.Код2010;
		НовоеНачисление.ВидДоходаПоСтраховымВзносам = Справочники.ВидыДоходовПоСтраховымВзносам.ДоговорыГПХ;
		НовоеНачисление.Записать();
		
		// Сдельная оплата процентом
		НовоеНачислениеСсылка				= Справочники.ВидыНачисленийИУдержаний.СдельнаяОплатаПроцент;
		НовоеНачисление						= НовоеНачислениеСсылка.ПолучитьОбъект();
		НовоеНачисление.Родитель 			= ГруппаНачисление;
		НовоеНачисление.Наименование 		= "Сдельная оплата (% от суммы)";
		НовоеНачисление.Тип 				= Перечисления.ТипыНачисленийИУдержаний.Начисление;
		НовоеНачисление.СчетЗатрат			= ПланыСчетов.Управленческий.НезавершенноеПроизводство;
		НовоеНачисление.Формула 			= "";
		НовоеНачисление.КодДоходаНДФЛ = Справочники.КодыДоходовНДФЛ.Код2010;
		НовоеНачисление.ВидДоходаПоСтраховымВзносам = Справочники.ВидыДоходовПоСтраховымВзносам.ДоговорыГПХ;
		НовоеНачисление.Записать();
		
		//Фиксированная сумма
		НовоеНачислениеСсылка				= Справочники.ВидыНачисленийИУдержаний.ФиксированнаяСумма;
		НовоеНачисление						= НовоеНачислениеСсылка.ПолучитьОбъект();
		НовоеНачисление.Код					= "";
		НовоеНачисление.Родитель 			= ГруппаНачисление;
		НовоеНачисление.Наименование 		= "Сдельная оплата (фиксированная сумма)";
		НовоеНачисление.Тип 				= Перечисления.ТипыНачисленийИУдержаний.Начисление;
		НовоеНачисление.СчетЗатрат			= ПланыСчетов.Управленческий.НезавершенноеПроизводство;
		НовоеНачисление.Формула 			= "[ФиксированнаяСумма]";
		НовоеНачисление.УстановитьНовыйКод();
		НовоеНачисление.КодДоходаНДФЛ = Справочники.КодыДоходовНДФЛ.Код2010;
		НовоеНачисление.ВидДоходаПоСтраховымВзносам = Справочники.ВидыДоходовПоСтраховымВзносам.ДоговорыГПХ;
		НовоеНачисление.Записать();
		
		// Отпускные
		НовоеНачисление 					= Справочники.ВидыНачисленийИУдержаний.СоздатьЭлемент();
		НовоеНачисление.Родитель 			= ГруппаНачисление;
		НовоеНачисление.Наименование 		= "Отпускные";
		НовоеНачисление.Тип 				= Перечисления.ТипыНачисленийИУдержаний.Начисление;
		НовоеНачисление.СчетЗатрат			= ПланыСчетов.Управленческий.УправленческиеРасходы;
		НовоеНачисление.Формула				= "";
		НовоеНачисление.КодДоходаНДФЛ = Справочники.КодыДоходовНДФЛ.Код2012;
		НовоеНачисление.ВидДоходаПоСтраховымВзносам = Справочники.ВидыДоходовПоСтраховымВзносам.ОблагаетсяЦеликом;
		НовоеНачисление.Записать();
		
		// Налог на доходы
		НовыйНалогСсылка				= Справочники.ВидыНачисленийИУдержаний.НалогНаДоходы;
		НовыйНалог						= НовыйНалогСсылка.ПолучитьОбъект();
		НовыйНалог.Родитель 			= ГруппаУдержание;
		НовыйНалог.Тип 				= Перечисления.ТипыНачисленийИУдержаний.Налог;
		НовыйНалог.СчетЗатрат			= ПланыСчетов.Управленческий.УправленческиеРасходы;
		НовыйНалог.Формула 			= "";
		НовыйНалог.ВидНалога = Справочники.ВидыНалогов.НДФЛСотрудники;
		НовыйНалог.Записать();
		
		// ПФР по суммарному тарифу
		НовыйНалогСсылка				= Справочники.ВидыНачисленийИУдержаний.ПФРПоСуммарномуТарифу;
		НовыйНалог						= НовыйНалогСсылка.ПолучитьОбъект();
		НовыйНалог.Родитель 			= ГруппаУдержание;
		НовыйНалог.Тип 				= Перечисления.ТипыНачисленийИУдержаний.Налог;
		НовыйНалог.СчетЗатрат	= ПланыСчетов.Управленческий.УправленческиеРасходы;
		НовыйНалог.Формула 			= "";
		НовыйНалог.ВидНалога = Справочники.ВидыНалогов.ПФРСтраховаяСотрудники;
		НовыйНалог.Записать();
		
		// ПФР накопительная
		НовыйНалогСсылка				= Справочники.ВидыНачисленийИУдержаний.ПФРНакопительная;
		НовыйНалог						= НовыйНалогСсылка.ПолучитьОбъект();
		НовыйНалог.Родитель 			= ГруппаУдержание;
		НовыйНалог.Тип 				= Перечисления.ТипыНачисленийИУдержаний.Налог;
		НовыйНалог.СчетЗатрат	= ПланыСчетов.Управленческий.УправленческиеРасходы;
		НовыйНалог.Формула 			= "";
		НовыйНалог.ВидНалога = Справочники.ВидыНалогов.ПФРНакопительнаяСотрудники;
		НовыйНалог.Записать();
		
		// ПФР страховая
		НовыйНалогСсылка				= Справочники.ВидыНачисленийИУдержаний.ПФРСтраховая;
		НовыйНалог						= НовыйНалогСсылка.ПолучитьОбъект();
		НовыйНалог.Родитель				= ГруппаУдержание;
		НовыйНалог.Тип					= Перечисления.ТипыНачисленийИУдержаний.Налог;
		НовыйНалог.СчетЗатрат	= ПланыСчетов.Управленческий.УправленческиеРасходы;
		НовыйНалог.Формула				= "";
		НовыйНалог.ВидНалога = Справочники.ВидыНалогов.ПФРСтраховаяСотрудники;
		НовыйНалог.Записать();
		
		// ФСС
		НовыйНалогСсылка				= Справочники.ВидыНачисленийИУдержаний.ФСС;
		НовыйНалог						= НовыйНалогСсылка.ПолучитьОбъект();
		НовыйНалог.Родитель				= ГруппаУдержание;
		НовыйНалог.Тип					= Перечисления.ТипыНачисленийИУдержаний.Налог;
		НовыйНалог.СчетЗатрат	= ПланыСчетов.Управленческий.УправленческиеРасходы;
		НовыйНалог.Формула				= "";
		НовыйНалог.ВидНалога = Справочники.ВидыНалогов.ФСССотрудники;
		НовыйНалог.Записать();
		
		// ФСС несчастные случаи
		НовыйНалогСсылка				= Справочники.ВидыНачисленийИУдержаний.ФССНесчастныеСлучаи;
		НовыйНалог						= НовыйНалогСсылка.ПолучитьОбъект();
		НовыйНалог.Родитель				= ГруппаУдержание;
		НовыйНалог.Тип					= Перечисления.ТипыНачисленийИУдержаний.Налог;
		НовыйНалог.СчетЗатрат	= ПланыСчетов.Управленческий.УправленческиеРасходы;
		НовыйНалог.Формула				= "";
		НовыйНалог.ВидНалога = Справочники.ВидыНалогов.ФССТравматизмСотрудники;
		НовыйНалог.Записать();
		
		// ФФОМС
		НовыйНалогСсылка				= Справочники.ВидыНачисленийИУдержаний.ФФОМС;
		НовыйНалог						= НовыйНалогСсылка.ПолучитьОбъект();
		НовыйНалог.Родитель				= ГруппаУдержание;
		НовыйНалог.Тип					= Перечисления.ТипыНачисленийИУдержаний.Налог;
		НовыйНалог.СчетЗатрат	= ПланыСчетов.Управленческий.УправленческиеРасходы;
		НовыйНалог.Формула				= "";
		НовыйНалог.ВидНалога = Справочники.ВидыНалогов.ФОМССотрудники;
		НовыйНалог.Записать();
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПараметрыРасчетовИВидыНачислений()

//(24) Процедура заполняет в настройки подбора при первом запуске
//
Процедура ЗаполнитьПользовательскиеНастройкиПодбора()
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	УправлениеНебольшойФирмойСервер.УстановитьСтандартныеНастройкиПодбора(ТекущийПользователь);
	
КонецПроцедуры // ЗаполнитьПользовательскиеНастройкиПодбора()

//(27) Процедура удаляет регистрацию изменений базовых классификаторов, которые должны выгружаться
// только при наличии на них ссылок в других выгружаемых объектах.
//
Процедура УдалитьРегистрациюИзмененийБазовыхКлассификаторов()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОбменУправлениеНебольшойФирмойБухгалтерия20.Ссылка КАК УзелОбмена
	|ИЗ
	|	ПланОбмена.ОбменУправлениеНебольшойФирмойБухгалтерия20 КАК ОбменУправлениеНебольшойФирмойБухгалтерия20
	|ГДЕ
	|	ОбменУправлениеНебольшойФирмойБухгалтерия20.Ссылка <> &ЭтотУзелБП20
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОбменУправлениеНебольшойФирмойБухгалтерия30.Ссылка КАК УзелОбмена
	|ИЗ
	|	ПланОбмена.ОбменУправлениеНебольшойФирмойБухгалтерия30 КАК ОбменУправлениеНебольшойФирмойБухгалтерия30
	|ГДЕ
	|	ОбменУправлениеНебольшойФирмойБухгалтерия30.Ссылка <> &ЭтотУзелБП30";
	
	Запрос.УстановитьПараметр("ЭтотУзелБП20", ПланыОбмена.ОбменУправлениеНебольшойФирмойБухгалтерия20.ЭтотУзел());
	Запрос.УстановитьПараметр("ЭтотУзелБП30", ПланыОбмена.ОбменУправлениеНебольшойФирмойБухгалтерия30.ЭтотУзел());
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	УзлыОбменаСБП20 = МассивРезультатов[0].Выгрузить().ВыгрузитьКолонку("УзелОбмена");
	УзлыОбменаСБП30 = МассивРезультатов[1].Выгрузить().ВыгрузитьКолонку("УзелОбмена");
	
	Попытка
		ПланыОбмена.УдалитьРегистрациюИзменений(УзлыОбменаСБП20, Метаданные.Справочники.Банки);
		ПланыОбмена.УдалитьРегистрациюИзменений(УзлыОбменаСБП20, Метаданные.Справочники.Валюты);
		ПланыОбмена.УдалитьРегистрациюИзменений(УзлыОбменаСБП20, Метаданные.Справочники.КлассификаторЕдиницИзмерения);
		ПланыОбмена.УдалитьРегистрациюИзменений(УзлыОбменаСБП20, Метаданные.Справочники.СтраныМира);
	Исключение
	КонецПопытки;
	
	Попытка
		ПланыОбмена.УдалитьРегистрациюИзменений(УзлыОбменаСБП30, Метаданные.Справочники.Банки);
		ПланыОбмена.УдалитьРегистрациюИзменений(УзлыОбменаСБП30, Метаданные.Справочники.Валюты);
		ПланыОбмена.УдалитьРегистрациюИзменений(УзлыОбменаСБП30, Метаданные.Справочники.КлассификаторЕдиницИзмерения);
		ПланыОбмена.УдалитьРегистрациюИзменений(УзлыОбменаСБП30, Метаданные.Справочники.СтраныМира);
	Исключение
	КонецПопытки;
	
КонецПроцедуры // УдалитьРегистрациюИзмененийБазовыхКлассификаторов()

//(29) Процедура заполняет бланки договоров из макета.
//
Процедура ЗаполнитьБланкиДоговоров()
	
	НачатьТранзакцию();
	Попытка
		МакетДоговорАренды 			= Справочники.БланкиДоговоров.ПолучитьМакет("МакетДоговорАренды");
		МакетДоговорКуплиПродажи 	= Справочники.БланкиДоговоров.ПолучитьМакет("МакетДоговорКуплиПродажи");
		МакетДоговорОказанияУслуг 	= Справочники.БланкиДоговоров.ПолучитьМакет("МакетДоговорОказанияУслуг");
		МакетДоговорПоставки 		= Справочники.БланкиДоговоров.ПолучитьМакет("МакетДоговорПоставки");
		
		Макеты = Новый Массив(4);
		Макеты[0] = МакетДоговорАренды;
		Макеты[1] = МакетДоговорКуплиПродажи;
		Макеты[2] = МакетДоговорОказанияУслуг;
		Макеты[3] = МакетДоговорПоставки;
		
		НаименованияМакетов = Новый Массив(4);
		НаименованияМакетов[0] = "МакетДоговорАренды";
		НаименованияМакетов[1] = "МакетДоговорКуплиПродажи";
		НаименованияМакетов[2] = "МакетДоговорОказанияУслуг";
		НаименованияМакетов[3] = "МакетДоговорПоставки";
		
		Бланки = Новый Массив(4);
		Бланки[0] = Справочники.БланкиДоговоров.ДоговорАренды.Ссылка.ПолучитьОбъект();
		Бланки[1] = Справочники.БланкиДоговоров.ДоговорКуплиПродажи.Ссылка.ПолучитьОбъект();
		Бланки[2] = Справочники.БланкиДоговоров.ДоговорОказанияУслуг.Ссылка.ПолучитьОбъект();
		Бланки[3] = Справочники.БланкиДоговоров.ДоговорПоставки.Ссылка.ПолучитьОбъект();
		
		Итератор = 0;
		Пока Итератор < Макеты.Количество() Цикл 
			
			МакетДоговора = Справочники.БланкиДоговоров.ПолучитьМакет(НаименованияМакетов[Итератор]);
			
			ТекстХТМЛ = МакетДоговора.ПолучитьТекст();
			Вложения = Новый Структура;
			
			КоличествоРедактируемыхПараметров = СтрЧислоВхождений(ТекстХТМЛ, "{ЗаполняемоеПоле");
			
			Бланки[Итератор].РедактируемыеПараметры.Очистить();
			НомерПараметра = 1;
			Пока НомерПараметра <= КоличествоРедактируемыхПараметров Цикл 
				НоваяСтрока = Бланки[Итератор].РедактируемыеПараметры.Добавить();
				НоваяСтрока.Представление = "{ЗаполняемоеПоле" + НомерПараметра + "}";
				НоваяСтрока.Идентификатор = "parameter" + НомерПараметра;
				
				НомерПараметра = НомерПараметра + 1;
			КонецЦикла;
			
			Падежи = Новый Массив;
			Падежи.Добавить(Неопределено);
			Падежи.Добавить("именительный");
			Падежи.Добавить("родительный");
			Падежи.Добавить("дательный");
			Падежи.Добавить("винительный");
			Падежи.Добавить("творительный");
			Падежи.Добавить("предложный");
			
			Для каждого ПараметрПеречисление Из Перечисления.ПараметрыБланковДоговоровСКонтрагентами Цикл
				
				Для каждого Падеж Из Падежи Цикл
					Если Падеж = Неопределено Тогда
						ПредставлениеПадежа = "";
					Иначе
						ПредставлениеПадежа = " (" + Падеж + ")";
					КонецЕсли;
					
					Параметр = "{" + Строка(ПараметрПеречисление) + ПредставлениеПадежа + "}";
					ЧислоВхождений = СтрЧислоВхождений(ТекстХТМЛ, Параметр);
					Для НомерПараметра = 1 По ЧислоВхождений Цикл
						Если НомерПараметра = 1 Тогда
							Представление = "{" + Строка(ПараметрПеречисление) + ПредставлениеПадежа + "%deleteSymbols%" + "}";
							Идентификатор = "infoParameter" + Строка(ПараметрПеречисление) + НомерПараметра;
						Иначе
							Представление = "{" + Строка(ПараметрПеречисление) + НомерПараметра + ПредставлениеПадежа + "}";
							Идентификатор = "infoParameter" + Строка(ПараметрПеречисление) + НомерПараметра;
						КонецЕсли;
						
						ПервоеВхождение = Найти(ТекстХТМЛ, Параметр);
						
						ТекстХТМЛ = Лев(ТекстХТМЛ, ПервоеВхождение - 1) + Представление + Сред(ТекстХТМЛ, ПервоеВхождение + СтрДлина(Параметр));
						
						НоваяСтрока = Бланки[Итератор].ПараметрыИнфобазы.Добавить();
						НоваяСтрока.Представление = СтрЗаменить(Представление, "%deleteSymbols%", "");
						НоваяСтрока.Идентификатор = Идентификатор;
						НоваяСтрока.Параметр = ПараметрПеречисление;
						
					КонецЦикла;
					ТекстХТМЛ = СтрЗаменить(ТекстХТМЛ, "%deleteSymbols%", "");
				КонецЦикла;
			КонецЦикла;
			
			СтруктураФорматированногоДокумента = Новый Структура;
			СтруктураФорматированногоДокумента.Вставить("ТекстHTML", ТекстХТМЛ);
			СтруктураФорматированногоДокумента.Вставить("Вложения", Вложения);
			
			Бланки[Итератор].Бланк = Новый ХранилищеЗначения(СтруктураФорматированногоДокумента);
			Бланки[Итератор].МакетПредопределенногоБланка = НаименованияМакетов[Итератор];
			Бланки[Итератор].КоличествоРедактируемыхПараметров = КоличествоРедактируемыхПараметров;
			Бланки[Итератор].Записать();
			
			Итератор = Итератор + 1;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ТекстСообщения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации("ru='Заполнение бланков договоров.'", УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
		
	КонецПопытки;
	
КонецПроцедуры

//(35) Заполняем регистр сведений ЗначенияКБК
Процедура ЗагрузитьЗначенияКБК()
	
	Набор = РегистрыСведений.ЗначенияКБК.СоздатьНаборЗаписей();
	
	Запись = Набор.Добавить();
	Запись.Период = '20000101';
	Запись.ВидВзаиморасчета = Справочники.ВидыНалогов.ПФРНакопительная;
	Запись.Значение = "39210202100061000160";
	
	Запись = Набор.Добавить();
	Запись.Период = '20110101';
	Запись.ВидВзаиморасчета = Справочники.ВидыНалогов.ПФРНакопительная;
	Запись.Значение = "39210202110061000160";
	
	Запись = Набор.Добавить();
	Запись.Период = '20000101';
	Запись.ВидВзаиморасчета = Справочники.ВидыНалогов.ПФРСтраховая;
	Запись.Значение = "39210202100061000160";
	
	Запись = Набор.Добавить();
	Запись.Период = '20110101';
	Запись.ВидВзаиморасчета = Справочники.ВидыНалогов.ПФРСтраховая;
	Запись.Значение = "39210202100061000160";
	
	Запись = Набор.Добавить();
	Запись.Период = '20000101';
	Запись.ВидВзаиморасчета = Справочники.ВидыНалогов.ТФОМС;
	Запись.Значение = "39210202110091000160";
	
	Запись = Набор.Добавить();
	Запись.Период = '20110101';
	Запись.ВидВзаиморасчета = Справочники.ВидыНалогов.ТФОМС;
	Запись.Значение = "39210202101081012160";
	
	Запись = Набор.Добавить();
	Запись.Период = '20000101';
	Запись.ВидВзаиморасчета = Справочники.ВидыНалогов.ФФОМС;
	Запись.Значение = "39210202100081000160";
	
	Запись = Набор.Добавить();
	Запись.Период = '20110101';
	Запись.ВидВзаиморасчета = Справочники.ВидыНалогов.ФФОМС;
	Запись.Значение = "39210202101081011160";
	
	Запись = Набор.Добавить();
	Запись.Период = '20110101';
	Запись.ВидВзаиморасчета = Справочники.ВидыНалогов.ЕНВД;
	Запись.Значение = "18210502010021000110";
	
	// 2012 год
	
	// начисление зп
	Запись = Набор.Добавить();
	Запись.Период = '20120101';
	Запись.ВидВзаиморасчета = Справочники.ВидыНалогов.ПФРНакопительнаяСотрудники;
	Запись.Значение = "39210202020061000160";
	
	Запись = Набор.Добавить();
	Запись.Период = '20120101';
	Запись.ВидВзаиморасчета = Справочники.ВидыНалогов.ПФРСтраховаяСотрудники;
	Запись.Значение = "39210202010061000160";
	
	Запись = Набор.Добавить();
	Запись.Период = '20120101';
	Запись.ВидВзаиморасчета = Справочники.ВидыНалогов.ФСССотрудники;
	Запись.Значение = "39310202090071000160";
	
	Запись = Набор.Добавить();
	Запись.Период = '20120101';
	Запись.ВидВзаиморасчета = Справочники.ВидыНалогов.ФССТравматизмСотрудники;
	Запись.Значение = "39310202050071000160";
	
	Запись = Набор.Добавить();
	Запись.Период = '20120101';
	Запись.ВидВзаиморасчета = Справочники.ВидыНалогов.НДФЛСотрудники;
	Запись.Значение = "18210102010011000110";
	
	Запись = Набор.Добавить();
	Запись.Период = '20120101';
	Запись.ВидВзаиморасчета = Справочники.ВидыНалогов.ФОМССотрудники;
	Запись.Значение = "39210202101081011160";
	
	// 2013 год
	
	Запись = Набор.Добавить();
	Запись.Период = '20130101';
	Запись.ВидВзаиморасчета = Справочники.ВидыНалогов.ПФРНакопительная;
	Запись.Значение = "39210202150061000160";
	
	Запись = Набор.Добавить();
	Запись.Период = '20130101';
	Запись.ВидВзаиморасчета = Справочники.ВидыНалогов.ПФРСтраховая;
	Запись.Значение = "39210202140061000160";
	
	Запись = Набор.Добавить();
	Запись.Период = '20130101';
	Запись.ВидВзаиморасчета = Справочники.ВидыНалогов.ПФРСвыше300тр;
	Запись.Значение = "39210202140061000160";
	
	
	
	// 2015 год
	
	Запись = Набор.Добавить();
	Запись.Период = '20150101';
	Запись.ВидВзаиморасчета = Справочники.ВидыНалогов.ТорговыйСбор;
	Запись.Значение = "18210505010020000110";
	
	// 2017 год
	Запись = Набор.Добавить();
	Запись.Период = '20160101';
	Запись.ВидВзаиморасчета = Справочники.ВидыНалогов.ПФРСтраховая;
	Запись.Значение = "18210202140061100160";
	// Было 39210202140061100160
	
	Запись = Набор.Добавить();
	Запись.Период = '20160101';
	Запись.ВидВзаиморасчета = Справочники.ВидыНалогов.ПФРСвыше300тр;
	Запись.Значение = "18210202140061200160";
	// Было 39210202140061200160
	
	Запись = Набор.Добавить();
	Запись.Период = '20170101';
	Запись.ВидВзаиморасчета = Справочники.ВидыНалогов.ПФРСтраховая;
	Запись.Значение = "18210202140061110160";
	
	Запись = Набор.Добавить();
	Запись.Период = '20150101';
	Запись.ВидВзаиморасчета = Справочники.ВидыНалогов.ПФРСтраховаяСотрудники;
	Запись.Значение = "18210202010061000160";
	// Было 39210202010061000160
	
	Запись = Набор.Добавить();
	Запись.Период = '20170101';
	Запись.ВидВзаиморасчета = Справочники.ВидыНалогов.ПФРСтраховаяСотрудники;
	Запись.Значение = "18210202010061010160";
	
	Запись = Набор.Добавить();
	Запись.Период = '20150101';
	Запись.ВидВзаиморасчета = Справочники.ВидыНалогов.ФСССотрудники;
	Запись.Значение = "18210202090071000160";
	// Было 39310202090071000160
	
	Запись = Набор.Добавить();
	Запись.Период = '20170101';
	Запись.ВидВзаиморасчета = Справочники.ВидыНалогов.ФСССотрудники;
	Запись.Значение = "18210202090071010160";
	// Было 39310202090071000160
	
	Запись = Набор.Добавить();
	Запись.Период = '20150101';
	Запись.ВидВзаиморасчета = Справочники.ВидыНалогов.ФОМССотрудники;
	Запись.Значение = "18210202101081011160";
	// Было 39210202101081011160
	
	Запись = Набор.Добавить();
	Запись.Период = '20170101';
	Запись.ВидВзаиморасчета = Справочники.ВидыНалогов.ФОМССотрудники;
	Запись.Значение = "18210202101081013160";
	// Было 39210202101081011160
	
	Запись = Набор.Добавить();
	Запись.Период = '20150101';
	Запись.ВидВзаиморасчета = Справочники.ВидыНалогов.ФФОМС;
	Запись.Значение = "18210202103081011160";
	// Было 39210202103081011160
	
	Запись = Набор.Добавить();
	Запись.Период = '20170101';
	Запись.ВидВзаиморасчета = Справочники.ВидыНалогов.ФФОМС;
	Запись.Значение = "18210202103081013160";
	
	Запись = Набор.Добавить();
	Запись.Период = '20170101';
	Запись.ВидВзаиморасчета = Справочники.ВидыНалогов.ТорговыйСбор;
	Запись.Значение = "18210505010021000110";
	
	Набор.Записать();
	
КонецПроцедуры

//(39) Заполняет справочник КодыДоходовНДФЛ
//
Процедура ЗаполнитьКодыНДФЛ()
	
	Код2000 = Справочники.КодыДоходовНДФЛ.Код2000.ПолучитьОбъект();
	Код2000.СтавкаНДФЛ = 13;
	Код2000.Записать();
	
	Код2010 = Справочники.КодыДоходовНДФЛ.Код2010.ПолучитьОбъект();
	Код2010.СтавкаНДФЛ = 13;
	Код2010.Записать();
	
	Код2012 = Справочники.КодыДоходовНДФЛ.Код2012.ПолучитьОбъект();
	Код2012.СтавкаНДФЛ = 13;
	Код2012.Записать();
	
КонецПроцедуры

//(40) Процедура заполняет справочник ДокументыФизическихЛиц по классификатору МВД.
// Для тех конфигураций, в которых в справочнике "Виды документов физических лиц" нет реквизитов.
//
Процедура ЗаполнитьДокументыФизическихЛицПоКлассификаторуМВД(СтруктураПараметров = Неопределено) Экспорт
	
	ОписатьДокумент(Справочники.ВидыДокументовФизическихЛиц.ПаспортСССР,			"", 	"01", "ПАСПОРТ");						// R-ББ 999999
	ОписатьДокумент(Справочники.ВидыДокументовФизическихЛиц.ЗагранпаспортСССР,		"", 	"02", "ЗГПАСПОРТ");						// 99 0999999
	ОписатьДокумент(Справочники.ВидыДокументовФизическихЛиц.СвидетельствоОРождении,	"", 	"03", "СВИД О РОЖД");					// R-ББ 999999
	ОписатьДокумент(Справочники.ВидыДокументовФизическихЛиц.УдостоверениеОфицера,	"", 	"04", "УДОСТ ОФИЦЕРА");					// ББ 9999990
	ОписатьДокумент(,"Справка об освобождении из места лишения свободы",					"05", "СПРАВКА ОБ ОСВ");				// -
	ОписатьДокумент(Справочники.ВидыДокументовФизическихЛиц.ПаспортМинморфлота, 	"",		"06", "ПАСПОРТ МОРФЛТ");				// ББ 999999
	ОписатьДокумент(Справочники.ВидыДокументовФизическихЛиц.ВоенныйБилет, "Военный билет солдата (матроса, сержанта, старшины)", "07", "ВОЕННЫЙ БИЛЕТ"); // ББ 0999999
	ОписатьДокумент(, "Временное удостоверение, выданное взамен военного билета",			"08", "ПРОЧЕЕ");						// -
	ОписатьДокумент(Справочники.ВидыДокументовФизическихЛиц.ДипломатическийПаспорт, "",		"09", "ДИППАСПОРТ РФ"); 				// 99 9999999
	ОписатьДокумент(, "Паспорт иностранного гражданина",									"10", "ИНПАСПОРТ");						// -
	ОписатьДокумент(, "Свидетельство о рассмотрении ходатайства о признании беженцем на территории Российской Федерации по существу", "11", "СВИД БЕЖЕНЦА"); // -
	ОписатьДокумент(, "Вид на жительство в Российской Федерации",							"12", "ВИД НА ЖИТЕЛЬ");					// -
	ОписатьДокумент(, "Удостоверение беженца",												"13", "УДОСТ БЕЖЕНЦА");					// -
	ОписатьДокумент(, "Временное удостоверение личности гражданина Российской Федерации",	"14", "ВРЕМ УДОСТ");					// -
	ОписатьДокумент(, "Разрешение на временное проживание в Российской Федерации",			"15", "ПРОЧЕЕ");						// -
	ОписатьДокумент(, "Свидетельство о предоставлении временного убежища на территории Российской Федерации", "18", "ПРОЧЕЕ");		// ББ-999 9999999
	ОписатьДокумент(Справочники.ВидыДокументовФизическихЛиц.ПаспортРФ,				"",		"21", "ПАСПОРТ РОССИИ");				// 99 99 9999990
	ОписатьДокумент(Справочники.ВидыДокументовФизическихЛиц.ЗагранпаспортРФ,		"",		"22", "ЗГПАСПОРТ РФ");					// 99 9999999
	ОписатьДокумент(, "Свидетельство о рождении, выданное уполномоченным органом иностранного государства", "23", "ПРОЧЕЕ");		// -
	ОписатьДокумент(, "Удостоверение личности военнослужащего Российской Федерации",		"24", "ПРОЧЕЕ");						// ББ 9999999
	ОписатьДокумент(Справочники.ВидыДокументовФизическихЛиц.ПаспортМоряка,			"",		"26", "ПАСПОРТ МОРЯКА");				// ББ 0999999
	ОписатьДокумент(Справочники.ВидыДокументовФизическихЛиц.ВоенныйБилетОфицераЗапаса, "",	"27", "БИЛЕТ ОЗ");						// ББ 0999999
	ОписатьДокумент(, "Иные документы, выдаваемые ОВД",										"91", "ПРОЧЕЕ");						// -
	
	Если СтруктураПараметров <> Неопределено Тогда
		СтруктураПараметров.ОбработкаЗавершена = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОписатьДокумент(СсылкаНаЭлемент = Неопределено, Наименование = "", КодМВД = "", КодПФР = "")

	Если Не ЗначениеЗаполнено(СсылкаНаЭлемент) Тогда
		Если Наименование = "" Тогда
			Возврат
		КонецЕсли;
		СсылкаНаЭлемент = Справочники.ВидыДокументовФизическихЛиц.НайтиПоНаименованию(Наименование);
	КонецЕсли;

	Если ЗначениеЗаполнено(СсылкаНаЭлемент) Тогда
		ДанныеИБ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаЭлемент, "КодМВД, КодПФР");
		Если ДанныеИБ.КодМВД = КодМВД И ДанныеИБ.КодПФР = КодПФР Тогда
			Возврат
		КонецЕсли;
		Элемент = СсылкаНаЭлемент.ПолучитьОбъект();
	Иначе
		Элемент = Справочники.ВидыДокументовФизическихЛиц.СоздатьЭлемент();
	КонецЕсли;

	Если ЗначениеЗаполнено(Наименование) Тогда
		Элемент.Наименование = Наименование;
	КонецЕсли;
	Элемент.КодМВД = КодМВД;
	Элемент.КодПФР = КодПФР;
	
	Элемент.ОбменДанными.Загрузка = Истина;
	Элемент.Записать();

КонецПроцедуры

//(43) Создание шаблонов условий печати в счетах на оплату
Процедура ЗаполнитьДополнительныеУсловияДляПечати() Экспорт
	
	Справочники.ДополнительныеУсловия.ЗаполнениеТиповыхДополнительныхУсловий();
	
КонецПроцедуры

//(45) Идентификаторы формул и типы видов цен
Процедура ОбновитьПредопределенныеВидыЦен() Экспорт
	
	// Наличие видов цен контрагентов в новой ИБ не предполагается, но такую возможность поддержим...
	
	Запрос = Новый Запрос(
	"Выбрать Справочник.ВидыЦен.Ссылка КАК ВидЦен, Истина КАК ЭтоЦеныНоменклатуры 
	|	Где Справочник.ВидыЦен.ИдентификаторФормул = """" ИЛИ Справочник.ВидыЦен.ТипВидаЦен = Значение(Перечисление.ТипыВидовЦен.ПустаяСсылка)
	|
	|Объединить Все
	|
	|Выбрать Справочник.ВидыЦенКонтрагентов.Ссылка, Ложь Где Справочник.ВидыЦенКонтрагентов.ИдентификаторФормул = """"");
	
	РезультатЗапроса = Запрос.Выполнить();
	Попытка
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ВидЦенОбъект = Выборка.ВидЦен.ПолучитьОбъект();
			
			ОписаниеВладельца = "";
			Если Выборка.ЭтоЦеныНоменклатуры Тогда
				
				ВидЦенОбъект.ТипВидаЦен = Перечисления.ТипыВидовЦен.Статический;
				
			Иначе
				
				ОписаниеВладельца = Строка(Выборка.ВидЦен.Владелец);
				
			конецЕсли;
			
			ЦенообразованиеФормулыСервер.СформироватьНовыйИдентификаторВидаЦен(ВидЦенОбъект.ИдентификаторФормул, Выборка.ВидЦен.Наименование, ОписаниеВладельца);
			
			ВидЦенОбъект.Записать();
			
		КонецЦикла;
		
	Исключение
		
		ЗаписьЖурналаРегистрации("Идентификаторы.ВидыЦен", УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
КонецПроцедуры

//(47) Устанавливает константу ФункциональнаяОпцияОпросНалоги
Процедура УстановитьКонстантуУчастияВОпросеПоНалогам()
	
	Константы.ФункциональнаяОпцияОпросНалоги.Установить(Истина);
	
КонецПроцедуры

//(49) Заполняет справочник ключевых операций, устанавливает целевое время
Процедура ЗаполнитьРеквизитыКлючевыхОпераций() Экспорт
	
	Попытка
		ОценкаПроизводительностиПереопределяемый.ЗаполнитьЦелевоеВремяОперацийПроизводительности();
	Исключение
		ТекстСообщения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации("ru='Заполнение ключевых операций.'", УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
	КонецПопытки;
	
КонецПроцедуры

//(50) МобильноеПриложение
Процедура УстановитьКонстантуЭтоОбычноеПриложение() Экспорт
	
	Если НЕ Константы.ЭтоМобильноеПриложение.Получить() Тогда
		Константы.ЭтоОбычноеПриложение.Установить(Истина);
	КонецЕсли;
	
КонецПроцедуры

//(51) Процедура заполняет справочники "Параметры расчетов доставки".
Процедура ЗаполнитьПараметрыРасчетовДоставки()
	
	// Параметры расчетов.
	
	// Цена
	Если НЕ ДоставкаСервер.ПараметрРасчетаСуществует("Цена") Тогда
		
		ПараметрРасчетов = Справочники.ПараметрыРасчетовДоставки.СоздатьЭлемент();
		
		ПараметрРасчетов.Наименование 	 = "Цена";
		ПараметрРасчетов.Идентификатор 	 = "Цена"; 
		ПараметрРасчетов.ПроизвольныйЗапрос = Истина;
		ПараметрРасчетов.ЗадаватьЗначениеПриРасчете = Ложь;
		
		НовыйПараметрЗапроса 						 = ПараметрРасчетов.ПараметрыЗапроса.Добавить();
		НовыйПараметрЗапроса.Имя 					 = "Заказ.ВидЦен";
		НовыйПараметрЗапроса.Представление 			 = "Вид цен";
		
		НовыйПараметрЗапроса 						 = ПараметрРасчетов.ПараметрыЗапроса.Добавить();
		НовыйПараметрЗапроса.Имя 					 = "Заказ.Дата";
		НовыйПараметрЗапроса.Представление 			 = "Дата заказа";
		
		НовыйПараметрЗапроса 						 = ПараметрРасчетов.ПараметрыЗапроса.Добавить();
		НовыйПараметрЗапроса.Имя 					 = "Заказ.НоменклатураДоставки";
		НовыйПараметрЗапроса.Представление 			 = "Услуга";
		
		ПараметрРасчетов.Запрос = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЦеныНоменклатурыСрезПоследних.Цена
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		|			&ЗаказДата,
		|			ВидЦен = &ЗаказВидЦен
		|				И Номенклатура = &ЗаказНоменклатураДоставки) КАК ЦеныНоменклатурыСрезПоследних";
		
		ПараметрРасчетов.Записать();
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПараметрыРасчетовДоставки()

//(52) Процедура заполняет реквизиты собственной службы доставки.
//
Процедура ЗаполнитьРеквизитыСобственнойСлужбыДоставки() Экспорт
	
	СсылкаНаОбъект = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.СлужбыДоставки.ДоставкаСобственнымиСилами");
	Если СсылкаНаОбъект = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект = СсылкаНаОбъект.ПолучитьОбъект();
	Объект.ВариантУчета = Перечисления.ВариантыУчетаДоставки.ДоставкаСОплатой;
	Объект.ПараметрыРасчетов.Очистить();
	Объект.ЗначенияФормулы.Очистить();
	Объект.ДоступныеСпособыДоставки.Очистить();
	Объект.ДоступныеСпособыДоставки.Добавить().СпособДоставки = Перечисления.СпособыДоставки.Курьер;
	Объект.ДоступныеСпособыДоставки.Добавить().СпособДоставки = Перечисления.СпособыДоставки.Почта;
	Объект.ДоступныеСпособыОтгрузки.Очистить();
	Объект.ФормулаСтоимости = "0";
	Объект.ФормулаСебестоимости = "0";
	Объект.Записать();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиПервогоЗапуска

// Процедура заполняет пустую ИБ общими данными
//
// К данным относятся неразделенные сведения, например, глобальные настройки сервиса
//
Процедура ПервыйЗапуск_ОбщиеДанные() Экспорт
	
	НачатьТранзакцию();
	
	// 1. Заполним константу ИзвлекатьТекстыФайловНаСервере
	Константы.ИзвлекатьТекстыФайловНаСервере.Установить(Истина);
	Константы.ИспользоватьПроверкуКонтрагентов.Установить(Истина);
	
	// 2. Заполним календарь отчетности
	Справочники.КалендарьПодготовкиОтчетности.ЗагрузитьКалендарьПодготовкиОтчетности();
	
	// 3. Загружаем  тарифы страховых взносов с предельными величинами
	Справочники.ВидыТарифовСтраховыхВзносов.ЗаполнитьСправочникВидыТарифовСтраховыхВзносов();
	Справочники.ВидыТарифовСтраховыхВзносов.ЗаполнитьКодыВидовТарифаСтраховыхВзносов_2012();
	РегистрыСведений.ТарифыСтраховыхВзносов.УстановитьЗначенияТарифовСтраховыхВзносов2011_2012();
	РегистрыСведений.ПредельнаяВеличинаБазыСтраховыхВзносов.УстановитьПредельнуюВеличинуБазыСтраховыхВзносов();
	
	// 4. Заполняем виды предпринимательской деятельности
	Справочники.ВидыПредпринимательскойДеятельности.ЗаполнитьВидыПредпринимательскойДеятельности();
	
	// 5. Заполняем справочник ОКУН
	ЗагрузитьОКУН();
	
	// 6. Заполняем регистр сведений КоэффициентДефлятор
	ЗаполнитьКоэффициентДефлятор();
	
	// 7. Заполняем регистр сведений МРОТ
	ЗагрузитьМРОТ();
	
	// 8. Заполняем справочник Вычеты НДФЛ
	Справочники.ВычетыНДФЛ.НачальноеЗаполнение();
	
	// 9. Заполним регистр сведений НДФЛРазмерВычетов.
	Сотрудники.ЗаполнитьРазмерыВычетовНДФЛ();
	
	// 10. Изменить расписание регламетного задания в сервисе (оптимизация нагрузки)
	ЦенообразованиеСервер.ИзменитьРасписаниеОчередиЦен();
	
	// 11. Заполнение классификатора категорий номенклатуры
	КатегорииНоменклатурыСервер.ОбновитьКлассификаторКатегорий();
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

// Процедура заполняет пустую ИБ данными пользователей
//
Процедура ПервыйЗапуск_РазделенныеДанные() Экспорт
	
	НачатьТранзакцию();
	
	// 1. Загрузим план счетов.
	ЗагрузитьУправленческийПланСчетовПервыйЗапуск();
	
	// 2. Заполним вид и направление деятельности.
	ПрочееНаправлениеДеятельностиСсылка = Справочники.НаправленияДеятельности.Прочее;
	ПрочееНаправлениеДеятельности = ПрочееНаправлениеДеятельностиСсылка.ПолучитьОбъект();
	ПрочееНаправлениеДеятельности.СчетУчетаВыручкиОтПродаж = ПланыСчетов.Управленческий.ПрочиеДоходы;
	ПрочееНаправлениеДеятельности.СчетУчетаСебестоимостиПродаж = ПланыСчетов.Управленческий.ПрочиеРасходы;
	ПрочееНаправлениеДеятельности.СчетУчетаПрибыли = ПланыСчетов.Управленческий.ПрибылиИУбыткиБезНалогаНаПрибыль;
	ПрочееНаправлениеДеятельности.Записать();
	
	ОсновноеНаправлениеДеятельностиСсылка = Справочники.НаправленияДеятельности.ОсновноеНаправление;
	ОсновноеНаправлениеДеятельности = ОсновноеНаправлениеДеятельностиСсылка.ПолучитьОбъект();
	ОсновноеНаправлениеДеятельности.СчетУчетаВыручкиОтПродаж = ПланыСчетов.Управленческий.ВыручкаОтПродаж;
	ОсновноеНаправлениеДеятельности.СчетУчетаСебестоимостиПродаж = ПланыСчетов.Управленческий.СебестоимостьПродаж;
	ОсновноеНаправлениеДеятельности.СчетУчетаПрибыли = ПланыСчетов.Управленческий.ПрибылиИУбыткиБезНалогаНаПрибыль;
	ОсновноеНаправлениеДеятельности.Записать();
	
	// 3. Заполним виды налогов.
	ЗаполнитьВидыНалоговПервыйЗапуск();
	
	// 4. Заполним валюты.
	ВалютаОбъект = СправочникОбъектВалютыПоКоду("643");
	ВалютаОбъект.Наименование = НСтр("ru = 'руб.'");
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(ВалютаОбъект);
	РаботаСКурсамиВалют.ПроверитьКорректностьКурсаНа01_01_1980(ВалютаОбъект.Ссылка);
	
	// 5. Заполним ставки НДС.
	СтавкаНДС18 = ЗаполнитьСтавкиНДСПервыйЗапуск();
	
	// 6. Заполним кассы.
	КассаРублевая = Справочники.Кассы.СоздатьЭлемент();
	КассаРублевая.Наименование = НСтр("ru = 'Основная касса'");
	КассаРублевая.ВалютаПоУмолчанию = ВалютаОбъект.Ссылка;
	КассаРублевая.СчетУчета = ПланыСчетов.Управленческий.Касса;
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(КассаРублевая);
	
	// 7. Заполним Календарь на основании ПроизводственногоКалендаря.
	Календарь = УправлениеНебольшойФирмойСервер.ПолучитьКалендарьПоПроизводственномуКалендарюРФ(); 
	Если Календарь = Неопределено Тогда
		
		СоздатьКалендарьПятидневкаРоссийскойФедерации();
		Календарь = УправлениеНебольшойФирмойСервер.ПолучитьКалендарьПоПроизводственномуКалендарюРФ(); 
		
	КонецЕсли;
	
	// 8. Заполним организации.
	Константы.НеИспользоватьНесколькоОрганизаций.Установить(Истина);
	
	НашаОрганизацияСсылка = Справочники.Организации.ОсновнаяОрганизация;
	НашаОрганизация = НашаОрганизацияСсылка.ПолучитьОбъект();
	НашаОрганизация.НаименованиеПолное	  = НСтр("ru = 'ООО ""Наша фирма""'");
	НашаОрганизация.Префикс				  = НСтр("ru = 'НФ-'");
	НашаОрганизация.ЮридическоеФизическоеЛицо			  = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
	НашаОрганизация.НДСВключатьВСтоимость = Истина;
	НашаОрганизация.КассаПоУмолчанию	  = КассаРублевая.Ссылка;
	НашаОрганизация.СтавкаНДСПоУмолчанию  = СтавкаНДС18;
	НашаОрганизация.ПроизводственныйКалендарь = Календарь;
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(НашаОрганизация);
	
	// 9. Заполним подразделения.
	ОсновноеПодразделениеСсылка = Справочники.СтруктурныеЕдиницы.ОсновноеПодразделение;
	ОсновноеПодразделение = ОсновноеПодразделениеСсылка.ПолучитьОбъект();
	ОсновноеПодразделение.Организация = НашаОрганизация.Ссылка;
	ОсновноеПодразделение.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Подразделение;
	ОсновноеПодразделение.Записать();
	
	// 10. Заполним основной склад.
	ОсновнойСкладСсылка = Справочники.СтруктурныеЕдиницы.ОсновнойСклад;
	ОсновнойСклад = ОсновнойСкладСсылка.ПолучитьОбъект();
	ОсновнойСклад.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Склад;
	ОсновнойСклад.Организация = НашаОрганизация.Ссылка;
	ОсновнойСклад.Записать();
	
	// 11. Заполним виды цен.
	// Оптовая.
	ОптоваяСсылка = Справочники.ВидыЦен.Оптовая;
	Оптовая = ОптоваяСсылка.ПолучитьОбъект();
	Оптовая.ИдентификаторФормул = Нстр("ru ='Оптовая'");
	Оптовая.ВалютаЦены = ВалютаОбъект.Ссылка;
	Оптовая.ЦеныАктуальны = Истина;
	Оптовая.ЦенаВключаетНДС = Истина;
	Оптовая.ПорядокОкругления = Перечисления.ПорядкиОкругления.Окр1;
	Оптовая.ОкруглятьВБольшуюСторону = Ложь;
	Оптовая.ФорматЦены = "ЧЦ=15; ЧДЦ=2";
	Оптовая.Записать();
	
	// Учетная.
	УчетнаяСсылка = Справочники.ВидыЦен.Учетная;
	Учетная = УчетнаяСсылка.ПолучитьОбъект();
	Учетная.ИдентификаторФормул = Нстр("ru ='Учетная'");
	Учетная.ВалютаЦены = ВалютаОбъект.Ссылка;
	Учетная.ЦеныАктуальны = Истина;
	Учетная.ЦенаВключаетНДС = Истина;
	Учетная.ПорядокОкругления = Перечисления.ПорядкиОкругления.Окр1;
	Учетная.ОкруглятьВБольшуюСторону = Ложь;
	Учетная.ФорматЦены = "ЧЦ=15; ЧДЦ=2";
	Учетная.Записать();
	
	// 12. Заполним константы.
	Константы.ВалютаУчета.Установить(ВалютаОбъект.Ссылка);
	Константы.НациональнаяВалюта.Установить(ВалютаОбъект.Ссылка);
	Константы.КонтролироватьОстаткиПриПроведении.Установить(Истина);
	Константы.ИспользоватьНапоминанияПользователя.Установить(Истина);
	
	Константы.НеПроводитьДокументыСНекорректнымиДоговорами.Установить(Ложь);
	Константы.ЧастотаРасчетаКурсовыхРазниц.Установить(Перечисления.ЧастотаРасчетаКурсовыхРазниц.ТолькоПриЗакрытииПериода);
	Если Не ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		Константы.ПрефиксУзлаРаспределеннойИнформационнойБазы.Установить(ОбменДаннымиПереопределяемый.ПрефиксИнформационнойБазыПоУмолчанию());
	КонецЕсли;
	Константы.ИспользоватьШаблоныСообщений.Установить(Истина);
	
	// 13. Заполним сценарий планирования.
	Справочники.СценарииПланирования.ЗаполнитьФактическийСценарий();
	Справочники.СценарииПланирования.ЗаполнитьПоставляемыеСценарии();
	
	// 14. Заполним классификатор использования рабочего времени.
	ЗаполнитьКлассификаторИспользованияРабочегоВремени();
	
	// 15. Заполним параметры расчета и виды начислений.
	ЗаполнитьПараметрыРасчетовИВидыНачислений();
	
	// 16. Заполним наборы свойств.
	ОсновнаяКатегорияСсылка = Справочники.КатегорииНоменклатуры.БезКатегории;
	ОсновнаяКатегория = ОсновнаяКатегорияСсылка.ПолучитьОбъект();
	ОсновнаяКатегория.Записать();
	
	// 17. Заполним реквизиты предопределенных единиц измерения.
	
	// Штука.
	ШтСсылка = Справочники.КлассификаторЕдиницИзмерения.шт;
	ШтОбъект = ШтСсылка.ПолучитьОбъект();
	ШтОбъект.НаименованиеПолное = "Штука";
	ШтОбъект.МеждународноеСокращение = "PCE";
	ШтОбъект.Записать();
	
	// Час.
	чСсылка = Справочники.КлассификаторЕдиницИзмерения.ч;
	чОбъект = чСсылка.ПолучитьОбъект();
	чОбъект.НаименованиеПолное = "Час";
	чОбъект.МеждународноеСокращение = "HUR";
	чОбъект.Записать();
	
	// 18. Заполним состояния заказов
	Справочники.СостоянияЗаказовПокупателей.ЗаполнитьПоставляемыеСостояния();
	Справочники.ВидыЗаказовПокупателей.ЗаполнитьОсновнойВидЗаказа();
	Справочники.СостоянияЗаказНарядов.ЗаполнитьПоставляемыеСостояния();
	Справочники.ВидыЗаказНарядов.ЗаполнитьОсновнойВидЗаказа();
	Справочники.СостоянияЗаказовПоставщикам.ЗаполнитьПоставляемыеСостояния();
	Справочники.СостоянияЗаказовНаПроизводство.ЗаполнитьПоставляемыеСостояния();
	
	// 21. Установим дату изменения движений по ордерному складу.
	Константы.ДатаОбновленияНаРелиз_1_2_1.Установить("19800101");
	
	// 22. Установим признак контроля остатков при пробитии чеков ККМ.
	Константы.КонтролироватьОстаткиПриПробитииЧековККМ.Установить(Истина);
	
	// 23. Настройки подбора
	ЗаполнитьПользовательскиеНастройкиПодбора();
	
	// 24. Константа ПлановаяДатаОптимизацииИтогов
	Константы.ПлановаяДатаОптимизацииИтогов.Установить(КонецМесяца(ДобавитьМесяц(ТекущаяДатаСеанса(), 1)));
	
	// 25. Контактная информация
	КонтактнаяИнформацияУНФ.УстановитьСвойстваПредопределенныхВидовКонтактнойИнформации();
	
	// 26. Константы прайс-листа.
	Константы.ПрайсЛистВыводитьКод.Установить(Перечисления.ДаНет.Да);
	Константы.ПрайсЛистВыводитьПолноеНаименование.Установить(Перечисления.ДаНет.Нет);
	Константы.ПрайсЛистИспользоватьИерархиюНоменклатуры.Установить(Истина);
	Константы.ПрайсЛистФормироватьПоНаличиюНаСкладах.Установить(Ложь);
	
	// 28. Регистрация
	УдалитьРегистрациюИзмененийБазовыхКлассификаторов();
	
	// 29. Заполнение бланков договоров.
	ЗаполнитьБланкиДоговоров();
	
	// 30. Константа.НачалоИспользованияСФ1137
	Константы.НачалоИспользованияСФ1137.Установить(Дата(2012, 04, 01));
	
	// 31. Константа.ЗачитыватьАвансыДолгиАвтоматически
	Константы.ЗачитыватьАвансыДолгиАвтоматически.Установить(Перечисления.ДаНет.Нет);
	
	// 32. БПО
	МенеджерОборудованияВызовСервераПереопределяемый.ОбновлениеБиблиотеки();
	
	// 33. Заполним состояния событий.
	СостояниеЗапланированоОбъект = Справочники.СостоянияСобытий.Запланировано.ПолучитьОбъект();
	СостояниеЗапланированоОбъект.РеквизитДопУпорядочивания = 1;
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(СостояниеЗапланированоОбъект);
	
	СостояниеЗавершеноОбъект = Справочники.СостоянияСобытий.Завершено.ПолучитьОбъект();
	СостояниеЗавершеноОбъект.РеквизитДопУпорядочивания = 2;
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(СостояниеЗавершеноОбъект);
	
	СостояниеОтмененоОбъект = Справочники.СостоянияСобытий.Отменено.ПолучитьОбъект();
	СостояниеОтмененоОбъект.РеквизитДопУпорядочивания = 3;
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(СостояниеОтмененоОбъект);
	
	// 34. Заполнение предопределенных элементов статьи расходов.
	ОплатаОтПокупателей = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей.ПолучитьОбъект();
	ОплатаОтПокупателей.УчитыватьВНУ = Истина;
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(ОплатаОтПокупателей);
	
	ОплатаПоставщикам = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаПоставщикам.ПолучитьОбъект();
	ОплатаПоставщикам.УчитыватьВНУ = Истина;
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(ОплатаПоставщикам);
	
	// 35. Заполняем регистр сведений ЗначенияКБК
	ЗагрузитьЗначенияКБК();
	
	// 36. Заполним сегменты контрагентов.
	Справочники.Сегменты.ЗаполнитьПоставляемыеСегменты();
	
	// 37. Заполним источники привлечения покупателей.
	Справочники.ИсточникиПривлеченияПокупателей.ЗаполнитьПоставляемыеИсточникиПривлеченияПокупателей();
	
	// 38. Заполним справочник ВидыДоходовПоСтраховымВзносам.
	Справочники.ВидыДоходовПоСтраховымВзносам.ЗаполнитьВидыДоходовПоСтраховымВзносам();
	
	// 39. Заполним справочник ВидыДоходовПоСтраховымВзносам.
	ЗаполнитьКодыНДФЛ();
	
	// 40. Заполним справочник ВидыДоходовПоСтраховымВзносам.
	ЗаполнитьДокументыФизическихЛицПоКлассификаторуМВД();
	
	// 41. Всегда ИспользоватьДополнительныеРеквизитыИСведения = Истина
	Константы.ИспользоватьДополнительныеРеквизитыИСведения.Установить(Истина);
	
	// 42. Настройка отбора номенклатуры.
	УправлениеНебольшойФирмойСервер.УстановитьНастройкуПользователя(Перечисления.ВидыОтборовНоменклатуры.КатегорииНоменклатуры, "ОсновнойВидОтбора");
	
	// 43. Создание шаблонов условий печати в счетах на оплату
	ЗаполнитьДополнительныеУсловияДляПечати();
	
	// 44. Создание шаблонов наименований для предопределенной категории.
	ШаблоныНаименований.СоздатьШаблоныПоУмолчанию(Справочники.КатегорииНоменклатуры.БезКатегории);
	
	// 45. Идентификаторы
	ОбновитьПредопределенныеВидыЦен();
	
	// 46. Обновление документов заработной платы
	ОтчетыУНФ.Обновить();
	ОтчетыУНФ.ОбновитьТегиОтчетов();
	
	// 47. Установка константы функциональной опции участия в опросе
	УстановитьКонстантуУчастияВОпросеПоНалогам();
	
	// 48. Заполним справочник ПравилаРабочегоПроцесса.
	Справочники.ПравилаРабочегоПроцесса.ЗаполнитьПоставляемыеПравила();
	
	// 49. Заполняет справочник ключевых операций, устанавливает целевое время
	ЗаполнитьРеквизитыКлючевыхОпераций();
	
	// МобильноеПриложение
	// 50. Установка ФО это обычное приложение.
	УстановитьКонстантуЭтоОбычноеПриложение();
	// Конец МобильноеПриложение
	
	// 51. Заполним параметры расчета доставки.
	ЗаполнитьПараметрыРасчетовДоставки();
	
	// 52. Заполним реквизиты собственной службы.
	ЗаполнитьРеквизитыСобственнойСлужбыДоставки();
	
	// 53. Шаблоны коммерческого предложения.
	ШаблоныПечатиОфисныхДокументов.СоздатьПредопределенныеШаблоныКоммерческогоПредложения();
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры // ПервыйЗапуск()

#КонецОбласти

#Область Обработчики_1_6_10

#Область ПодсистемаПечати

Процедура ПечатныеФормыПоддерживающиеФаксимильнуюПодпись(Параметры = Неопределено) Экспорт
	
	ОписаниеФорм = ПодписьДокументовУНФ.ШаблонТаблицыФаксимильныхПодписей();
	
	ВыборкаОрганизаций = Справочники.Организации.Выбрать();
	Пока ВыборкаОрганизаций.Следующий() Цикл
		
		ПодписьДокументовУНФ.ПечатныеФормыПоддерживающиеФаксимильнуюПодпись(ОписаниеФорм, ВыборкаОрганизаций.Ссылка);
		
	КонецЦикла;
	
	НаборЗаписей = РегистрыСведений.ФаксимилеНастройки.СоздатьНаборЗаписей();
	НаборЗаписей.Загрузить(ОписаниеФорм);
	НаборЗаписей.Записать();
	
	Параметры.ОбработкаЗавершена = Истина;
	
КонецПроцедуры

Процедура КонвертацияПризнакаИспользоватьФаксимилеВПеречисление(Параметры = Неопределено) Экспорт
	
	НаборЗаписей = РегистрыСведений.ФаксимилеНастройки.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	
	ТаблицаНастроек = НаборЗаписей.Выгрузить();
	Для каждого СтрокаТаблицы Из ТаблицаНастроек Цикл
		
		СтрокаТаблицы.ЗначениеПоУмолчанию = ?(СтрокаТаблицы.УдалитьЗначениеПоУмолчанию = Истина, Перечисления.ДаНет.Да, Перечисления.ДаНет.Нет);
		
	КонецЦикла;
	
	НаборЗаписей.Загрузить(ТаблицаНастроек);
	НаборЗаписей.Записать();
	
	Параметры.ОбработкаЗавершена = Истина;
	
КонецПроцедуры

#Область КонвертацияПодписей

Процедура КонвертацияРегистраОтветственныхЛицВПодписи() Экспорт
	
	АктуальнаяПодписьКладовщика = Новый Массив(1, 2);
	АктуальнаяПодписьКассира = Новый Массив(1, 2);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"Выбрать 
	|	ОтветственныеЛица.Период КАК Период
	|	,ОтветственныеЛица.Организация КАК Организация
	|	,ОтветственныеЛица.ТипОтветственногоЛица КАК ТипОтветственногоЛица
	|	,ОтветственныеЛица.Сотрудник КАК Сотрудник
	|	,ОтветственныеЛица.Сотрудник.ФизЛицо КАК ФизическоеЛицоСотрудника
	|Из РегистрСведений.УдалитьОтветственныеЛица КАК ОтветственныеЛица
	|Где НЕ ОтветственныеЛица.КонвертацияВыполнена";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ПодписьСотрудника = НайтиПодписьСотрудника(Выборка.Организация, Выборка.Сотрудник);
		Если НЕ ЗначениеЗаполнено(ПодписьСотрудника) Тогда
			
			СтруктураПодписи = Новый Структура;
			СтруктураПодписи.Вставить("ДатаНазначения", Выборка.Период);
			СтруктураПодписи.Вставить("Организация", Выборка.Организация);
			СтруктураПодписи.Вставить("Сотрудник", Выборка.Сотрудник);
			СтруктураПодписи.Вставить("ФизическоеЛицоСотрудника", Выборка.ФизическоеЛицоСотрудника);
			
			ПодписьСотрудника = СоздатьПодписьПоСтруктуре(СтруктураПодписи);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПодписьСотрудника) Тогда
			
			МенеджерЗаписи = РегистрыСведений.УдалитьОтветственныеЛица.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка);
			МенеджерЗаписи.Подпись = ПодписьСотрудника;
			МенеджерЗаписи.КонвертацияВыполнена = Истина;
			МенеджерЗаписи.Записать(Истина);
			
			Если Выборка.ТипОтветственногоЛица = Перечисления.УдалитьТипыОтветственныхЛиц.Кладовщик Тогда
				
				Если НЕ ЗначениеЗаполнено(АктуальнаяПодписьКладовщика[0][0])
					ИЛИ ПодписьСотрудника.ДатаНазначения > АктуальнаяПодписьКладовщика[0][1] Тогда
					
					АктуальнаяПодписьКладовщика[0][0] = ПодписьСотрудника;
					АктуальнаяПодписьКладовщика[0][1] = ПодписьСотрудника.ДатаНазначения;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если Выборка.ТипОтветственногоЛица = Перечисления.УдалитьТипыОтветственныхЛиц.Кассир Тогда
				
				Если НЕ ЗначениеЗаполнено(АктуальнаяПодписьКассира[0][0])
					ИЛИ ПодписьСотрудника.ДатаНазначения > АктуальнаяПодписьКассира[0][1] Тогда
					
					АктуальнаяПодписьКассира[0][0] = ПодписьСотрудника;
					АктуальнаяПодписьКассира[0][1] = ПодписьСотрудника.ДатаНазначения;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаполнитьПодписиОрганизаций();
	ЗаполнитьПодписиСтруктурныхЕдиниц(АктуальнаяПодписьКладовщика);
	ЗаполнитьПодписиКассПредприятия(АктуальнаяПодписьКассира);
	
КонецПроцедуры

Процедура ПодписиВДокументах_АвансовыйОтчет(Параметры = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"Выбрать первые 100
	|	ДокументАвансовыйОтчет.Ссылка
	|	,ДокументАвансовыйОтчет.Дата КАК ДатаДокумента
	|	,ДокументАвансовыйОтчет.Организация
	|Поместить ТаблицаДокументов
	|Из Документ.АвансовыйОтчет КАК ДокументАвансовыйОтчет
	|Где НЕ ДокументАвансовыйОтчет.ПометкаУдаления
	|Упорядочить по ДокументАвансовыйОтчет.Дата Убыв
	|Индексировать по ДатаДокумента, Организация
	|
	|;Выбрать
	|	Максимум(ЗаписьОтветственныхЛиц.Период) КАК ОтборПериода
	|	,ТаблицаДокументов.Ссылка
	|	,ТаблицаДокументов.ДатаДокумента
	|	,ТаблицаДокументов.Организация
	|Поместить ПериодЗаписиПодписиРуководителя
	|Из ТаблицаДокументов КАК ТаблицаДокументов
	|	Левое соединение РегистрСведений.УдалитьОтветственныеЛица КАК ЗаписьОтветственныхЛиц
	|	По ЗаписьОтветственныхЛиц.КонвертацияВыполнена
	|		И ЗаписьОтветственныхЛиц.ТипОтветственногоЛица = Значение(Перечисление.УдалитьТипыОтветственныхЛиц.Руководитель)
	|		И ЗаписьОтветственныхЛиц.Период < ТаблицаДокументов.ДатаДокумента
	|		И ЗаписьОтветственныхЛиц.Организация = ТаблицаДокументов.Организация
	|Сгруппировать по ТаблицаДокументов.Ссылка, ТаблицаДокументов.ДатаДокумента, ТаблицаДокументов.Организация
	|
	|;Выбрать
	|	ПериодЗаписиПодписиРуководителя.Ссылка
	|	,ПериодЗаписиПодписиРуководителя.ДатаДокумента
	|	,ПериодЗаписиПодписиРуководителя.Организация
	|	,ЗаписьОтветственныхЛиц.Подпись КАК ПодписьРуководителя
	|Поместить ДокументыИПодписиРуководителя
	|Из ПериодЗаписиПодписиРуководителя КАК ПериодЗаписиПодписиРуководителя
	|	Левое соединение РегистрСведений.УдалитьОтветственныеЛица КАК ЗаписьОтветственныхЛиц
	|	по ЗаписьОтветственныхЛиц.КонвертацияВыполнена
	|		И ЗаписьОтветственныхЛиц.ТипОтветственногоЛица = Значение(Перечисление.УдалитьТипыОтветственныхЛиц.Руководитель)
	|		И ЗаписьОтветственныхЛиц.Период = ПериодЗаписиПодписиРуководителя.ОтборПериода
	|		И ЗаписьОтветственныхЛиц.Организация = ПериодЗаписиПодписиРуководителя.Организация
	|
	|;Выбрать
	|	Максимум(ЗаписьОтветственныхЛиц.Период) КАК ОтборПериода
	|	,ТаблицаДокументов.Ссылка
	|	,ТаблицаДокументов.ДатаДокумента
	|	,ТаблицаДокументов.Организация
	|Поместить ПериодЗаписиПодписиГлавногоБухгалтера
	|Из ТаблицаДокументов КАК ТаблицаДокументов
	|	Левое соединение РегистрСведений.УдалитьОтветственныеЛица КАК ЗаписьОтветственныхЛиц
	|	По ЗаписьОтветственныхЛиц.КонвертацияВыполнена
	|		И ЗаписьОтветственныхЛиц.ТипОтветственногоЛица = Значение(Перечисление.УдалитьТипыОтветственныхЛиц.ГлавныйБухгалтер)
	|		И ЗаписьОтветственныхЛиц.Период < ТаблицаДокументов.ДатаДокумента
	|		И ЗаписьОтветственныхЛиц.Организация = ТаблицаДокументов.Организация
	|Сгруппировать по ТаблицаДокументов.Ссылка, ТаблицаДокументов.ДатаДокумента, ТаблицаДокументов.Организация
	|
	|;Выбрать
	|	ПериодЗаписиПодписиГлавногоБухгалтера.Ссылка
	|	,ПериодЗаписиПодписиГлавногоБухгалтера.ДатаДокумента
	|	,ПериодЗаписиПодписиГлавногоБухгалтера.Организация
	|	,ЗаписьОтветственныхЛиц.Подпись КАК ПодписьГлавногоБухгалтера
	|Поместить ДокументыИПодписиГлавногоБухгалтера
	|Из ПериодЗаписиПодписиГлавногоБухгалтера КАК ПериодЗаписиПодписиГлавногоБухгалтера
	|	Левое соединение РегистрСведений.УдалитьОтветственныеЛица КАК ЗаписьОтветственныхЛиц
	|	по ЗаписьОтветственныхЛиц.КонвертацияВыполнена
	|		И ЗаписьОтветственныхЛиц.ТипОтветственногоЛица = Значение(Перечисление.УдалитьТипыОтветственныхЛиц.ГлавныйБухгалтер)
	|		И ЗаписьОтветственныхЛиц.Период = ПериодЗаписиПодписиГлавногоБухгалтера.ОтборПериода
	|		И ЗаписьОтветственныхЛиц.Организация = ПериодЗаписиПодписиГлавногоБухгалтера.Организация
	|
	|;Выбрать
	|	ДокументыИПодписиРуководителя.Ссылка
	|	,ДокументыИПодписиРуководителя.ПодписьРуководителя КАК ПодписьРуководителя
	|	,ДокументыИПодписиГлавногоБухгалтера.ПодписьГлавногоБухгалтера КАК ПодписьГлавногоБухгалтера
	|Из ДокументыИПодписиРуководителя КАК ДокументыИПодписиРуководителя
	|	Левое соединение ДокументыИПодписиГлавногоБухгалтера КАК ДокументыИПодписиГлавногоБухгалтера
	|	по ДокументыИПодписиРуководителя.Ссылка = ДокументыИПодписиГлавногоБухгалтера.Ссылка";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
		
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Попытка
			
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ДокументОбъект.Заблокировать();
			ДокументОбъект.ПодписьРуководителя = Выборка.ПодписьРуководителя;
			ДокументОбъект.ПодписьГлавногоБухгалтера = Выборка.ПодписьГлавногоБухгалтера;
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект, Ложь, Ложь);
			
		Исключение
			
			ЗаписьЖурналаРегистрации("ПодписиДокументов", УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Истина;
	
КонецПроцедуры

Процедура ПодписиВДокументах_АктВыполненныхРабот(Параметры = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"Выбрать первые 100
	|	ДокументАктВыполненныхРабот.Ссылка
	|	,ДокументАктВыполненныхРабот.Дата КАК ДатаДокумента
	|	,ДокументАктВыполненныхРабот.Организация
	|Поместить ТаблицаДокументов
	|Из Документ.АктВыполненныхРабот КАК ДокументАктВыполненныхРабот
	|Где НЕ ДокументАктВыполненныхРабот.ПометкаУдаления
	|Упорядочить по ДокументАктВыполненныхРабот.Дата Убыв
	|Индексировать по ДатаДокумента, Организация
	|
	|;Выбрать
	|	Максимум(ЗаписьОтветственныхЛиц.Период) КАК ОтборПериода
	|	,ТаблицаДокументов.Ссылка
	|	,ТаблицаДокументов.ДатаДокумента
	|	,ТаблицаДокументов.Организация
	|Поместить ПериодЗаписиПодписиРуководителя
	|Из ТаблицаДокументов КАК ТаблицаДокументов
	|	Левое соединение РегистрСведений.УдалитьОтветственныеЛица КАК ЗаписьОтветственныхЛиц
	|	По ЗаписьОтветственныхЛиц.КонвертацияВыполнена
	|		И ЗаписьОтветственныхЛиц.ТипОтветственногоЛица = Значение(Перечисление.УдалитьТипыОтветственныхЛиц.Руководитель)
	|		И ЗаписьОтветственныхЛиц.Период < ТаблицаДокументов.ДатаДокумента
	|		И ЗаписьОтветственныхЛиц.Организация = ТаблицаДокументов.Организация
	|Сгруппировать по ТаблицаДокументов.Ссылка, ТаблицаДокументов.ДатаДокумента, ТаблицаДокументов.Организация
	|
	|;Выбрать
	|	ПериодЗаписиПодписиРуководителя.Ссылка
	|	,ПериодЗаписиПодписиРуководителя.ДатаДокумента
	|	,ПериодЗаписиПодписиРуководителя.Организация
	|	,ЗаписьОтветственныхЛиц.Подпись КАК ПодписьРуководителя
	|Поместить ДокументыИПодписиРуководителя
	|Из ПериодЗаписиПодписиРуководителя КАК ПериодЗаписиПодписиРуководителя
	|	Левое соединение РегистрСведений.УдалитьОтветственныеЛица КАК ЗаписьОтветственныхЛиц
	|	по ЗаписьОтветственныхЛиц.КонвертацияВыполнена
	|		И ЗаписьОтветственныхЛиц.ТипОтветственногоЛица = Значение(Перечисление.УдалитьТипыОтветственныхЛиц.Руководитель)
	|		И ЗаписьОтветственныхЛиц.Период = ПериодЗаписиПодписиРуководителя.ОтборПериода
	|		И ЗаписьОтветственныхЛиц.Организация = ПериодЗаписиПодписиРуководителя.Организация
	|
	|;Выбрать
	|	Максимум(ЗаписьОтветственныхЛиц.Период) КАК ОтборПериода
	|	,ТаблицаДокументов.Ссылка
	|	,ТаблицаДокументов.ДатаДокумента
	|	,ТаблицаДокументов.Организация
	|Поместить ПериодЗаписиПодписиГлавногоБухгалтера
	|Из ТаблицаДокументов КАК ТаблицаДокументов
	|	Левое соединение РегистрСведений.УдалитьОтветственныеЛица КАК ЗаписьОтветственныхЛиц
	|	По ЗаписьОтветственныхЛиц.КонвертацияВыполнена
	|		И ЗаписьОтветственныхЛиц.ТипОтветственногоЛица = Значение(Перечисление.УдалитьТипыОтветственныхЛиц.ГлавныйБухгалтер)
	|		И ЗаписьОтветственныхЛиц.Период < ТаблицаДокументов.ДатаДокумента
	|		И ЗаписьОтветственныхЛиц.Организация = ТаблицаДокументов.Организация
	|Сгруппировать по ТаблицаДокументов.Ссылка, ТаблицаДокументов.ДатаДокумента, ТаблицаДокументов.Организация
	|
	|;Выбрать
	|	ПериодЗаписиПодписиГлавногоБухгалтера.Ссылка
	|	,ПериодЗаписиПодписиГлавногоБухгалтера.ДатаДокумента
	|	,ПериодЗаписиПодписиГлавногоБухгалтера.Организация
	|	,ЗаписьОтветственныхЛиц.Подпись КАК ПодписьГлавногоБухгалтера
	|Поместить ДокументыИПодписиГлавногоБухгалтера
	|Из ПериодЗаписиПодписиГлавногоБухгалтера КАК ПериодЗаписиПодписиГлавногоБухгалтера
	|	Левое соединение РегистрСведений.УдалитьОтветственныеЛица КАК ЗаписьОтветственныхЛиц
	|	по ЗаписьОтветственныхЛиц.КонвертацияВыполнена
	|		И ЗаписьОтветственныхЛиц.ТипОтветственногоЛица = Значение(Перечисление.УдалитьТипыОтветственныхЛиц.ГлавныйБухгалтер)
	|		И ЗаписьОтветственныхЛиц.Период = ПериодЗаписиПодписиГлавногоБухгалтера.ОтборПериода
	|		И ЗаписьОтветственныхЛиц.Организация = ПериодЗаписиПодписиГлавногоБухгалтера.Организация
	|
	|;Выбрать
	|	ДокументыИПодписиРуководителя.Ссылка
	|	,ДокументыИПодписиРуководителя.ПодписьРуководителя КАК ПодписьРуководителя
	|	,ДокументыИПодписиГлавногоБухгалтера.ПодписьГлавногоБухгалтера КАК ПодписьГлавногоБухгалтера
	|Из ДокументыИПодписиРуководителя КАК ДокументыИПодписиРуководителя
	|	Левое соединение ДокументыИПодписиГлавногоБухгалтера КАК ДокументыИПодписиГлавногоБухгалтера
	|	по ДокументыИПодписиРуководителя.Ссылка = ДокументыИПодписиГлавногоБухгалтера.Ссылка";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
		
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Попытка
			
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ДокументОбъект.Заблокировать();
			ДокументОбъект.ПодписьРуководителя = Выборка.ПодписьРуководителя;
			ДокументОбъект.ПодписьГлавногоБухгалтера = Выборка.ПодписьГлавногоБухгалтера;
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект, Ложь, Ложь);
			
		Исключение
			
			ЗаписьЖурналаРегистрации("ПодписиДокументов", УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Истина;
	
КонецПроцедуры

Процедура ПодписиВДокументах_Доверенность(Параметры = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"Выбрать первые 100
	|	ДокументДоверенность.Ссылка
	|	,ДокументДоверенность.Дата КАК ДатаДокумента
	|	,ДокументДоверенность.Организация
	|Поместить ТаблицаДокументов
	|Из Документ.Доверенность КАК ДокументДоверенность
	|Где НЕ ДокументДоверенность.ПометкаУдаления
	|Упорядочить по ДокументДоверенность.Дата Убыв
	|Индексировать по ДатаДокумента, Организация
	|
	|;Выбрать
	|	Максимум(ЗаписьОтветственныхЛиц.Период) КАК ОтборПериода
	|	,ТаблицаДокументов.Ссылка
	|	,ТаблицаДокументов.ДатаДокумента
	|	,ТаблицаДокументов.Организация
	|Поместить ПериодЗаписиПодписиРуководителя
	|Из ТаблицаДокументов КАК ТаблицаДокументов
	|	Левое соединение РегистрСведений.УдалитьОтветственныеЛица КАК ЗаписьОтветственныхЛиц
	|	По ЗаписьОтветственныхЛиц.КонвертацияВыполнена
	|		И ЗаписьОтветственныхЛиц.ТипОтветственногоЛица = Значение(Перечисление.УдалитьТипыОтветственныхЛиц.Руководитель)
	|		И ЗаписьОтветственныхЛиц.Период < ТаблицаДокументов.ДатаДокумента
	|		И ЗаписьОтветственныхЛиц.Организация = ТаблицаДокументов.Организация
	|Сгруппировать по ТаблицаДокументов.Ссылка, ТаблицаДокументов.ДатаДокумента, ТаблицаДокументов.Организация
	|
	|;Выбрать
	|	ПериодЗаписиПодписиРуководителя.Ссылка
	|	,ПериодЗаписиПодписиРуководителя.ДатаДокумента
	|	,ПериодЗаписиПодписиРуководителя.Организация
	|	,ЗаписьОтветственныхЛиц.Подпись КАК ПодписьРуководителя
	|Поместить ДокументыИПодписиРуководителя
	|Из ПериодЗаписиПодписиРуководителя КАК ПериодЗаписиПодписиРуководителя
	|	Левое соединение РегистрСведений.УдалитьОтветственныеЛица КАК ЗаписьОтветственныхЛиц
	|	по ЗаписьОтветственныхЛиц.КонвертацияВыполнена
	|		И ЗаписьОтветственныхЛиц.ТипОтветственногоЛица = Значение(Перечисление.УдалитьТипыОтветственныхЛиц.Руководитель)
	|		И ЗаписьОтветственныхЛиц.Период = ПериодЗаписиПодписиРуководителя.ОтборПериода
	|		И ЗаписьОтветственныхЛиц.Организация = ПериодЗаписиПодписиРуководителя.Организация
	|
	|;Выбрать
	|	Максимум(ЗаписьОтветственныхЛиц.Период) КАК ОтборПериода
	|	,ТаблицаДокументов.Ссылка
	|	,ТаблицаДокументов.ДатаДокумента
	|	,ТаблицаДокументов.Организация
	|Поместить ПериодЗаписиПодписиГлавногоБухгалтера
	|Из ТаблицаДокументов КАК ТаблицаДокументов
	|	Левое соединение РегистрСведений.УдалитьОтветственныеЛица КАК ЗаписьОтветственныхЛиц
	|	По ЗаписьОтветственныхЛиц.КонвертацияВыполнена
	|		И ЗаписьОтветственныхЛиц.ТипОтветственногоЛица = Значение(Перечисление.УдалитьТипыОтветственныхЛиц.ГлавныйБухгалтер)
	|		И ЗаписьОтветственныхЛиц.Период < ТаблицаДокументов.ДатаДокумента
	|		И ЗаписьОтветственныхЛиц.Организация = ТаблицаДокументов.Организация
	|Сгруппировать по ТаблицаДокументов.Ссылка, ТаблицаДокументов.ДатаДокумента, ТаблицаДокументов.Организация
	|
	|;Выбрать
	|	ПериодЗаписиПодписиГлавногоБухгалтера.Ссылка
	|	,ПериодЗаписиПодписиГлавногоБухгалтера.ДатаДокумента
	|	,ПериодЗаписиПодписиГлавногоБухгалтера.Организация
	|	,ЗаписьОтветственныхЛиц.Подпись КАК ПодписьГлавногоБухгалтера
	|Поместить ДокументыИПодписиГлавногоБухгалтера
	|Из ПериодЗаписиПодписиГлавногоБухгалтера КАК ПериодЗаписиПодписиГлавногоБухгалтера
	|	Левое соединение РегистрСведений.УдалитьОтветственныеЛица КАК ЗаписьОтветственныхЛиц
	|	по ЗаписьОтветственныхЛиц.КонвертацияВыполнена
	|		И ЗаписьОтветственныхЛиц.ТипОтветственногоЛица = Значение(Перечисление.УдалитьТипыОтветственныхЛиц.ГлавныйБухгалтер)
	|		И ЗаписьОтветственныхЛиц.Период = ПериодЗаписиПодписиГлавногоБухгалтера.ОтборПериода
	|		И ЗаписьОтветственныхЛиц.Организация = ПериодЗаписиПодписиГлавногоБухгалтера.Организация
	|
	|;Выбрать
	|	ДокументыИПодписиРуководителя.Ссылка
	|	,ДокументыИПодписиРуководителя.ПодписьРуководителя КАК ПодписьРуководителя
	|	,ДокументыИПодписиГлавногоБухгалтера.ПодписьГлавногоБухгалтера КАК ПодписьГлавногоБухгалтера
	|Из ДокументыИПодписиРуководителя КАК ДокументыИПодписиРуководителя
	|	Левое соединение ДокументыИПодписиГлавногоБухгалтера КАК ДокументыИПодписиГлавногоБухгалтера
	|	по ДокументыИПодписиРуководителя.Ссылка = ДокументыИПодписиГлавногоБухгалтера.Ссылка";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
		
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Попытка
			
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ДокументОбъект.Заблокировать();
			ДокументОбъект.ПодписьРуководителя = Выборка.ПодписьРуководителя;
			ДокументОбъект.ПодписьГлавногоБухгалтера = Выборка.ПодписьГлавногоБухгалтера;
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект, Ложь, Ложь);
			
		Исключение
			
			ЗаписьЖурналаРегистрации("ПодписиДокументов", УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Истина;
	
КонецПроцедуры

Процедура ПодписиВДокументах_ЗаказПокупателя(Параметры = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"Выбрать первые 500
	|	ДокументЗаказПокупателя.Ссылка
	|	,ДокументЗаказПокупателя.Дата КАК ДатаДокумента
	|	,ДокументЗаказПокупателя.Организация
	|Поместить ТаблицаДокументов
	|Из Документ.ЗаказПокупателя КАК ДокументЗаказПокупателя
	|Где НЕ ДокументЗаказПокупателя.ПометкаУдаления 
	|	И ДокументЗаказПокупателя.ВидОперации <> Значение(Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаряд)
	|Упорядочить по ДокументЗаказПокупателя.Дата Убыв
	|Индексировать по ДатаДокумента, Организация
	|
	|;Выбрать
	|	Максимум(ЗаписьОтветственныхЛиц.Период) КАК ОтборПериода
	|	,ТаблицаДокументов.Ссылка
	|	,ТаблицаДокументов.ДатаДокумента
	|	,ТаблицаДокументов.Организация
	|Поместить ПериодЗаписиПодписиРуководителя
	|Из ТаблицаДокументов КАК ТаблицаДокументов
	|	Левое соединение РегистрСведений.УдалитьОтветственныеЛица КАК ЗаписьОтветственныхЛиц
	|	По ЗаписьОтветственныхЛиц.КонвертацияВыполнена
	|		И ЗаписьОтветственныхЛиц.ТипОтветственногоЛица = Значение(Перечисление.УдалитьТипыОтветственныхЛиц.Руководитель)
	|		И ЗаписьОтветственныхЛиц.Период < ТаблицаДокументов.ДатаДокумента
	|		И ЗаписьОтветственныхЛиц.Организация = ТаблицаДокументов.Организация
	|Сгруппировать по ТаблицаДокументов.Ссылка, ТаблицаДокументов.ДатаДокумента, ТаблицаДокументов.Организация
	|
	|;Выбрать
	|	ПериодЗаписиПодписиРуководителя.Ссылка
	|	,ПериодЗаписиПодписиРуководителя.ДатаДокумента
	|	,ПериодЗаписиПодписиРуководителя.Организация
	|	,ЗаписьОтветственныхЛиц.Подпись КАК ПодписьРуководителя
	|Поместить ДокументыИПодписиРуководителя
	|Из ПериодЗаписиПодписиРуководителя КАК ПериодЗаписиПодписиРуководителя
	|	Левое соединение РегистрСведений.УдалитьОтветственныеЛица КАК ЗаписьОтветственныхЛиц
	|	по ЗаписьОтветственныхЛиц.КонвертацияВыполнена
	|		И ЗаписьОтветственныхЛиц.ТипОтветственногоЛица = Значение(Перечисление.УдалитьТипыОтветственныхЛиц.Руководитель)
	|		И ЗаписьОтветственныхЛиц.Период = ПериодЗаписиПодписиРуководителя.ОтборПериода
	|		И ЗаписьОтветственныхЛиц.Организация = ПериодЗаписиПодписиРуководителя.Организация
	|
	|;Выбрать
	|	Максимум(ЗаписьОтветственныхЛиц.Период) КАК ОтборПериода
	|	,ТаблицаДокументов.Ссылка
	|	,ТаблицаДокументов.ДатаДокумента
	|	,ТаблицаДокументов.Организация
	|Поместить ПериодЗаписиПодписиГлавногоБухгалтера
	|Из ТаблицаДокументов КАК ТаблицаДокументов
	|	Левое соединение РегистрСведений.УдалитьОтветственныеЛица КАК ЗаписьОтветственныхЛиц
	|	По ЗаписьОтветственныхЛиц.КонвертацияВыполнена
	|		И ЗаписьОтветственныхЛиц.ТипОтветственногоЛица = Значение(Перечисление.УдалитьТипыОтветственныхЛиц.ГлавныйБухгалтер)
	|		И ЗаписьОтветственныхЛиц.Период < ТаблицаДокументов.ДатаДокумента
	|		И ЗаписьОтветственныхЛиц.Организация = ТаблицаДокументов.Организация
	|Сгруппировать по ТаблицаДокументов.Ссылка, ТаблицаДокументов.ДатаДокумента, ТаблицаДокументов.Организация
	|
	|;Выбрать
	|	ПериодЗаписиПодписиГлавногоБухгалтера.Ссылка
	|	,ПериодЗаписиПодписиГлавногоБухгалтера.ДатаДокумента
	|	,ПериодЗаписиПодписиГлавногоБухгалтера.Организация
	|	,ЗаписьОтветственныхЛиц.Подпись КАК ПодписьГлавногоБухгалтера
	|Поместить ДокументыИПодписиГлавногоБухгалтера
	|Из ПериодЗаписиПодписиГлавногоБухгалтера КАК ПериодЗаписиПодписиГлавногоБухгалтера
	|	Левое соединение РегистрСведений.УдалитьОтветственныеЛица КАК ЗаписьОтветственныхЛиц
	|	по ЗаписьОтветственныхЛиц.КонвертацияВыполнена
	|		И ЗаписьОтветственныхЛиц.ТипОтветственногоЛица = Значение(Перечисление.УдалитьТипыОтветственныхЛиц.ГлавныйБухгалтер)
	|		И ЗаписьОтветственныхЛиц.Период = ПериодЗаписиПодписиГлавногоБухгалтера.ОтборПериода
	|		И ЗаписьОтветственныхЛиц.Организация = ПериодЗаписиПодписиГлавногоБухгалтера.Организация
	|
	|;Выбрать
	|	Максимум(ЗаписьОтветственныхЛиц.Период) КАК ОтборПериода
	|	,ТаблицаДокументов.Ссылка
	|	,ТаблицаДокументов.ДатаДокумента
	|	,ТаблицаДокументов.Организация
	|Поместить ПериодЗаписиПодписиКладовщика
	|Из ТаблицаДокументов КАК ТаблицаДокументов
	|	Левое соединение РегистрСведений.УдалитьОтветственныеЛица КАК ЗаписьОтветственныхЛиц
	|	По ЗаписьОтветственныхЛиц.КонвертацияВыполнена
	|		И ЗаписьОтветственныхЛиц.ТипОтветственногоЛица = Значение(Перечисление.УдалитьТипыОтветственныхЛиц.Кладовщик)
	|		И ЗаписьОтветственныхЛиц.Период < ТаблицаДокументов.ДатаДокумента
	|		И ЗаписьОтветственныхЛиц.Организация = ТаблицаДокументов.Организация
	|Сгруппировать по ТаблицаДокументов.Ссылка, ТаблицаДокументов.ДатаДокумента, ТаблицаДокументов.Организация
	|
	|;Выбрать
	|	ПериодЗаписиПодписиКладовщика.Ссылка
	|	,ПериодЗаписиПодписиКладовщика.ДатаДокумента
	|	,ПериодЗаписиПодписиКладовщика.Организация
	|	,ЗаписьОтветственныхЛиц.Подпись КАК ПодписьКладовщика
	|Поместить ДокументыИПодписиКладовщика
	|Из ПериодЗаписиПодписиКладовщика КАК ПериодЗаписиПодписиКладовщика
	|	Левое соединение РегистрСведений.УдалитьОтветственныеЛица КАК ЗаписьОтветственныхЛиц
	|	по ЗаписьОтветственныхЛиц.КонвертацияВыполнена
	|		И ЗаписьОтветственныхЛиц.ТипОтветственногоЛица = Значение(Перечисление.УдалитьТипыОтветственныхЛиц.Кладовщик)
	|		И ЗаписьОтветственныхЛиц.Период = ПериодЗаписиПодписиКладовщика.ОтборПериода
	|		И ЗаписьОтветственныхЛиц.Организация = ПериодЗаписиПодписиКладовщика.Организация
	|
	|;Выбрать
	|	ДокументыИПодписиРуководителя.Ссылка
	|	,ДокументыИПодписиРуководителя.ПодписьРуководителя КАК ПодписьРуководителя
	|	,ДокументыИПодписиГлавногоБухгалтера.ПодписьГлавногоБухгалтера КАК ПодписьГлавногоБухгалтера
	|	,ДокументыИПодписиКладовщика.ПодписьКладовщика КАК ПодписьКладовщика
	|Из ДокументыИПодписиРуководителя КАК ДокументыИПодписиРуководителя
	|	Левое соединение ДокументыИПодписиГлавногоБухгалтера КАК ДокументыИПодписиГлавногоБухгалтера
	|	по ДокументыИПодписиРуководителя.Ссылка = ДокументыИПодписиГлавногоБухгалтера.Ссылка
	|	Левое соединение ДокументыИПодписиКладовщика КАК ДокументыИПодписиКладовщика
	|	по ДокументыИПодписиРуководителя.Ссылка = ДокументыИПодписиКладовщика.Ссылка";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
		
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Попытка
			
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ДокументОбъект.Заблокировать();
			ДокументОбъект.ПодписьРуководителя = Выборка.ПодписьРуководителя;
			ДокументОбъект.ПодписьГлавногоБухгалтера = Выборка.ПодписьГлавногоБухгалтера;
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект, Ложь, Ложь);
			
		Исключение
			
			ЗаписьЖурналаРегистрации("ПодписиДокументов", УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Истина;
	
КонецПроцедуры

Процедура ПодписиВДокументах_ЗаказНаряд(Параметры = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"Выбрать первые 500
	|	ДокументЗаказПокупателя.Ссылка
	|	,ДокументЗаказПокупателя.Дата КАК ДатаДокумента
	|	,ДокументЗаказПокупателя.Организация
	|Поместить ТаблицаДокументов
	|Из Документ.ЗаказПокупателя КАК ДокументЗаказПокупателя
	|Где НЕ ДокументЗаказПокупателя.ПометкаУдаления 
	|	И ДокументЗаказПокупателя.ВидОперации = Значение(Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаряд)
	|Упорядочить по ДокументЗаказПокупателя.Дата Убыв
	|Индексировать по ДатаДокумента, Организация
	|
	|;Выбрать
	|	Максимум(ЗаписьОтветственныхЛиц.Период) КАК ОтборПериода
	|	,ТаблицаДокументов.Ссылка
	|	,ТаблицаДокументов.ДатаДокумента
	|	,ТаблицаДокументов.Организация
	|Поместить ПериодЗаписиПодписиРуководителя
	|Из ТаблицаДокументов КАК ТаблицаДокументов
	|	Левое соединение РегистрСведений.УдалитьОтветственныеЛица КАК ЗаписьОтветственныхЛиц
	|	По ЗаписьОтветственныхЛиц.КонвертацияВыполнена
	|		И ЗаписьОтветственныхЛиц.ТипОтветственногоЛица = Значение(Перечисление.УдалитьТипыОтветственныхЛиц.Руководитель)
	|		И ЗаписьОтветственныхЛиц.Период < ТаблицаДокументов.ДатаДокумента
	|		И ЗаписьОтветственныхЛиц.Организация = ТаблицаДокументов.Организация
	|Сгруппировать по ТаблицаДокументов.Ссылка, ТаблицаДокументов.ДатаДокумента, ТаблицаДокументов.Организация
	|
	|;Выбрать
	|	ПериодЗаписиПодписиРуководителя.Ссылка
	|	,ПериодЗаписиПодписиРуководителя.ДатаДокумента
	|	,ПериодЗаписиПодписиРуководителя.Организация
	|	,ЗаписьОтветственныхЛиц.Подпись КАК ПодписьРуководителя
	|Поместить ДокументыИПодписиРуководителя
	|Из ПериодЗаписиПодписиРуководителя КАК ПериодЗаписиПодписиРуководителя
	|	Левое соединение РегистрСведений.УдалитьОтветственныеЛица КАК ЗаписьОтветственныхЛиц
	|	по ЗаписьОтветственныхЛиц.КонвертацияВыполнена
	|		И ЗаписьОтветственныхЛиц.ТипОтветственногоЛица = Значение(Перечисление.УдалитьТипыОтветственныхЛиц.Руководитель)
	|		И ЗаписьОтветственныхЛиц.Период = ПериодЗаписиПодписиРуководителя.ОтборПериода
	|		И ЗаписьОтветственныхЛиц.Организация = ПериодЗаписиПодписиРуководителя.Организация
	|
	|;Выбрать
	|	Максимум(ЗаписьОтветственныхЛиц.Период) КАК ОтборПериода
	|	,ТаблицаДокументов.Ссылка
	|	,ТаблицаДокументов.ДатаДокумента
	|	,ТаблицаДокументов.Организация
	|Поместить ПериодЗаписиПодписиГлавногоБухгалтера
	|Из ТаблицаДокументов КАК ТаблицаДокументов
	|	Левое соединение РегистрСведений.УдалитьОтветственныеЛица КАК ЗаписьОтветственныхЛиц
	|	По ЗаписьОтветственныхЛиц.КонвертацияВыполнена
	|		И ЗаписьОтветственныхЛиц.ТипОтветственногоЛица = Значение(Перечисление.УдалитьТипыОтветственныхЛиц.ГлавныйБухгалтер)
	|		И ЗаписьОтветственныхЛиц.Период < ТаблицаДокументов.ДатаДокумента
	|		И ЗаписьОтветственныхЛиц.Организация = ТаблицаДокументов.Организация
	|Сгруппировать по ТаблицаДокументов.Ссылка, ТаблицаДокументов.ДатаДокумента, ТаблицаДокументов.Организация
	|
	|;Выбрать
	|	ПериодЗаписиПодписиГлавногоБухгалтера.Ссылка
	|	,ПериодЗаписиПодписиГлавногоБухгалтера.ДатаДокумента
	|	,ПериодЗаписиПодписиГлавногоБухгалтера.Организация
	|	,ЗаписьОтветственныхЛиц.Подпись КАК ПодписьГлавногоБухгалтера
	|Поместить ДокументыИПодписиГлавногоБухгалтера
	|Из ПериодЗаписиПодписиГлавногоБухгалтера КАК ПериодЗаписиПодписиГлавногоБухгалтера
	|	Левое соединение РегистрСведений.УдалитьОтветственныеЛица КАК ЗаписьОтветственныхЛиц
	|	по ЗаписьОтветственныхЛиц.КонвертацияВыполнена
	|		И ЗаписьОтветственныхЛиц.ТипОтветственногоЛица = Значение(Перечисление.УдалитьТипыОтветственныхЛиц.ГлавныйБухгалтер)
	|		И ЗаписьОтветственныхЛиц.Период = ПериодЗаписиПодписиГлавногоБухгалтера.ОтборПериода
	|		И ЗаписьОтветственныхЛиц.Организация = ПериодЗаписиПодписиГлавногоБухгалтера.Организация
	|
	|;Выбрать
	|	Максимум(ЗаписьОтветственныхЛиц.Период) КАК ОтборПериода
	|	,ТаблицаДокументов.Ссылка
	|	,ТаблицаДокументов.ДатаДокумента
	|	,ТаблицаДокументов.Организация
	|Поместить ПериодЗаписиПодписиКладовщика
	|Из ТаблицаДокументов КАК ТаблицаДокументов
	|	Левое соединение РегистрСведений.УдалитьОтветственныеЛица КАК ЗаписьОтветственныхЛиц
	|	По ЗаписьОтветственныхЛиц.КонвертацияВыполнена
	|		И ЗаписьОтветственныхЛиц.ТипОтветственногоЛица = Значение(Перечисление.УдалитьТипыОтветственныхЛиц.Кладовщик)
	|		И ЗаписьОтветственныхЛиц.Период < ТаблицаДокументов.ДатаДокумента
	|		И ЗаписьОтветственныхЛиц.Организация = ТаблицаДокументов.Организация
	|Сгруппировать по ТаблицаДокументов.Ссылка, ТаблицаДокументов.ДатаДокумента, ТаблицаДокументов.Организация
	|
	|;Выбрать
	|	ПериодЗаписиПодписиКладовщика.Ссылка
	|	,ПериодЗаписиПодписиКладовщика.ДатаДокумента
	|	,ПериодЗаписиПодписиКладовщика.Организация
	|	,ЗаписьОтветственныхЛиц.Подпись КАК ПодписьКладовщика
	|Поместить ДокументыИПодписиКладовщика
	|Из ПериодЗаписиПодписиКладовщика КАК ПериодЗаписиПодписиКладовщика
	|	Левое соединение РегистрСведений.УдалитьОтветственныеЛица КАК ЗаписьОтветственныхЛиц
	|	по ЗаписьОтветственныхЛиц.КонвертацияВыполнена
	|		И ЗаписьОтветственныхЛиц.ТипОтветственногоЛица = Значение(Перечисление.УдалитьТипыОтветственныхЛиц.Кладовщик)
	|		И ЗаписьОтветственныхЛиц.Период = ПериодЗаписиПодписиКладовщика.ОтборПериода
	|		И ЗаписьОтветственныхЛиц.Организация = ПериодЗаписиПодписиКладовщика.Организация
	|
	|;Выбрать
	|	ДокументыИПодписиРуководителя.Ссылка
	|	,ДокументыИПодписиРуководителя.ПодписьРуководителя КАК ПодписьРуководителя
	|	,ДокументыИПодписиГлавногоБухгалтера.ПодписьГлавногоБухгалтера КАК ПодписьГлавногоБухгалтера
	|	,ДокументыИПодписиКладовщика.ПодписьКладовщика КАК ПодписьКладовщика
	|Из ДокументыИПодписиРуководителя КАК ДокументыИПодписиРуководителя
	|	Левое соединение ДокументыИПодписиГлавногоБухгалтера КАК ДокументыИПодписиГлавногоБухгалтера
	|	по ДокументыИПодписиРуководителя.Ссылка = ДокументыИПодписиГлавногоБухгалтера.Ссылка
	|	Левое соединение ДокументыИПодписиКладовщика КАК ДокументыИПодписиКладовщика
	|	по ДокументыИПодписиРуководителя.Ссылка = ДокументыИПодписиКладовщика.Ссылка";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
		
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Попытка
			
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ДокументОбъект.Заблокировать();
			ДокументОбъект.ПодписьРуководителя = Выборка.ПодписьРуководителя;
			ДокументОбъект.ПодписьГлавногоБухгалтера = Выборка.ПодписьГлавногоБухгалтера;
			ДокументОбъект.ПодписьКладовщика = Выборка.ПодписьКладовщика;
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект, Ложь, Ложь);
			
		Исключение
			
			ЗаписьЖурналаРегистрации("ПодписиДокументов", УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Истина;
	
КонецПроцедуры

Процедура ПодписиВДокументах_КорректировкаРеализации(Параметры = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"Выбрать первые 100
	|	ДокументКорректировкаРеализации.Ссылка
	|	,ДокументКорректировкаРеализации.Дата КАК ДатаДокумента
	|	,ДокументКорректировкаРеализации.Организация
	|	,ДокументКорректировкаРеализации.УдалитьОтпустил КАК УдалитьОтпустил
	|	,ДокументКорректировкаРеализации.УдалитьОтпустил.ФизЛицо КАК УдалитьОтпустилФизЛицо
	|	,ДокументКорректировкаРеализации.УдалитьРуководитель КАК УдалитьРуководитель
	|	,ДокументКорректировкаРеализации.УдалитьРуководитель.ФизЛицо КАК УдалитьРуководительФизЛицо
	|	,ДокументКорректировкаРеализации.УдалитьГлавныйБухгалтер КАК УдалитьГлавныйБухгалтер
	|	,ДокументКорректировкаРеализации.УдалитьГлавныйБухгалтер.ФизЛицо КАК УдалитьГлавныйБухгалтерФизЛицо
	|Из Документ.КорректировкаРеализации КАК ДокументКорректировкаРеализации
	|Где НЕ ДокументКорректировкаРеализации.ПометкаУдаления
	|Упорядочить по ДокументКорректировкаРеализации.Дата Убыв";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
		
	КонецЕсли;
	
	СтруктураПодписей = Новый Структура;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтруктураПодписей.Очистить();
		
		Попытка
			
			ПодписьРуководителя = НайтиПодписьСотрудника(Выборка.Организация, Выборка.УдалитьРуководитель);
			Если ПодписьРуководителя = Неопределено Тогда
				
				ПодписьРуководителя = НайтиПодписьФизическогоЛица(Выборка.УдалитьРуководительФизЛицо);
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ПодписьРуководителя) Тогда
				
				СтруктураПодписей.Вставить("ПодписьРуководителя", ПодписьРуководителя);
				
			КонецЕсли;
			
			ПодписьГлавногоБухгалтера = НайтиПодписьСотрудника(Выборка.Организация, Выборка.УдалитьГлавныйБухгалтер);
			Если ПодписьГлавногоБухгалтера = Неопределено Тогда
				
				ПодписьГлавногоБухгалтера = НайтиПодписьФизическогоЛица(Выборка.УдалитьГлавныйБухгалтерФизЛицо);
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ПодписьГлавногоБухгалтера) Тогда
				
				СтруктураПодписей.Вставить("ПодписьГлавногоБухгалтера", ПодписьГлавногоБухгалтера);
				
			КонецЕсли;
			
			ПодписьКладовщика = НайтиПодписьСотрудника(Выборка.Организация, Выборка.УдалитьОтпустил);
			Если ПодписьКладовщика = Неопределено Тогда
				
				ПодписьКладовщика = НайтиПодписьФизическогоЛица(Выборка.УдалитьОтпустилФизЛицо);
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ПодписьКладовщика) Тогда
				
				СтруктураПодписей.Вставить("ПодписьКладовщика", ПодписьКладовщика);
				
			КонецЕсли;
			
			Если СтруктураПодписей.Количество() > 0 Тогда
				
				ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
				ДокументОбъект.Заблокировать();
				ЗаполнитьЗначенияСвойств(ДокументОбъект, СтруктураПодписей);
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект, Ложь, Ложь);
				
			КонецЕсли;
			
		Исключение
			
			ЗаписьЖурналаРегистрации("ПодписиДокументов", УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Истина;
	
КонецПроцедуры

Процедура ПодписиВДокументах_ОтчетОПереработке(Параметры = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"Выбрать первые 100
	|	ДокументОтчетОПереработке.Ссылка
	|	,ДокументОтчетОПереработке.Дата КАК ДатаДокумента
	|	,ДокументОтчетОПереработке.Организация
	|	,ДокументОтчетОПереработке.УдалитьОтпустил КАК УдалитьОтпустил
	|	,ДокументОтчетОПереработке.УдалитьОтпустил.ФизЛицо КАК УдалитьОтпустилФизЛицо
	|	,ДокументОтчетОПереработке.УдалитьРуководитель КАК УдалитьРуководитель
	|	,ДокументОтчетОПереработке.УдалитьРуководитель.ФизЛицо КАК УдалитьРуководительФизЛицо
	|	,ДокументОтчетОПереработке.УдалитьГлавныйБухгалтер КАК УдалитьГлавныйБухгалтер
	|	,ДокументОтчетОПереработке.УдалитьГлавныйБухгалтер.ФизЛицо КАК УдалитьГлавныйБухгалтерФизЛицо
	|Из Документ.ОтчетОПереработке КАК ДокументОтчетОПереработке
	|Где НЕ ДокументОтчетОПереработке.ПометкаУдаления
	|Упорядочить по ДокументОтчетОПереработке.Дата Убыв";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
		
	КонецЕсли;
	
	СтруктураПодписей = Новый Структура;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтруктураПодписей.Очистить();
		
		Попытка
			
			ПодписьРуководителя = НайтиПодписьСотрудника(Выборка.Организация, Выборка.УдалитьРуководитель);
			Если ПодписьРуководителя = Неопределено Тогда
				
				ПодписьРуководителя = НайтиПодписьФизическогоЛица(Выборка.УдалитьРуководительФизЛицо);
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ПодписьРуководителя) Тогда
				
				СтруктураПодписей.Вставить("ПодписьРуководителя", ПодписьРуководителя);
				
			КонецЕсли;
			
			ПодписьГлавногоБухгалтера = НайтиПодписьСотрудника(Выборка.Организация, Выборка.УдалитьГлавныйБухгалтер);
			Если ПодписьГлавногоБухгалтера = Неопределено Тогда
				
				ПодписьГлавногоБухгалтера = НайтиПодписьФизическогоЛица(Выборка.УдалитьГлавныйБухгалтерФизЛицо);
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ПодписьГлавногоБухгалтера) Тогда
				
				СтруктураПодписей.Вставить("ПодписьГлавногоБухгалтера", ПодписьГлавногоБухгалтера);
				
			КонецЕсли;
			
			ПодписьКладовщика = НайтиПодписьСотрудника(Выборка.Организация, Выборка.УдалитьОтпустил);
			Если ПодписьКладовщика = Неопределено Тогда
				
				ПодписьКладовщика = НайтиПодписьФизическогоЛица(Выборка.УдалитьОтпустилФизЛицо);
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ПодписьКладовщика) Тогда
				
				СтруктураПодписей.Вставить("ПодписьКладовщика", ПодписьКладовщика);
				
			КонецЕсли;
			
			Если СтруктураПодписей.Количество() > 0 Тогда
				
				ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
				ДокументОбъект.Заблокировать();
				ЗаполнитьЗначенияСвойств(ДокументОбъект, СтруктураПодписей);
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект, Ложь, Ложь);
				
			КонецЕсли;
			
		Исключение
			
			ЗаписьЖурналаРегистрации("ПодписиДокументов", УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Истина;
	
КонецПроцедуры

Процедура ПодписиВДокументах_ОтчетОРозничныхПродажах(Параметры = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"Выбрать первые 500
	|	ДокументОтчетОРозничныхПродажах.Ссылка
	|	,ДокументОтчетОРозничныхПродажах.Дата КАК ДатаДокумента
	|	,ДокументОтчетОРозничныхПродажах.Организация
	|Поместить ТаблицаДокументов
	|Из Документ.ОтчетОРозничныхПродажах КАК ДокументОтчетОРозничныхПродажах
	|Где НЕ ДокументОтчетОРозничныхПродажах.ПометкаУдаления
	|Упорядочить по ДокументОтчетОРозничныхПродажах.Дата Убыв
	|Индексировать по ДатаДокумента, Организация
	|
	|;Выбрать
	|	Максимум(ЗаписьОтветственныхЛиц.Период) КАК ОтборПериода
	|	,ТаблицаДокументов.Ссылка
	|	,ТаблицаДокументов.ДатаДокумента
	|	,ТаблицаДокументов.Организация
	|Поместить ПериодЗаписиПодписиРуководителя
	|Из ТаблицаДокументов КАК ТаблицаДокументов
	|	Левое соединение РегистрСведений.УдалитьОтветственныеЛица КАК ЗаписьОтветственныхЛиц
	|	По ЗаписьОтветственныхЛиц.КонвертацияВыполнена
	|		И ЗаписьОтветственныхЛиц.ТипОтветственногоЛица = Значение(Перечисление.УдалитьТипыОтветственныхЛиц.Руководитель)
	|		И ЗаписьОтветственныхЛиц.Период < ТаблицаДокументов.ДатаДокумента
	|		И ЗаписьОтветственныхЛиц.Организация = ТаблицаДокументов.Организация
	|Сгруппировать по ТаблицаДокументов.Ссылка, ТаблицаДокументов.ДатаДокумента, ТаблицаДокументов.Организация
	|
	|;Выбрать
	|	ПериодЗаписиПодписиРуководителя.Ссылка
	|	,ПериодЗаписиПодписиРуководителя.ДатаДокумента
	|	,ПериодЗаписиПодписиРуководителя.Организация
	|	,ЗаписьОтветственныхЛиц.Подпись КАК ПодписьРуководителя
	|Поместить ДокументыИПодписиРуководителя
	|Из ПериодЗаписиПодписиРуководителя КАК ПериодЗаписиПодписиРуководителя
	|	Левое соединение РегистрСведений.УдалитьОтветственныеЛица КАК ЗаписьОтветственныхЛиц
	|	по ЗаписьОтветственныхЛиц.КонвертацияВыполнена
	|		И ЗаписьОтветственныхЛиц.ТипОтветственногоЛица = Значение(Перечисление.УдалитьТипыОтветственныхЛиц.Руководитель)
	|		И ЗаписьОтветственныхЛиц.Период = ПериодЗаписиПодписиРуководителя.ОтборПериода
	|		И ЗаписьОтветственныхЛиц.Организация = ПериодЗаписиПодписиРуководителя.Организация
	|
	|;Выбрать
	|	Максимум(ЗаписьОтветственныхЛиц.Период) КАК ОтборПериода
	|	,ТаблицаДокументов.Ссылка
	|	,ТаблицаДокументов.ДатаДокумента
	|	,ТаблицаДокументов.Организация
	|Поместить ПериодЗаписиПодписиГлавногоБухгалтера
	|Из ТаблицаДокументов КАК ТаблицаДокументов
	|	Левое соединение РегистрСведений.УдалитьОтветственныеЛица КАК ЗаписьОтветственныхЛиц
	|	По ЗаписьОтветственныхЛиц.КонвертацияВыполнена
	|		И ЗаписьОтветственныхЛиц.ТипОтветственногоЛица = Значение(Перечисление.УдалитьТипыОтветственныхЛиц.ГлавныйБухгалтер)
	|		И ЗаписьОтветственныхЛиц.Период < ТаблицаДокументов.ДатаДокумента
	|		И ЗаписьОтветственныхЛиц.Организация = ТаблицаДокументов.Организация
	|Сгруппировать по ТаблицаДокументов.Ссылка, ТаблицаДокументов.ДатаДокумента, ТаблицаДокументов.Организация
	|
	|;Выбрать
	|	ПериодЗаписиПодписиГлавногоБухгалтера.Ссылка
	|	,ПериодЗаписиПодписиГлавногоБухгалтера.ДатаДокумента
	|	,ПериодЗаписиПодписиГлавногоБухгалтера.Организация
	|	,ЗаписьОтветственныхЛиц.Подпись КАК ПодписьГлавногоБухгалтера
	|Поместить ДокументыИПодписиГлавногоБухгалтера
	|Из ПериодЗаписиПодписиГлавногоБухгалтера КАК ПериодЗаписиПодписиГлавногоБухгалтера
	|	Левое соединение РегистрСведений.УдалитьОтветственныеЛица КАК ЗаписьОтветственныхЛиц
	|	по ЗаписьОтветственныхЛиц.КонвертацияВыполнена
	|		И ЗаписьОтветственныхЛиц.ТипОтветственногоЛица = Значение(Перечисление.УдалитьТипыОтветственныхЛиц.ГлавныйБухгалтер)
	|		И ЗаписьОтветственныхЛиц.Период = ПериодЗаписиПодписиГлавногоБухгалтера.ОтборПериода
	|		И ЗаписьОтветственныхЛиц.Организация = ПериодЗаписиПодписиГлавногоБухгалтера.Организация
	|
	|;Выбрать
	|	Максимум(ЗаписьОтветственныхЛиц.Период) КАК ОтборПериода
	|	,ТаблицаДокументов.Ссылка
	|	,ТаблицаДокументов.ДатаДокумента
	|	,ТаблицаДокументов.Организация
	|Поместить ПериодЗаписиПодписиКладовщика
	|Из ТаблицаДокументов КАК ТаблицаДокументов
	|	Левое соединение РегистрСведений.УдалитьОтветственныеЛица КАК ЗаписьОтветственныхЛиц
	|	По ЗаписьОтветственныхЛиц.КонвертацияВыполнена
	|		И ЗаписьОтветственныхЛиц.ТипОтветственногоЛица = Значение(Перечисление.УдалитьТипыОтветственныхЛиц.Кладовщик)
	|		И ЗаписьОтветственныхЛиц.Период < ТаблицаДокументов.ДатаДокумента
	|		И ЗаписьОтветственныхЛиц.Организация = ТаблицаДокументов.Организация
	|Сгруппировать по ТаблицаДокументов.Ссылка, ТаблицаДокументов.ДатаДокумента, ТаблицаДокументов.Организация
	|
	|;Выбрать
	|	ПериодЗаписиПодписиКладовщика.Ссылка
	|	,ПериодЗаписиПодписиКладовщика.ДатаДокумента
	|	,ПериодЗаписиПодписиКладовщика.Организация
	|	,ЗаписьОтветственныхЛиц.Подпись КАК ПодписьКладовщика
	|Поместить ДокументыИПодписиКладовщика
	|Из ПериодЗаписиПодписиКладовщика КАК ПериодЗаписиПодписиКладовщика
	|	Левое соединение РегистрСведений.УдалитьОтветственныеЛица КАК ЗаписьОтветственныхЛиц
	|	по ЗаписьОтветственныхЛиц.КонвертацияВыполнена
	|		И ЗаписьОтветственныхЛиц.ТипОтветственногоЛица = Значение(Перечисление.УдалитьТипыОтветственныхЛиц.Кладовщик)
	|		И ЗаписьОтветственныхЛиц.Период = ПериодЗаписиПодписиКладовщика.ОтборПериода
	|		И ЗаписьОтветственныхЛиц.Организация = ПериодЗаписиПодписиКладовщика.Организация
	|
	|;Выбрать
	|	Максимум(ЗаписьОтветственныхЛиц.Период) КАК ОтборПериода
	|	,ТаблицаДокументов.Ссылка
	|	,ТаблицаДокументов.ДатаДокумента
	|	,ТаблицаДокументов.Организация
	|Поместить ПериодЗаписиПодписиКассира
	|Из ТаблицаДокументов КАК ТаблицаДокументов
	|	Левое соединение РегистрСведений.УдалитьОтветственныеЛица КАК ЗаписьОтветственныхЛиц
	|	По ЗаписьОтветственныхЛиц.КонвертацияВыполнена
	|		И ЗаписьОтветственныхЛиц.ТипОтветственногоЛица = Значение(Перечисление.УдалитьТипыОтветственныхЛиц.Кассир)
	|		И ЗаписьОтветственныхЛиц.Период < ТаблицаДокументов.ДатаДокумента
	|		И ЗаписьОтветственныхЛиц.Организация = ТаблицаДокументов.Организация
	|Сгруппировать по ТаблицаДокументов.Ссылка, ТаблицаДокументов.ДатаДокумента, ТаблицаДокументов.Организация
	|
	|;Выбрать
	|	ПериодЗаписиПодписиКассира.Ссылка
	|	,ПериодЗаписиПодписиКассира.ДатаДокумента
	|	,ПериодЗаписиПодписиКассира.Организация
	|	,ЗаписьОтветственныхЛиц.Подпись КАК ПодписьКассира
	|Поместить ДокументыИПодписиКассира
	|Из ПериодЗаписиПодписиКассира КАК ПериодЗаписиПодписиКассира
	|	Левое соединение РегистрСведений.УдалитьОтветственныеЛица КАК ЗаписьОтветственныхЛиц
	|	по ЗаписьОтветственныхЛиц.КонвертацияВыполнена
	|		И ЗаписьОтветственныхЛиц.ТипОтветственногоЛица = Значение(Перечисление.УдалитьТипыОтветственныхЛиц.Кассир)
	|		И ЗаписьОтветственныхЛиц.Период = ПериодЗаписиПодписиКассира.ОтборПериода
	|		И ЗаписьОтветственныхЛиц.Организация = ПериодЗаписиПодписиКассира.Организация
	|
	|;Выбрать
	|	ДокументыИПодписиРуководителя.Ссылка
	|	,ДокументыИПодписиРуководителя.ПодписьРуководителя КАК ПодписьРуководителя
	|	,ДокументыИПодписиГлавногоБухгалтера.ПодписьГлавногоБухгалтера КАК ПодписьГлавногоБухгалтера
	|	,ДокументыИПодписиКладовщика.ПодписьКладовщика КАК ПодписьКладовщика
	|	,ДокументыИПодписиКассира.ПодписьКассира КАК ПодписьКассира
	|Из ДокументыИПодписиРуководителя КАК ДокументыИПодписиРуководителя
	|	Левое соединение ДокументыИПодписиГлавногоБухгалтера КАК ДокументыИПодписиГлавногоБухгалтера
	|	по ДокументыИПодписиРуководителя.Ссылка = ДокументыИПодписиГлавногоБухгалтера.Ссылка
	|	Левое соединение ДокументыИПодписиКладовщика КАК ДокументыИПодписиКладовщика
	|	по ДокументыИПодписиРуководителя.Ссылка = ДокументыИПодписиКладовщика.Ссылка
	|	Левое соединение ДокументыИПодписиКассира КАК ДокументыИПодписиКассира
	|	по ДокументыИПодписиРуководителя.Ссылка = ДокументыИПодписиКассира.Ссылка";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
		
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Попытка
			
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ДокументОбъект.Заблокировать();
			ДокументОбъект.ПодписьРуководителя = Выборка.ПодписьРуководителя;
			ДокументОбъект.ПодписьСтаршегоКассира = Выборка.ПодписьГлавногоБухгалтера;
			ДокументОбъект.ПодписьКассира = Выборка.ПодписьКассира;
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект, Ложь, Ложь);
			
		Исключение
			
			ЗаписьЖурналаРегистрации("ПодписиДокументов", УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Истина;
	
КонецПроцедуры

Процедура ПодписиВДокументах_ПеремещениеЗапасов(Параметры = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"Выбрать первые 100
	|	ДокументПеремещениеЗапасов.Ссылка
	|	,ДокументПеремещениеЗапасов.Дата КАК ДатаДокумента
	|	,ДокументПеремещениеЗапасов.Организация
	|	,ДокументПеремещениеЗапасов.СтруктурнаяЕдиница.ПодписьМол КАК ПодписьКладовщикаОтправил
	|	,ДокументПеремещениеЗапасов.СтруктурнаяЕдиницаПолучатель.ПодписьМол КАК ПодписьКладовщикаПолучил
	|	,ДокументПеремещениеЗапасов.УдалитьОтпустил КАК УдалитьОтпустил
	|	,ДокументПеремещениеЗапасов.УдалитьОтпустил.ФизЛицо КАК УдалитьОтпустилФизЛицо
	|	,ДокументПеремещениеЗапасов.УдалитьРуководитель КАК УдалитьРуководитель
	|	,ДокументПеремещениеЗапасов.УдалитьРуководитель.ФизЛицо КАК УдалитьРуководительФизЛицо
	|	,ДокументПеремещениеЗапасов.УдалитьГлавныйБухгалтер КАК УдалитьГлавныйБухгалтер
	|	,ДокументПеремещениеЗапасов.УдалитьГлавныйБухгалтер.ФизЛицо КАК УдалитьГлавныйБухгалтерФизЛицо
	|Из Документ.ПеремещениеЗапасов КАК ДокументПеремещениеЗапасов
	|Где НЕ ДокументПеремещениеЗапасов.ПометкаУдаления
	|Упорядочить по ДокументПеремещениеЗапасов.Дата Убыв";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
		
	КонецЕсли;
	
	СтруктураПодписей = Новый Структура;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтруктураПодписей.Очистить();
		
		Попытка
			
			ПодписьРуководителя = НайтиПодписьСотрудника(Выборка.Организация, Выборка.УдалитьРуководитель);
			Если ПодписьРуководителя = Неопределено Тогда
				
				ПодписьРуководителя = НайтиПодписьФизическогоЛица(Выборка.УдалитьРуководительФизЛицо);
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ПодписьРуководителя) Тогда
				
				СтруктураПодписей.Вставить("ПодписьРуководителя", ПодписьРуководителя);
				
			КонецЕсли;
			
			ПодписьГлавногоБухгалтера = НайтиПодписьСотрудника(Выборка.Организация, Выборка.УдалитьГлавныйБухгалтер);
			Если ПодписьГлавногоБухгалтера = Неопределено Тогда
				
				ПодписьГлавногоБухгалтера = НайтиПодписьФизическогоЛица(Выборка.УдалитьГлавныйБухгалтерФизЛицо);
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ПодписьГлавногоБухгалтера) Тогда
				
				СтруктураПодписей.Вставить("ПодписьГлавногоБухгалтера", ПодписьГлавногоБухгалтера);
				
			КонецЕсли;
			
			ПодписьКладовщика = НайтиПодписьСотрудника(Выборка.Организация, Выборка.УдалитьОтпустил);
			Если ПодписьКладовщика = Неопределено Тогда
				
				ПодписьКладовщика = НайтиПодписьФизическогоЛица(Выборка.УдалитьОтпустилФизЛицо);
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ПодписьКладовщика) Тогда
				
				СтруктураПодписей.Вставить("ПодписьКладовщика", ПодписьКладовщика);
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Выборка.ПодписьКладовщикаОтправил) Тогда
				
				СтруктураПодписей.Вставить("ПодписьКладовщикаОтправил", Выборка.ПодписьКладовщикаОтправил);
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Выборка.ПодписьКладовщикаПолучил) Тогда
				
				СтруктураПодписей.Вставить("ПодписьКладовщикаПолучил", Выборка.ПодписьКладовщикаПолучил);
				
			КонецЕсли;
			
			Если СтруктураПодписей.Количество() > 0 Тогда
				
				ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
				ДокументОбъект.Заблокировать();
				ЗаполнитьЗначенияСвойств(ДокументОбъект, СтруктураПодписей);
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект, Ложь, Ложь);
				
			КонецЕсли;
			
		Исключение
			
			ЗаписьЖурналаРегистрации("ПодписиДокументов", УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Истина;
	
КонецПроцедуры

Процедура ПодписиВДокументах_ПлатежнаяВедомость(Параметры = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"Выбрать первые 100
	|	ДокументПлатежнаяВедомость.Ссылка
	|	,ДокументПлатежнаяВедомость.Дата КАК ДатаДокумента
	|	,ДокументПлатежнаяВедомость.Организация
	|Поместить ТаблицаДокументов
	|Из Документ.ПлатежнаяВедомость КАК ДокументПлатежнаяВедомость
	|Где НЕ ДокументПлатежнаяВедомость.ПометкаУдаления
	|Упорядочить по ДокументПлатежнаяВедомость.Дата Убыв
	|Индексировать по ДатаДокумента, Организация
	|
	|;Выбрать
	|	Максимум(ЗаписьОтветственныхЛиц.Период) КАК ОтборПериода
	|	,ТаблицаДокументов.Ссылка
	|	,ТаблицаДокументов.ДатаДокумента
	|	,ТаблицаДокументов.Организация
	|Поместить ПериодЗаписиПодписиРуководителя
	|Из ТаблицаДокументов КАК ТаблицаДокументов
	|	Левое соединение РегистрСведений.УдалитьОтветственныеЛица КАК ЗаписьОтветственныхЛиц
	|	По ЗаписьОтветственныхЛиц.КонвертацияВыполнена
	|		И ЗаписьОтветственныхЛиц.ТипОтветственногоЛица = Значение(Перечисление.УдалитьТипыОтветственныхЛиц.Руководитель)
	|		И ЗаписьОтветственныхЛиц.Период < ТаблицаДокументов.ДатаДокумента
	|		И ЗаписьОтветственныхЛиц.Организация = ТаблицаДокументов.Организация
	|Сгруппировать по ТаблицаДокументов.Ссылка, ТаблицаДокументов.ДатаДокумента, ТаблицаДокументов.Организация
	|
	|;Выбрать
	|	ПериодЗаписиПодписиРуководителя.Ссылка
	|	,ПериодЗаписиПодписиРуководителя.ДатаДокумента
	|	,ПериодЗаписиПодписиРуководителя.Организация
	|	,ЗаписьОтветственныхЛиц.Подпись КАК ПодписьРуководителя
	|Поместить ДокументыИПодписиРуководителя
	|Из ПериодЗаписиПодписиРуководителя КАК ПериодЗаписиПодписиРуководителя
	|	Левое соединение РегистрСведений.УдалитьОтветственныеЛица КАК ЗаписьОтветственныхЛиц
	|	по ЗаписьОтветственныхЛиц.КонвертацияВыполнена
	|		И ЗаписьОтветственныхЛиц.ТипОтветственногоЛица = Значение(Перечисление.УдалитьТипыОтветственныхЛиц.Руководитель)
	|		И ЗаписьОтветственныхЛиц.Период = ПериодЗаписиПодписиРуководителя.ОтборПериода
	|		И ЗаписьОтветственныхЛиц.Организация = ПериодЗаписиПодписиРуководителя.Организация
	|
	|;Выбрать
	|	Максимум(ЗаписьОтветственныхЛиц.Период) КАК ОтборПериода
	|	,ТаблицаДокументов.Ссылка
	|	,ТаблицаДокументов.ДатаДокумента
	|	,ТаблицаДокументов.Организация
	|Поместить ПериодЗаписиПодписиГлавногоБухгалтера
	|Из ТаблицаДокументов КАК ТаблицаДокументов
	|	Левое соединение РегистрСведений.УдалитьОтветственныеЛица КАК ЗаписьОтветственныхЛиц
	|	По ЗаписьОтветственныхЛиц.КонвертацияВыполнена
	|		И ЗаписьОтветственныхЛиц.ТипОтветственногоЛица = Значение(Перечисление.УдалитьТипыОтветственныхЛиц.ГлавныйБухгалтер)
	|		И ЗаписьОтветственныхЛиц.Период < ТаблицаДокументов.ДатаДокумента
	|		И ЗаписьОтветственныхЛиц.Организация = ТаблицаДокументов.Организация
	|Сгруппировать по ТаблицаДокументов.Ссылка, ТаблицаДокументов.ДатаДокумента, ТаблицаДокументов.Организация
	|
	|;Выбрать
	|	ПериодЗаписиПодписиГлавногоБухгалтера.Ссылка
	|	,ПериодЗаписиПодписиГлавногоБухгалтера.ДатаДокумента
	|	,ПериодЗаписиПодписиГлавногоБухгалтера.Организация
	|	,ЗаписьОтветственныхЛиц.Подпись КАК ПодписьГлавногоБухгалтера
	|Поместить ДокументыИПодписиГлавногоБухгалтера
	|Из ПериодЗаписиПодписиГлавногоБухгалтера КАК ПериодЗаписиПодписиГлавногоБухгалтера
	|	Левое соединение РегистрСведений.УдалитьОтветственныеЛица КАК ЗаписьОтветственныхЛиц
	|	по ЗаписьОтветственныхЛиц.КонвертацияВыполнена
	|		И ЗаписьОтветственныхЛиц.ТипОтветственногоЛица = Значение(Перечисление.УдалитьТипыОтветственныхЛиц.ГлавныйБухгалтер)
	|		И ЗаписьОтветственныхЛиц.Период = ПериодЗаписиПодписиГлавногоБухгалтера.ОтборПериода
	|		И ЗаписьОтветственныхЛиц.Организация = ПериодЗаписиПодписиГлавногоБухгалтера.Организация
	|
	|;Выбрать
	|	ДокументыИПодписиРуководителя.Ссылка
	|	,ДокументыИПодписиРуководителя.ПодписьРуководителя КАК ПодписьРуководителя
	|	,ДокументыИПодписиГлавногоБухгалтера.ПодписьГлавногоБухгалтера КАК ПодписьГлавногоБухгалтера
	|Из ДокументыИПодписиРуководителя КАК ДокументыИПодписиРуководителя
	|	Левое соединение ДокументыИПодписиГлавногоБухгалтера КАК ДокументыИПодписиГлавногоБухгалтера
	|	по ДокументыИПодписиРуководителя.Ссылка = ДокументыИПодписиГлавногоБухгалтера.Ссылка
	|	";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
		
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Попытка
			
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ДокументОбъект.Заблокировать();
			ДокументОбъект.ПодписьРуководителя = Выборка.ПодписьРуководителя;
			ДокументОбъект.ПодписьГлавногоБухгалтера = Выборка.ПодписьГлавногоБухгалтера;
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект, Ложь, Ложь);
			
		Исключение
			
			ЗаписьЖурналаРегистрации("ПодписиДокументов", УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Истина;
	
КонецПроцедуры

Процедура ПодписиВДокументах_ПоступлениеВКассу(Параметры = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"Выбрать первые 100
	|	ДокументПоступлениеВКассу.Ссылка
	|	,ДокументПоступлениеВКассу.Дата КАК ДатаДокумента
	|	,ДокументПоступлениеВКассу.Организация
	|Поместить ТаблицаДокументов
	|Из Документ.ПоступлениеВКассу КАК ДокументПоступлениеВКассу
	|Где НЕ ДокументПоступлениеВКассу.ПометкаУдаления
	|Упорядочить по ДокументПоступлениеВКассу.Дата Убыв
	|Индексировать по ДатаДокумента, Организация
	|
	|;Выбрать
	|	Максимум(ЗаписьОтветственныхЛиц.Период) КАК ОтборПериода
	|	,ТаблицаДокументов.Ссылка
	|	,ТаблицаДокументов.ДатаДокумента
	|	,ТаблицаДокументов.Организация
	|Поместить ПериодЗаписиПодписиРуководителя
	|Из ТаблицаДокументов КАК ТаблицаДокументов
	|	Левое соединение РегистрСведений.УдалитьОтветственныеЛица КАК ЗаписьОтветственныхЛиц
	|	По ЗаписьОтветственныхЛиц.КонвертацияВыполнена
	|		И ЗаписьОтветственныхЛиц.ТипОтветственногоЛица = Значение(Перечисление.УдалитьТипыОтветственныхЛиц.Руководитель)
	|		И ЗаписьОтветственныхЛиц.Период < ТаблицаДокументов.ДатаДокумента
	|		И ЗаписьОтветственныхЛиц.Организация = ТаблицаДокументов.Организация
	|Сгруппировать по ТаблицаДокументов.Ссылка, ТаблицаДокументов.ДатаДокумента, ТаблицаДокументов.Организация
	|
	|;Выбрать
	|	ПериодЗаписиПодписиРуководителя.Ссылка
	|	,ПериодЗаписиПодписиРуководителя.ДатаДокумента
	|	,ПериодЗаписиПодписиРуководителя.Организация
	|	,ЗаписьОтветственныхЛиц.Подпись КАК ПодписьРуководителя
	|Поместить ДокументыИПодписиРуководителя
	|Из ПериодЗаписиПодписиРуководителя КАК ПериодЗаписиПодписиРуководителя
	|	Левое соединение РегистрСведений.УдалитьОтветственныеЛица КАК ЗаписьОтветственныхЛиц
	|	по ЗаписьОтветственныхЛиц.КонвертацияВыполнена
	|		И ЗаписьОтветственныхЛиц.ТипОтветственногоЛица = Значение(Перечисление.УдалитьТипыОтветственныхЛиц.Руководитель)
	|		И ЗаписьОтветственныхЛиц.Период = ПериодЗаписиПодписиРуководителя.ОтборПериода
	|		И ЗаписьОтветственныхЛиц.Организация = ПериодЗаписиПодписиРуководителя.Организация
	|
	|;Выбрать
	|	Максимум(ЗаписьОтветственныхЛиц.Период) КАК ОтборПериода
	|	,ТаблицаДокументов.Ссылка
	|	,ТаблицаДокументов.ДатаДокумента
	|	,ТаблицаДокументов.Организация
	|Поместить ПериодЗаписиПодписиГлавногоБухгалтера
	|Из ТаблицаДокументов КАК ТаблицаДокументов
	|	Левое соединение РегистрСведений.УдалитьОтветственныеЛица КАК ЗаписьОтветственныхЛиц
	|	По ЗаписьОтветственныхЛиц.КонвертацияВыполнена
	|		И ЗаписьОтветственныхЛиц.ТипОтветственногоЛица = Значение(Перечисление.УдалитьТипыОтветственныхЛиц.ГлавныйБухгалтер)
	|		И ЗаписьОтветственныхЛиц.Период < ТаблицаДокументов.ДатаДокумента
	|		И ЗаписьОтветственныхЛиц.Организация = ТаблицаДокументов.Организация
	|Сгруппировать по ТаблицаДокументов.Ссылка, ТаблицаДокументов.ДатаДокумента, ТаблицаДокументов.Организация
	|
	|;Выбрать
	|	ПериодЗаписиПодписиГлавногоБухгалтера.Ссылка
	|	,ПериодЗаписиПодписиГлавногоБухгалтера.ДатаДокумента
	|	,ПериодЗаписиПодписиГлавногоБухгалтера.Организация
	|	,ЗаписьОтветственныхЛиц.Подпись КАК ПодписьГлавногоБухгалтера
	|Поместить ДокументыИПодписиГлавногоБухгалтера
	|Из ПериодЗаписиПодписиГлавногоБухгалтера КАК ПериодЗаписиПодписиГлавногоБухгалтера
	|	Левое соединение РегистрСведений.УдалитьОтветственныеЛица КАК ЗаписьОтветственныхЛиц
	|	по ЗаписьОтветственныхЛиц.КонвертацияВыполнена
	|		И ЗаписьОтветственныхЛиц.ТипОтветственногоЛица = Значение(Перечисление.УдалитьТипыОтветственныхЛиц.ГлавныйБухгалтер)
	|		И ЗаписьОтветственныхЛиц.Период = ПериодЗаписиПодписиГлавногоБухгалтера.ОтборПериода
	|		И ЗаписьОтветственныхЛиц.Организация = ПериодЗаписиПодписиГлавногоБухгалтера.Организация
	|
	|;Выбрать
	|	Максимум(ЗаписьОтветственныхЛиц.Период) КАК ОтборПериода
	|	,ТаблицаДокументов.Ссылка
	|	,ТаблицаДокументов.ДатаДокумента
	|	,ТаблицаДокументов.Организация
	|Поместить ПериодЗаписиПодписиКладовщика
	|Из ТаблицаДокументов КАК ТаблицаДокументов
	|	Левое соединение РегистрСведений.УдалитьОтветственныеЛица КАК ЗаписьОтветственныхЛиц
	|	По ЗаписьОтветственныхЛиц.КонвертацияВыполнена
	|		И ЗаписьОтветственныхЛиц.ТипОтветственногоЛица = Значение(Перечисление.УдалитьТипыОтветственныхЛиц.Кладовщик)
	|		И ЗаписьОтветственныхЛиц.Период < ТаблицаДокументов.ДатаДокумента
	|		И ЗаписьОтветственныхЛиц.Организация = ТаблицаДокументов.Организация
	|Сгруппировать по ТаблицаДокументов.Ссылка, ТаблицаДокументов.ДатаДокумента, ТаблицаДокументов.Организация
	|
	|;Выбрать
	|	ПериодЗаписиПодписиКладовщика.Ссылка
	|	,ПериодЗаписиПодписиКладовщика.ДатаДокумента
	|	,ПериодЗаписиПодписиКладовщика.Организация
	|	,ЗаписьОтветственныхЛиц.Подпись КАК ПодписьКладовщика
	|Поместить ДокументыИПодписиКладовщика
	|Из ПериодЗаписиПодписиКладовщика КАК ПериодЗаписиПодписиКладовщика
	|	Левое соединение РегистрСведений.УдалитьОтветственныеЛица КАК ЗаписьОтветственныхЛиц
	|	по ЗаписьОтветственныхЛиц.КонвертацияВыполнена
	|		И ЗаписьОтветственныхЛиц.ТипОтветственногоЛица = Значение(Перечисление.УдалитьТипыОтветственныхЛиц.Кладовщик)
	|		И ЗаписьОтветственныхЛиц.Период = ПериодЗаписиПодписиКладовщика.ОтборПериода
	|		И ЗаписьОтветственныхЛиц.Организация = ПериодЗаписиПодписиКладовщика.Организация
	|
	|;Выбрать
	|	Максимум(ЗаписьОтветственныхЛиц.Период) КАК ОтборПериода
	|	,ТаблицаДокументов.Ссылка
	|	,ТаблицаДокументов.ДатаДокумента
	|	,ТаблицаДокументов.Организация
	|Поместить ПериодЗаписиПодписиКассира
	|Из ТаблицаДокументов КАК ТаблицаДокументов
	|	Левое соединение РегистрСведений.УдалитьОтветственныеЛица КАК ЗаписьОтветственныхЛиц
	|	По ЗаписьОтветственныхЛиц.КонвертацияВыполнена
	|		И ЗаписьОтветственныхЛиц.ТипОтветственногоЛица = Значение(Перечисление.УдалитьТипыОтветственныхЛиц.Кассир)
	|		И ЗаписьОтветственныхЛиц.Период < ТаблицаДокументов.ДатаДокумента
	|		И ЗаписьОтветственныхЛиц.Организация = ТаблицаДокументов.Организация
	|Сгруппировать по ТаблицаДокументов.Ссылка, ТаблицаДокументов.ДатаДокумента, ТаблицаДокументов.Организация
	|
	|;Выбрать
	|	ПериодЗаписиПодписиКассира.Ссылка
	|	,ПериодЗаписиПодписиКассира.ДатаДокумента
	|	,ПериодЗаписиПодписиКассира.Организация
	|	,ЗаписьОтветственныхЛиц.Подпись КАК ПодписьКассира
	|Поместить ДокументыИПодписиКассира
	|Из ПериодЗаписиПодписиКассира КАК ПериодЗаписиПодписиКассира
	|	Левое соединение РегистрСведений.УдалитьОтветственныеЛица КАК ЗаписьОтветственныхЛиц
	|	по ЗаписьОтветственныхЛиц.КонвертацияВыполнена
	|		И ЗаписьОтветственныхЛиц.ТипОтветственногоЛица = Значение(Перечисление.УдалитьТипыОтветственныхЛиц.Кассир)
	|		И ЗаписьОтветственныхЛиц.Период = ПериодЗаписиПодписиКассира.ОтборПериода
	|		И ЗаписьОтветственныхЛиц.Организация = ПериодЗаписиПодписиКассира.Организация
	|
	|;Выбрать
	|	ДокументыИПодписиРуководителя.Ссылка
	|	,ДокументыИПодписиРуководителя.ПодписьРуководителя КАК ПодписьРуководителя
	|	,ДокументыИПодписиГлавногоБухгалтера.ПодписьГлавногоБухгалтера КАК ПодписьГлавногоБухгалтера
	|	,ДокументыИПодписиКладовщика.ПодписьКладовщика КАК ПодписьКладовщика
	|	,ДокументыИПодписиКассира.ПодписьКассира КАК ПодписьКассира
	|Из ДокументыИПодписиРуководителя КАК ДокументыИПодписиРуководителя
	|	Левое соединение ДокументыИПодписиГлавногоБухгалтера КАК ДокументыИПодписиГлавногоБухгалтера
	|	по ДокументыИПодписиРуководителя.Ссылка = ДокументыИПодписиГлавногоБухгалтера.Ссылка
	|	Левое соединение ДокументыИПодписиКладовщика КАК ДокументыИПодписиКладовщика
	|	по ДокументыИПодписиРуководителя.Ссылка = ДокументыИПодписиКладовщика.Ссылка
	|	Левое соединение ДокументыИПодписиКассира КАК ДокументыИПодписиКассира
	|	по ДокументыИПодписиРуководителя.Ссылка = ДокументыИПодписиКассира.Ссылка";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
		
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Попытка
			
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ДокументОбъект.Заблокировать();
			ДокументОбъект.ПодписьГлавногоБухгалтера = Выборка.ПодписьГлавногоБухгалтера;
			ДокументОбъект.ПодписьКассира = Выборка.ПодписьКассира;
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект, Ложь, Ложь);
			
		Исключение
			
			ЗаписьЖурналаРегистрации("ПодписиДокументов", УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Истина;
	
КонецПроцедуры

Процедура ПодписиВДокументах_РасходДСПлан(Параметры = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"Выбрать первые 100
	|	ДокументРасходДСПлан.Ссылка
	|	,ДокументРасходДСПлан.Дата КАК ДатаДокумента
	|	,ДокументРасходДСПлан.Организация
	|Поместить ТаблицаДокументов
	|Из Документ.РасходДСПлан КАК ДокументРасходДСПлан
	|Где НЕ ДокументРасходДСПлан.ПометкаУдаления
	|Упорядочить по ДокументРасходДСПлан.Дата Убыв
	|Индексировать по ДатаДокумента, Организация
	|
	|;Выбрать
	|	Максимум(ЗаписьОтветственныхЛиц.Период) КАК ОтборПериода
	|	,ТаблицаДокументов.Ссылка
	|	,ТаблицаДокументов.ДатаДокумента
	|	,ТаблицаДокументов.Организация
	|Поместить ПериодЗаписиПодписиРуководителя
	|Из ТаблицаДокументов КАК ТаблицаДокументов
	|	Левое соединение РегистрСведений.УдалитьОтветственныеЛица КАК ЗаписьОтветственныхЛиц
	|	По ЗаписьОтветственныхЛиц.КонвертацияВыполнена
	|		И ЗаписьОтветственныхЛиц.ТипОтветственногоЛица = Значение(Перечисление.УдалитьТипыОтветственныхЛиц.Руководитель)
	|		И ЗаписьОтветственныхЛиц.Период < ТаблицаДокументов.ДатаДокумента
	|		И ЗаписьОтветственныхЛиц.Организация = ТаблицаДокументов.Организация
	|Сгруппировать по ТаблицаДокументов.Ссылка, ТаблицаДокументов.ДатаДокумента, ТаблицаДокументов.Организация
	|
	|;Выбрать
	|	ПериодЗаписиПодписиРуководителя.Ссылка
	|	,ПериодЗаписиПодписиРуководителя.ДатаДокумента
	|	,ПериодЗаписиПодписиРуководителя.Организация
	|	,ЗаписьОтветственныхЛиц.Подпись КАК ПодписьРуководителя
	|Поместить ДокументыИПодписиРуководителя
	|Из ПериодЗаписиПодписиРуководителя КАК ПериодЗаписиПодписиРуководителя
	|	Левое соединение РегистрСведений.УдалитьОтветственныеЛица КАК ЗаписьОтветственныхЛиц
	|	по ЗаписьОтветственныхЛиц.КонвертацияВыполнена
	|		И ЗаписьОтветственныхЛиц.ТипОтветственногоЛица = Значение(Перечисление.УдалитьТипыОтветственныхЛиц.Руководитель)
	|		И ЗаписьОтветственныхЛиц.Период = ПериодЗаписиПодписиРуководителя.ОтборПериода
	|		И ЗаписьОтветственныхЛиц.Организация = ПериодЗаписиПодписиРуководителя.Организация
	|
	|;Выбрать
	|	Максимум(ЗаписьОтветственныхЛиц.Период) КАК ОтборПериода
	|	,ТаблицаДокументов.Ссылка
	|	,ТаблицаДокументов.ДатаДокумента
	|	,ТаблицаДокументов.Организация
	|Поместить ПериодЗаписиПодписиГлавногоБухгалтера
	|Из ТаблицаДокументов КАК ТаблицаДокументов
	|	Левое соединение РегистрСведений.УдалитьОтветственныеЛица КАК ЗаписьОтветственныхЛиц
	|	По ЗаписьОтветственныхЛиц.КонвертацияВыполнена
	|		И ЗаписьОтветственныхЛиц.ТипОтветственногоЛица = Значение(Перечисление.УдалитьТипыОтветственныхЛиц.ГлавныйБухгалтер)
	|		И ЗаписьОтветственныхЛиц.Период < ТаблицаДокументов.ДатаДокумента
	|		И ЗаписьОтветственныхЛиц.Организация = ТаблицаДокументов.Организация
	|Сгруппировать по ТаблицаДокументов.Ссылка, ТаблицаДокументов.ДатаДокумента, ТаблицаДокументов.Организация
	|
	|;Выбрать
	|	ПериодЗаписиПодписиГлавногоБухгалтера.Ссылка
	|	,ПериодЗаписиПодписиГлавногоБухгалтера.ДатаДокумента
	|	,ПериодЗаписиПодписиГлавногоБухгалтера.Организация
	|	,ЗаписьОтветственныхЛиц.Подпись КАК ПодписьГлавногоБухгалтера
	|Поместить ДокументыИПодписиГлавногоБухгалтера
	|Из ПериодЗаписиПодписиГлавногоБухгалтера КАК ПериодЗаписиПодписиГлавногоБухгалтера
	|	Левое соединение РегистрСведений.УдалитьОтветственныеЛица КАК ЗаписьОтветственныхЛиц
	|	по ЗаписьОтветственныхЛиц.КонвертацияВыполнена
	|		И ЗаписьОтветственныхЛиц.ТипОтветственногоЛица = Значение(Перечисление.УдалитьТипыОтветственныхЛиц.ГлавныйБухгалтер)
	|		И ЗаписьОтветственныхЛиц.Период = ПериодЗаписиПодписиГлавногоБухгалтера.ОтборПериода
	|		И ЗаписьОтветственныхЛиц.Организация = ПериодЗаписиПодписиГлавногоБухгалтера.Организация
	|
	|;Выбрать
	|	Максимум(ЗаписьОтветственныхЛиц.Период) КАК ОтборПериода
	|	,ТаблицаДокументов.Ссылка
	|	,ТаблицаДокументов.ДатаДокумента
	|	,ТаблицаДокументов.Организация
	|Поместить ПериодЗаписиПодписиКладовщика
	|Из ТаблицаДокументов КАК ТаблицаДокументов
	|	Левое соединение РегистрСведений.УдалитьОтветственныеЛица КАК ЗаписьОтветственныхЛиц
	|	По ЗаписьОтветственныхЛиц.КонвертацияВыполнена
	|		И ЗаписьОтветственныхЛиц.ТипОтветственногоЛица = Значение(Перечисление.УдалитьТипыОтветственныхЛиц.Кладовщик)
	|		И ЗаписьОтветственныхЛиц.Период < ТаблицаДокументов.ДатаДокумента
	|		И ЗаписьОтветственныхЛиц.Организация = ТаблицаДокументов.Организация
	|Сгруппировать по ТаблицаДокументов.Ссылка, ТаблицаДокументов.ДатаДокумента, ТаблицаДокументов.Организация
	|
	|;Выбрать
	|	ПериодЗаписиПодписиКладовщика.Ссылка
	|	,ПериодЗаписиПодписиКладовщика.ДатаДокумента
	|	,ПериодЗаписиПодписиКладовщика.Организация
	|	,ЗаписьОтветственныхЛиц.Подпись КАК ПодписьКладовщика
	|Поместить ДокументыИПодписиКладовщика
	|Из ПериодЗаписиПодписиКладовщика КАК ПериодЗаписиПодписиКладовщика
	|	Левое соединение РегистрСведений.УдалитьОтветственныеЛица КАК ЗаписьОтветственныхЛиц
	|	по ЗаписьОтветственныхЛиц.КонвертацияВыполнена
	|		И ЗаписьОтветственныхЛиц.ТипОтветственногоЛица = Значение(Перечисление.УдалитьТипыОтветственныхЛиц.Кладовщик)
	|		И ЗаписьОтветственныхЛиц.Период = ПериодЗаписиПодписиКладовщика.ОтборПериода
	|		И ЗаписьОтветственныхЛиц.Организация = ПериодЗаписиПодписиКладовщика.Организация
	|
	|;Выбрать
	|	Максимум(ЗаписьОтветственныхЛиц.Период) КАК ОтборПериода
	|	,ТаблицаДокументов.Ссылка
	|	,ТаблицаДокументов.ДатаДокумента
	|	,ТаблицаДокументов.Организация
	|Поместить ПериодЗаписиПодписиКассира
	|Из ТаблицаДокументов КАК ТаблицаДокументов
	|	Левое соединение РегистрСведений.УдалитьОтветственныеЛица КАК ЗаписьОтветственныхЛиц
	|	По ЗаписьОтветственныхЛиц.КонвертацияВыполнена
	|		И ЗаписьОтветственныхЛиц.ТипОтветственногоЛица = Значение(Перечисление.УдалитьТипыОтветственныхЛиц.Кассир)
	|		И ЗаписьОтветственныхЛиц.Период < ТаблицаДокументов.ДатаДокумента
	|		И ЗаписьОтветственныхЛиц.Организация = ТаблицаДокументов.Организация
	|Сгруппировать по ТаблицаДокументов.Ссылка, ТаблицаДокументов.ДатаДокумента, ТаблицаДокументов.Организация
	|
	|;Выбрать
	|	ПериодЗаписиПодписиКассира.Ссылка
	|	,ПериодЗаписиПодписиКассира.ДатаДокумента
	|	,ПериодЗаписиПодписиКассира.Организация
	|	,ЗаписьОтветственныхЛиц.Подпись КАК ПодписьКассира
	|Поместить ДокументыИПодписиКассира
	|Из ПериодЗаписиПодписиКассира КАК ПериодЗаписиПодписиКассира
	|	Левое соединение РегистрСведений.УдалитьОтветственныеЛица КАК ЗаписьОтветственныхЛиц
	|	по ЗаписьОтветственныхЛиц.КонвертацияВыполнена
	|		И ЗаписьОтветственныхЛиц.ТипОтветственногоЛица = Значение(Перечисление.УдалитьТипыОтветственныхЛиц.Кассир)
	|		И ЗаписьОтветственныхЛиц.Период = ПериодЗаписиПодписиКассира.ОтборПериода
	|		И ЗаписьОтветственныхЛиц.Организация = ПериодЗаписиПодписиКассира.Организация
	|
	|;Выбрать
	|	ДокументыИПодписиРуководителя.Ссылка
	|	,ДокументыИПодписиРуководителя.ПодписьРуководителя КАК ПодписьРуководителя
	|	,ДокументыИПодписиГлавногоБухгалтера.ПодписьГлавногоБухгалтера КАК ПодписьГлавногоБухгалтера
	|	,ДокументыИПодписиКладовщика.ПодписьКладовщика КАК ПодписьКладовщика
	|	,ДокументыИПодписиКассира.ПодписьКассира КАК ПодписьКассира
	|Из ДокументыИПодписиРуководителя КАК ДокументыИПодписиРуководителя
	|	Левое соединение ДокументыИПодписиГлавногоБухгалтера КАК ДокументыИПодписиГлавногоБухгалтера
	|	по ДокументыИПодписиРуководителя.Ссылка = ДокументыИПодписиГлавногоБухгалтера.Ссылка
	|	Левое соединение ДокументыИПодписиКладовщика КАК ДокументыИПодписиКладовщика
	|	по ДокументыИПодписиРуководителя.Ссылка = ДокументыИПодписиКладовщика.Ссылка
	|	Левое соединение ДокументыИПодписиКассира КАК ДокументыИПодписиКассира
	|	по ДокументыИПодписиРуководителя.Ссылка = ДокументыИПодписиКассира.Ссылка";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
		
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Попытка
			
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ДокументОбъект.Заблокировать();
			ДокументОбъект.ПодписьРуководителя = Выборка.ПодписьРуководителя;
			ДокументОбъект.ПодписьГлавногоБухгалтера = Выборка.ПодписьГлавногоБухгалтера;
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект, Ложь, Ложь);
			
		Исключение
			
			ЗаписьЖурналаРегистрации("ПодписиДокументов", УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Истина;
	
КонецПроцедуры

Процедура ПодписиВДокументах_РасходнаяНакладная(Параметры = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"Выбрать первые 500
	|	ДокументРасходнаяНакладная.Ссылка
	|	,ДокументРасходнаяНакладная.Дата КАК ДатаДокумента
	|	,ДокументРасходнаяНакладная.Организация
	|	,ДокументРасходнаяНакладная.УдалитьОтпустил КАК УдалитьОтпустил
	|	,ДокументРасходнаяНакладная.УдалитьОтпустил.ФизЛицо КАК УдалитьОтпустилФизЛицо
	|	,ДокументРасходнаяНакладная.УдалитьРуководитель КАК УдалитьРуководитель
	|	,ДокументРасходнаяНакладная.УдалитьРуководитель.ФизЛицо КАК УдалитьРуководительФизЛицо
	|	,ДокументРасходнаяНакладная.УдалитьГлавныйБухгалтер КАК УдалитьГлавныйБухгалтер
	|	,ДокументРасходнаяНакладная.УдалитьГлавныйБухгалтер.ФизЛицо КАК УдалитьГлавныйБухгалтерФизЛицо
	|Из Документ.РасходнаяНакладная КАК ДокументРасходнаяНакладная
	|Где НЕ ДокументРасходнаяНакладная.ПометкаУдаления
	|Упорядочить по ДокументРасходнаяНакладная.Дата Убыв";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
		
	КонецЕсли;
	
	СтруктураПодписей = Новый Структура;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтруктураПодписей.Очистить();
		
		Попытка
			
			ПодписьРуководителя = НайтиПодписьСотрудника(Выборка.Организация, Выборка.УдалитьРуководитель);
			Если ПодписьРуководителя = Неопределено Тогда
				
				ПодписьРуководителя = НайтиПодписьФизическогоЛица(Выборка.УдалитьРуководительФизЛицо);
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ПодписьРуководителя) Тогда
				
				СтруктураПодписей.Вставить("ПодписьРуководителя", ПодписьРуководителя);
				
			КонецЕсли;
			
			ПодписьГлавногоБухгалтера = НайтиПодписьСотрудника(Выборка.Организация, Выборка.УдалитьГлавныйБухгалтер);
			Если ПодписьГлавногоБухгалтера = Неопределено Тогда
				
				ПодписьГлавногоБухгалтера = НайтиПодписьФизическогоЛица(Выборка.УдалитьГлавныйБухгалтерФизЛицо);
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ПодписьГлавногоБухгалтера) Тогда
				
				СтруктураПодписей.Вставить("ПодписьГлавногоБухгалтера", ПодписьГлавногоБухгалтера);
				
			КонецЕсли;
			
			ПодписьКладовщика = НайтиПодписьСотрудника(Выборка.Организация, Выборка.УдалитьОтпустил);
			Если ПодписьКладовщика = Неопределено Тогда
				
				ПодписьКладовщика = НайтиПодписьФизическогоЛица(Выборка.УдалитьОтпустилФизЛицо);
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ПодписьКладовщика) Тогда
				
				СтруктураПодписей.Вставить("ПодписьКладовщика", ПодписьКладовщика);
				
			КонецЕсли;
			
			Если СтруктураПодписей.Количество() > 0 Тогда
				
				ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
				ДокументОбъект.Заблокировать();
				ЗаполнитьЗначенияСвойств(ДокументОбъект, СтруктураПодписей);
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект, Ложь, Ложь);
				
			КонецЕсли;
			
		Исключение
			
			ЗаписьЖурналаРегистрации("ПодписиДокументов", УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Истина;
	
КонецПроцедуры

Процедура ПодписиВДокументах_СверкаВзаиморасчетов(Параметры = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"Выбрать первые 100
	|	ДокументСверкаВзаиморасчетов.Ссылка
	|	,ДокументСверкаВзаиморасчетов.Дата КАК ДатаДокумента
	|	,ДокументСверкаВзаиморасчетов.Организация
	|	,ДокументСверкаВзаиморасчетов.УдалитьОтветственный КАК УдалитьОтветственный
	|	,ДокументСверкаВзаиморасчетов.УдалитьОтветственный.ФизЛицо КАК УдалитьОтветственныйФизЛицо
	|Из Документ.СверкаВзаиморасчетов КАК ДокументСверкаВзаиморасчетов
	|Где НЕ ДокументСверкаВзаиморасчетов.ПометкаУдаления
	|Упорядочить по ДокументСверкаВзаиморасчетов.Дата Убыв";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
		
	КонецЕсли;
	
	СтруктураПодписей = Новый Структура;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтруктураПодписей.Очистить();
		
		Попытка
			
			ПодписьОтветственного = НайтиПодписьСотрудника(Выборка.Организация, Выборка.УдалитьОтветственный);
			Если ПодписьОтветственного = Неопределено Тогда
				
				ПодписьОтветственного = НайтиПодписьФизическогоЛица(Выборка.УдалитьОтветственныйФизЛицо);
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ПодписьОтветственного) Тогда
				
				СтруктураПодписей.Вставить("ПодписьОтветственного", ПодписьОтветственного);
				
			КонецЕсли;
			
			Если СтруктураПодписей.Количество() > 0 Тогда
				
				ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
				ДокументОбъект.Заблокировать();
				ЗаполнитьЗначенияСвойств(ДокументОбъект, СтруктураПодписей);
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект, Ложь, Ложь);
				
			КонецЕсли;
			
		Исключение
			
			ЗаписьЖурналаРегистрации("ПодписиДокументов", УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Истина;
	
КонецПроцедуры

Процедура ПодписиВДокументах_СчетНаОплату(Параметры = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"Выбрать первые 500
	|	ДокументСчетНаОплату.Ссылка
	|	,ДокументСчетНаОплату.Дата КАК ДатаДокумента
	|	,ДокументСчетНаОплату.Организация
	|Поместить ТаблицаДокументов
	|Из Документ.СчетНаОплату КАК ДокументСчетНаОплату
	|Где НЕ ДокументСчетНаОплату.ПометкаУдаления
	|Упорядочить по ДокументСчетНаОплату.Дата Убыв
	|Индексировать по ДатаДокумента, Организация
	|
	|;Выбрать
	|	Максимум(ЗаписьОтветственныхЛиц.Период) КАК ОтборПериода
	|	,ТаблицаДокументов.Ссылка
	|	,ТаблицаДокументов.ДатаДокумента
	|	,ТаблицаДокументов.Организация
	|Поместить ПериодЗаписиПодписиРуководителя
	|Из ТаблицаДокументов КАК ТаблицаДокументов
	|	Левое соединение РегистрСведений.УдалитьОтветственныеЛица КАК ЗаписьОтветственныхЛиц
	|	По ЗаписьОтветственныхЛиц.КонвертацияВыполнена
	|		И ЗаписьОтветственныхЛиц.ТипОтветственногоЛица = Значение(Перечисление.УдалитьТипыОтветственныхЛиц.Руководитель)
	|		И ЗаписьОтветственныхЛиц.Период < ТаблицаДокументов.ДатаДокумента
	|		И ЗаписьОтветственныхЛиц.Организация = ТаблицаДокументов.Организация
	|Сгруппировать по ТаблицаДокументов.Ссылка, ТаблицаДокументов.ДатаДокумента, ТаблицаДокументов.Организация
	|
	|;Выбрать
	|	ПериодЗаписиПодписиРуководителя.Ссылка
	|	,ПериодЗаписиПодписиРуководителя.ДатаДокумента
	|	,ПериодЗаписиПодписиРуководителя.Организация
	|	,ЗаписьОтветственныхЛиц.Подпись КАК ПодписьРуководителя
	|Поместить ДокументыИПодписиРуководителя
	|Из ПериодЗаписиПодписиРуководителя КАК ПериодЗаписиПодписиРуководителя
	|	Левое соединение РегистрСведений.УдалитьОтветственныеЛица КАК ЗаписьОтветственныхЛиц
	|	по ЗаписьОтветственныхЛиц.КонвертацияВыполнена
	|		И ЗаписьОтветственныхЛиц.ТипОтветственногоЛица = Значение(Перечисление.УдалитьТипыОтветственныхЛиц.Руководитель)
	|		И ЗаписьОтветственныхЛиц.Период = ПериодЗаписиПодписиРуководителя.ОтборПериода
	|		И ЗаписьОтветственныхЛиц.Организация = ПериодЗаписиПодписиРуководителя.Организация
	|
	|;Выбрать
	|	Максимум(ЗаписьОтветственныхЛиц.Период) КАК ОтборПериода
	|	,ТаблицаДокументов.Ссылка
	|	,ТаблицаДокументов.ДатаДокумента
	|	,ТаблицаДокументов.Организация
	|Поместить ПериодЗаписиПодписиГлавногоБухгалтера
	|Из ТаблицаДокументов КАК ТаблицаДокументов
	|	Левое соединение РегистрСведений.УдалитьОтветственныеЛица КАК ЗаписьОтветственныхЛиц
	|	По ЗаписьОтветственныхЛиц.КонвертацияВыполнена
	|		И ЗаписьОтветственныхЛиц.ТипОтветственногоЛица = Значение(Перечисление.УдалитьТипыОтветственныхЛиц.ГлавныйБухгалтер)
	|		И ЗаписьОтветственныхЛиц.Период < ТаблицаДокументов.ДатаДокумента
	|		И ЗаписьОтветственныхЛиц.Организация = ТаблицаДокументов.Организация
	|Сгруппировать по ТаблицаДокументов.Ссылка, ТаблицаДокументов.ДатаДокумента, ТаблицаДокументов.Организация
	|
	|;Выбрать
	|	ПериодЗаписиПодписиГлавногоБухгалтера.Ссылка
	|	,ПериодЗаписиПодписиГлавногоБухгалтера.ДатаДокумента
	|	,ПериодЗаписиПодписиГлавногоБухгалтера.Организация
	|	,ЗаписьОтветственныхЛиц.Подпись КАК ПодписьГлавногоБухгалтера
	|Поместить ДокументыИПодписиГлавногоБухгалтера
	|Из ПериодЗаписиПодписиГлавногоБухгалтера КАК ПериодЗаписиПодписиГлавногоБухгалтера
	|	Левое соединение РегистрСведений.УдалитьОтветственныеЛица КАК ЗаписьОтветственныхЛиц
	|	по ЗаписьОтветственныхЛиц.КонвертацияВыполнена
	|		И ЗаписьОтветственныхЛиц.ТипОтветственногоЛица = Значение(Перечисление.УдалитьТипыОтветственныхЛиц.ГлавныйБухгалтер)
	|		И ЗаписьОтветственныхЛиц.Период = ПериодЗаписиПодписиГлавногоБухгалтера.ОтборПериода
	|		И ЗаписьОтветственныхЛиц.Организация = ПериодЗаписиПодписиГлавногоБухгалтера.Организация
	|
	|;Выбрать
	|	ТаблицаДокументов.Ссылка
	|	,ДокументыИПодписиРуководителя.ПодписьРуководителя КАК ПодписьРуководителя
	|	,ДокументыИПодписиГлавногоБухгалтера.ПодписьГлавногоБухгалтера КАК ПодписьГлавногоБухгалтера
	|Из ТаблицаДокументов КАК ТаблицаДокументов
	|	Левое соединение ДокументыИПодписиРуководителя КАК ДокументыИПодписиРуководителя
	|	по ТаблицаДокументов.Ссылка = ДокументыИПодписиРуководителя.Ссылка
	|	Левое соединение ДокументыИПодписиГлавногоБухгалтера КАК ДокументыИПодписиГлавногоБухгалтера
	|	по ТаблицаДокументов.Ссылка = ДокументыИПодписиГлавногоБухгалтера.Ссылка";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
		
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Попытка
			
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ДокументОбъект.Заблокировать();
			ДокументОбъект.ПодписьРуководителя = Выборка.ПодписьРуководителя;
			ДокументОбъект.ПодписьГлавногоБухгалтера = Выборка.ПодписьГлавногоБухгалтера;
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект, Ложь, Ложь);
			
		Исключение
			
			ЗаписьЖурналаРегистрации("ПодписиДокументов", УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Истина;
	
КонецПроцедуры

Процедура ПодписиВДокументах_СчетФактура(Параметры = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"Выбрать первые 1000
	|	ДокументыОснованияСФ.Ссылка
	|	,ДокументыОснованияСФ.Ссылка.ДокументОснование КАК ОснованиеИзШапки
	|	,ДокументыОснованияСФ.ДокументОснование КАК ОснованиеИзТаблицы
	|	,Сумма(1) КАК КоличествоОснований
	|Из Документ.СчетФактура.ДокументыОснования КАК ДокументыОснованияСФ
	|Где НЕ ДокументыОснованияСФ.Ссылка.ПометкаУдаления
	|Сгруппировать по ДокументыОснованияСФ.Ссылка, ДокументыОснованияСФ.ДокументОснование
	|Имеющие Сумма(1) < 2
	|Упорядочить по ДокументыОснованияСФ.Ссылка.Дата Убыв";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
		
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ДокументОснование = Неопределено;
		Если ЗначениеЗаполнено(Выборка.ОснованиеИзШапки) Тогда
			
			ДокументОснование = Выборка.ОснованиеИзШапки;
			
		ИначеЕсли ЗначениеЗаполнено(Выборка.ОснованиеИзТаблицы) Тогда
			
			ДокументОснование = Выборка.ОснованиеИзТаблицы;
			
		КонецЕсли;
		
		Если ДокументОснование = Неопределено Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		СтрокаРеквизитов = "";
		
		МетаданныеДокумента = ДокументОснование.Метаданные();
		Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ПодписьРуководителя", МетаданныеДокумента) Тогда
			
			СтрокаРеквизитов = "ПодписьРуководителя";
			
		КонецЕсли;
		
		Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ПодписьГлавногоБухгалтера", МетаданныеДокумента) Тогда
			
			СтрокаРеквизитов = СтрокаРеквизитов + ?(ПустаяСтрока(СтрокаРеквизитов), "", ",") + "ПодписьГлавногоБухгалтера";
			
		КонецЕсли;
		
		Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ПодписьКладовщика", МетаданныеДокумента) Тогда
			
			СтрокаРеквизитов = СтрокаРеквизитов + ?(ПустаяСтрока(СтрокаРеквизитов), "", ",") + "ПодписьКладовщика";
			
		КонецЕсли;
		
		Если ПустаяСтрока(СтрокаРеквизитов) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОснование, СтрокаРеквизитов);
		
		Попытка
			
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ДокументОбъект.Заблокировать();
			ЗаполнитьЗначенияСвойств(ДокументОбъект, ЗначенияРеквизитов);
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект, Ложь, Ложь);
			
		Исключение
			
			ЗаписьЖурналаРегистрации("ПодписиДокументов", УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Истина;
	
КонецПроцедуры

Процедура ПодписиВДокументах_Табель(Параметры = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"Выбрать первые 100
	|	ДокументТабель.Ссылка
	|	,ДокументТабель.Дата КАК ДатаДокумента
	|	,ДокументТабель.Организация
	|Поместить ТаблицаДокументов
	|Из Документ.Табель КАК ДокументТабель
	|Где НЕ ДокументТабель.ПометкаУдаления
	|Упорядочить по ДокументТабель.Дата Убыв
	|Индексировать по ДатаДокумента, Организация
	|
	|;Выбрать
	|	Максимум(ЗаписьОтветственныхЛиц.Период) КАК ОтборПериода
	|	,ТаблицаДокументов.Ссылка
	|	,ТаблицаДокументов.ДатаДокумента
	|	,ТаблицаДокументов.Организация
	|Поместить ПериодЗаписиПодписиРуководителя
	|Из ТаблицаДокументов КАК ТаблицаДокументов
	|	Левое соединение РегистрСведений.УдалитьОтветственныеЛица КАК ЗаписьОтветственныхЛиц
	|	По ЗаписьОтветственныхЛиц.КонвертацияВыполнена
	|		И ЗаписьОтветственныхЛиц.ТипОтветственногоЛица = Значение(Перечисление.УдалитьТипыОтветственныхЛиц.Руководитель)
	|		И ЗаписьОтветственныхЛиц.Период < ТаблицаДокументов.ДатаДокумента
	|		И ЗаписьОтветственныхЛиц.Организация = ТаблицаДокументов.Организация
	|Сгруппировать по ТаблицаДокументов.Ссылка, ТаблицаДокументов.ДатаДокумента, ТаблицаДокументов.Организация
	|
	|;Выбрать
	|	ПериодЗаписиПодписиРуководителя.Ссылка
	|	,ПериодЗаписиПодписиРуководителя.ДатаДокумента
	|	,ПериодЗаписиПодписиРуководителя.Организация
	|	,ЗаписьОтветственныхЛиц.Подпись КАК ПодписьРуководителя
	|Поместить ДокументыИПодписиРуководителя
	|Из ПериодЗаписиПодписиРуководителя КАК ПериодЗаписиПодписиРуководителя
	|	Левое соединение РегистрСведений.УдалитьОтветственныеЛица КАК ЗаписьОтветственныхЛиц
	|	по ЗаписьОтветственныхЛиц.КонвертацияВыполнена
	|		И ЗаписьОтветственныхЛиц.ТипОтветственногоЛица = Значение(Перечисление.УдалитьТипыОтветственныхЛиц.Руководитель)
	|		И ЗаписьОтветственныхЛиц.Период = ПериодЗаписиПодписиРуководителя.ОтборПериода
	|		И ЗаписьОтветственныхЛиц.Организация = ПериодЗаписиПодписиРуководителя.Организация
	|
	|;Выбрать
	|	Максимум(ЗаписьОтветственныхЛиц.Период) КАК ОтборПериода
	|	,ТаблицаДокументов.Ссылка
	|	,ТаблицаДокументов.ДатаДокумента
	|	,ТаблицаДокументов.Организация
	|Поместить ПериодЗаписиПодписиГлавногоБухгалтера
	|Из ТаблицаДокументов КАК ТаблицаДокументов
	|	Левое соединение РегистрСведений.УдалитьОтветственныеЛица КАК ЗаписьОтветственныхЛиц
	|	По ЗаписьОтветственныхЛиц.КонвертацияВыполнена
	|		И ЗаписьОтветственныхЛиц.ТипОтветственногоЛица = Значение(Перечисление.УдалитьТипыОтветственныхЛиц.ГлавныйБухгалтер)
	|		И ЗаписьОтветственныхЛиц.Период < ТаблицаДокументов.ДатаДокумента
	|		И ЗаписьОтветственныхЛиц.Организация = ТаблицаДокументов.Организация
	|Сгруппировать по ТаблицаДокументов.Ссылка, ТаблицаДокументов.ДатаДокумента, ТаблицаДокументов.Организация
	|
	|;Выбрать
	|	ПериодЗаписиПодписиГлавногоБухгалтера.Ссылка
	|	,ПериодЗаписиПодписиГлавногоБухгалтера.ДатаДокумента
	|	,ПериодЗаписиПодписиГлавногоБухгалтера.Организация
	|	,ЗаписьОтветственныхЛиц.Подпись КАК ПодписьГлавногоБухгалтера
	|Поместить ДокументыИПодписиГлавногоБухгалтера
	|Из ПериодЗаписиПодписиГлавногоБухгалтера КАК ПериодЗаписиПодписиГлавногоБухгалтера
	|	Левое соединение РегистрСведений.УдалитьОтветственныеЛица КАК ЗаписьОтветственныхЛиц
	|	по ЗаписьОтветственныхЛиц.КонвертацияВыполнена
	|		И ЗаписьОтветственныхЛиц.ТипОтветственногоЛица = Значение(Перечисление.УдалитьТипыОтветственныхЛиц.ГлавныйБухгалтер)
	|		И ЗаписьОтветственныхЛиц.Период = ПериодЗаписиПодписиГлавногоБухгалтера.ОтборПериода
	|		И ЗаписьОтветственныхЛиц.Организация = ПериодЗаписиПодписиГлавногоБухгалтера.Организация
	|
	|;Выбрать
	|	ТаблицаДокументов.Ссылка
	|	,ДокументыИПодписиРуководителя.ПодписьРуководителя КАК ПодписьРуководителя
	|	,ДокументыИПодписиГлавногоБухгалтера.ПодписьГлавногоБухгалтера КАК ПодписьГлавногоБухгалтера
	|Из ТаблицаДокументов КАК ТаблицаДокументов
	|	Левое соединение ДокументыИПодписиРуководителя КАК ДокументыИПодписиРуководителя
	|	по ТаблицаДокументов.Ссылка = ДокументыИПодписиРуководителя.Ссылка
	|	Левое соединение ДокументыИПодписиГлавногоБухгалтера КАК ДокументыИПодписиГлавногоБухгалтера
	|	по ТаблицаДокументов.Ссылка = ДокументыИПодписиГлавногоБухгалтера.Ссылка";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
		
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Попытка
			
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ДокументОбъект.Заблокировать();
			ДокументОбъект.ПодписьРуководителя = Выборка.ПодписьРуководителя;
			ДокументОбъект.ПодписьГлавногоБухгалтера = Выборка.ПодписьГлавногоБухгалтера;
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект, Ложь, Ложь);
			
		Исключение
			
			ЗаписьЖурналаРегистрации("ПодписиДокументов", УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Истина;
	
КонецПроцедуры

Процедура ПодписиВДокументах_ЧекККМ(Параметры = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"Выбрать первые 100
	|	ДокументЧекККМ.Ссылка
	|	,ДокументЧекККМ.Дата КАК ДатаДокумента
	|	,ДокументЧекККМ.Организация
	|Поместить ТаблицаДокументов
	|Из Документ.ЧекККМ КАК ДокументЧекККМ
	|Где НЕ ДокументЧекККМ.ПометкаУдаления
	|Упорядочить по ДокументЧекККМ.Дата Убыв
	|Индексировать по ДатаДокумента, Организация
	|
	|;Выбрать
	|	Максимум(ЗаписьОтветственныхЛиц.Период) КАК ОтборПериода
	|	,ТаблицаДокументов.Ссылка
	|	,ТаблицаДокументов.ДатаДокумента
	|	,ТаблицаДокументов.Организация
	|Поместить ПериодЗаписиПодписиКассира
	|Из ТаблицаДокументов КАК ТаблицаДокументов
	|	Левое соединение РегистрСведений.УдалитьОтветственныеЛица КАК ЗаписьОтветственныхЛиц
	|	По ЗаписьОтветственныхЛиц.КонвертацияВыполнена
	|		И ЗаписьОтветственныхЛиц.ТипОтветственногоЛица = Значение(Перечисление.УдалитьТипыОтветственныхЛиц.Кассир)
	|		И ЗаписьОтветственныхЛиц.Период < ТаблицаДокументов.ДатаДокумента
	|		И ЗаписьОтветственныхЛиц.Организация = ТаблицаДокументов.Организация
	|Сгруппировать по ТаблицаДокументов.Ссылка, ТаблицаДокументов.ДатаДокумента, ТаблицаДокументов.Организация
	|
	|;Выбрать
	|	ПериодЗаписиПодписиКассира.Ссылка
	|	,ПериодЗаписиПодписиКассира.ДатаДокумента
	|	,ПериодЗаписиПодписиКассира.Организация
	|	,ЗаписьОтветственныхЛиц.Подпись КАК ПодписьКассира
	|Поместить ДокументыИПодписиКассира
	|Из ПериодЗаписиПодписиКассира КАК ПериодЗаписиПодписиКассира
	|	Левое соединение РегистрСведений.УдалитьОтветственныеЛица КАК ЗаписьОтветственныхЛиц
	|	по ЗаписьОтветственныхЛиц.КонвертацияВыполнена
	|		И ЗаписьОтветственныхЛиц.ТипОтветственногоЛица = Значение(Перечисление.УдалитьТипыОтветственныхЛиц.Кассир)
	|		И ЗаписьОтветственныхЛиц.Период = ПериодЗаписиПодписиКассира.ОтборПериода
	|		И ЗаписьОтветственныхЛиц.Организация = ПериодЗаписиПодписиКассира.Организация
	|
	|;Выбрать
	|	ТаблицаДокументов.Ссылка
	|	,ДокументыИПодписиКассира.ПодписьКассира КАК ПодписьКассира
	|Из ТаблицаДокументов КАК ТаблицаДокументов
	|	Левое соединение ДокументыИПодписиКассира КАК ДокументыИПодписиКассира
	|	по ТаблицаДокументов.Ссылка = ДокументыИПодписиКассира.Ссылка";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
		
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Попытка
			
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ДокументОбъект.Заблокировать();
			ДокументОбъект.ПодписьКассира = Выборка.ПодписьКассира;
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект, Ложь, Ложь);
			
		Исключение
			
			ЗаписьЖурналаРегистрации("ПодписиДокументов", УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Истина;
	
КонецПроцедуры

#Область ВспомогательныеКонвертацияПодписей

Процедура ЗаполнитьПодписиОрганизаций()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РСОтветственныеЛица.Организация КАК Организация,
	|	РСОтветственныеЛица.ТипОтветственногоЛица,
	|	РСОтветственныеЛица.Подпись
	|ИЗ
	|	РегистрСведений.УдалитьОтветственныеЛица.СрезПоследних(, ТипОтветственногоЛица В (ЗНАЧЕНИЕ(Перечисление.УдалитьТипыОтветственныхЛиц.Руководитель), ЗНАЧЕНИЕ(Перечисление.УдалитьТипыОтветственныхЛиц.ГлавныйБухгалтер))) КАК РСОтветственныеЛица
	|ИТОГИ ПО
	|	Организация";
	
	ВыборкаОрганизаций = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаОрганизаций.Следующий() Цикл
		
		Если ЗначениеЗаполнено(ВыборкаОрганизаций.Организация) Тогда
			
			ОрганизацияОбъект = ВыборкаОрганизаций.Организация.ПолучитьОбъект();
			Если ТипЗнч(ОрганизацияОбъект) <> Тип("СправочникОбъект.Организации") Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			ВыборкаОтветственныеЛица = ВыборкаОрганизаций.Выбрать();
			Пока ВыборкаОтветственныеЛица.Следующий() Цикл
				
				Если ТипЗнч(ВыборкаОтветственныеЛица.Подпись) <> Тип("СправочникСсылка.Подписи")
					ИЛИ НЕ ЗначениеЗаполнено(ВыборкаОтветственныеЛица.Подпись) Тогда
					
					Продолжить;
					
				КонецЕсли;
				
				Если ВыборкаОтветственныеЛица.ТипОтветственногоЛица = Перечисления.УдалитьТипыОтветственныхЛиц.Руководитель Тогда
					
					ОрганизацияОбъект.ПодписьРуководителя = ВыборкаОтветственныеЛица.Подпись;
					
				КонецЕсли;
				
				Если ВыборкаОтветственныеЛица.ТипОтветственногоЛица = Перечисления.УдалитьТипыОтветственныхЛиц.ГлавныйБухгалтер Тогда
					
					ОрганизацияОбъект.ПодписьГлавногоБухгалтера = ВыборкаОтветственныеЛица.Подпись;
					
				КонецЕсли;
				
			КонецЦикла;
			
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ОрганизацияОбъект, Ложь, Ложь);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПодписиСтруктурныхЕдиниц(АктуальнаяПодписьКладовщика)
	
	Выборка = Справочники.СтруктурныеЕдиницы.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ПодписьМОЛ = Неопределено;
		
		Если ЗначениеЗаполнено(Выборка.МОЛ) Тогда
			
			СтруктурнаяЕдиницаОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ПодписьМОЛ = НайтиПодписьФизическогоЛица(Выборка.МОЛ);
			Если НЕ ЗначениеЗаполнено(ПодписьМОЛ) Тогда
				
				СтруктураПодписи = Новый Структура;
				СтруктураПодписи.Вставить("ДатаНазначения", Константы.ДатаПервогоВходаВСистему.Получить());
				СтруктураПодписи.Вставить("Организация", Выборка.Организация);
				СтруктураПодписи.Вставить("Сотрудник", Неопределено);
				СтруктураПодписи.Вставить("ФизическоеЛицоСотрудника", Выборка.МОЛ);
				
				ПодписьМОЛ = СоздатьПодписьПоСтруктуре(СтруктураПодписи);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ПодписьМОЛ) Тогда
			
			ПодписьМОЛ = АктуальнаяПодписьКладовщика[0][1];
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПодписьМОЛ) Тогда
			
			СтруктурнаяЕдиницаОбъект = Выборка.Ссылка.ПолучитьОбъект();
			СтруктурнаяЕдиницаОбъект.ПодписьМОЛ = ПодписьМОЛ;
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СтруктурнаяЕдиницаОбъект, Ложь, Ложь);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПодписиКассПредприятия(АктуальнаяПодписьКассира)
	
	Выборка = Справочники.Кассы.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ПодписьКассира = АктуальнаяПодписьКассира[0][1];
		Если ЗначениеЗаполнено(ПодписьКассира) Тогда
			
			КассаПредприятияОбъект = Выборка.Ссылка.ПолучитьОбъект();
			КассаПредприятияОбъект.ПодписьКассира = ПодписьКассира;
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(КассаПредприятияОбъект, Ложь, Ложь);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ДолжностиСотрудника(Организация, Сотрудник)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	
	Запрос.Текст = 
	"Выбрать Первые 1
	|	РегистрСведенийОСотрудниках.Должность КАК Должность
	|Из РегистрСведений.Сотрудники.СрезПоследних(, Организация = &Организация И Сотрудник = &Сотрудник) КАК РегистрСведенийОСотрудниках";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Возврат ?(Выборка.Следующий(), Выборка.Должность, Неопределено);
	
КонецФункции

Функция ЗаполнитьФизическоеЛицоСотрудника(Сотрудник)
	
	НайденноеФизическоеЛицо = Справочники.ФизическиеЛица.НайтиПоНаименованию(Сотрудник.Наименование, Истина);
	Если ЗначениеЗаполнено(НайденноеФизическоеЛицо) Тогда
		
		Возврат НайденноеФизическоеЛицо;
		
	КонецЕсли;
	
	ФизическоеЛицоОбъект = Справочники.ФизическиеЛица.СоздатьЭлемент();
	ФизическоеЛицоОбъект.Наименование = Сотрудник.Наименование;
	ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ФизическоеЛицоОбъект, Ложь, Ложь);
	
	Возврат ФизическоеЛицоОбъект.Ссылка;
	
КонецФункции

Функция СоздатьПодписьПоСтруктуре(СтруктураПодписи)
	
	НоваяПодпись = Справочники.Подписи.СоздатьЭлемент();
	НоваяПодпись.ДатаНазначения = СтруктураПодписи.ДатаНазначения;
	НоваяПодпись.Организация = СтруктураПодписи.Организация;
	
	Если ЗначениеЗаполнено(СтруктураПодписи.Сотрудник) Тогда
		
		НоваяПодпись.СлужебныйКонвертация = СтруктураПодписи.Сотрудник;
		НоваяПодпись.Должность = ДолжностиСотрудника(СтруктураПодписи.Организация, СтруктураПодписи.Сотрудник);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураПодписи.ФизическоеЛицоСотрудника) тогда
		
		НоваяПодпись.ФизическоеЛицо = СтруктураПодписи.ФизическоеЛицоСотрудника;
		РасшифровкаПодписи = РегистрыСведений.ФИОФизЛиц.ФИОФизЛица(СтруктураПодписи.ДатаНазначения, НоваяПодпись.ФизическоеЛицо);
		НоваяПодпись.РасшифровкаПодписи = ?(ПустаяСтрока(РасшифровкаПодписи), СокрЛП(СтруктураПодписи.ФизическоеЛицоСотрудника), РасшифровкаПодписи);
		
	Иначе
		
		НоваяПодпись.ФизическоеЛицо = ЗаполнитьФизическоеЛицоСотрудника(СтруктураПодписи.Сотрудник);
		НоваяПодпись.РасшифровкаПодписи = СокрЛП(СтруктураПодписи.ФизическоеЛицоСотрудника);
		
	КонецЕсли;
	
	НоваяПодпись.Наименование = Строка(НоваяПодпись.Должность) + ", " + НоваяПодпись.РасшифровкаПодписи;
	НоваяПодпись.Записать();
	
	Возврат НоваяПодпись.Ссылка;
	
КонецФункции

Функция НайтиПодписьСотрудника(Организация, Сотрудник)
	
	Если НЕ ЗначениеЗаполнено(Организация)
		ИЛИ НЕ ЗначениеЗаполнено(Сотрудник) Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Запрос = Новый Запрос("Выбрать Справочник.Подписи.Ссылка Где НЕ ПравоОтозвано И Организация = &Организация И СлужебныйКонвертация = &Сотрудник");
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат ?(Выборка.Следующий(), Выборка.Ссылка, Неопределено);
	
КонецФункции

Функция НайтиПодписьФизическогоЛица(ФизическоеЛицо)
	
	Если НЕ ЗначениеЗаполнено(ФизическоеЛицо) Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Запрос = Новый Запрос("Выбрать Справочник.Подписи.Ссылка Где НЕ ПравоОтозвано И ФизическоеЛицо = &ФизическоеЛицо");
	Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицо);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат ?(Выборка.Следующий(), Выборка.Ссылка, Неопределено);
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти

Процедура ЗаполнитьЗакупкиДляКУДиР(Параметры = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗакупкиДляКУДиР.Регистратор
	|ИЗ
	|	РегистрНакопления.ЗакупкиДляКУДиР КАК ЗакупкиДляКУДиР";
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	РегистрыНакопления.ЗакупкиДляКУДиР.УстановитьИспользованиеИтогов(Ложь);
	Пока Выборка.Следующий() Цикл
		Набор = РегистрыНакопления.ЗакупкиДляКУДиР.СоздатьНаборЗаписей();
		Набор.Отбор.Регистратор.Значение = Выборка.Регистратор;
		Попытка
			Набор.Записать();
		Исключение
		КонецПопытки;
	КонецЦикла;
	РегистрыНакопления.ЗакупкиДляКУДиР.УстановитьИспользованиеИтогов(Истина);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Организации.Ссылка
	|ПОМЕСТИТЬ ВТОрганизации
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетыСПоставщиками.Период,
	|	РасчетыСПоставщиками.Регистратор КАК Регистратор,
	|	РасчетыСПоставщиками.Документ КАК ДенежныйДокумент,
	|	РасчетыСПоставщиками.Регистратор КАК ТоварныйДокумент,
	|	ЛОЖЬ КАК ВозвратПоставщику,
	|	ВЫБОР
	|		КОГДА РасходСоСчета.Ссылка ЕСТЬ НЕ NULL 
	|			ТОГДА РасходСоСчета.Организация
	|		КОГДА РасходИзКассы.Ссылка ЕСТЬ НЕ NULL 
	|			ТОГДА РасходИзКассы.Организация
	|		КОГДА АвансовыйОтчет.Ссылка ЕСТЬ НЕ NULL 
	|			ТОГДА АвансовыйОтчет.Организация
	|	КОНЕЦ КАК Организация,
	|	ВЫБОР
	|		КОГДА РасходСоСчета.Ссылка ЕСТЬ НЕ NULL 
	|			ТОГДА РасходСоСчета.Дата
	|		КОГДА РасходИзКассы.Ссылка ЕСТЬ НЕ NULL 
	|			ТОГДА РасходИзКассы.Дата
	|		КОГДА АвансовыйОтчет.Ссылка ЕСТЬ НЕ NULL 
	|			ТОГДА АвансовыйОтчет.Дата
	|	КОНЕЦ КАК ДатаДокумента,
	|	ВЫБОР
	|		КОГДА РасходСоСчета.Ссылка ЕСТЬ НЕ NULL 
	|			ТОГДА РасходСоСчета.УчитыватьВНУ
	|		КОГДА РасходИзКассы.Ссылка ЕСТЬ НЕ NULL 
	|			ТОГДА РасходИзКассы.УчитыватьВНУ
	|		КОГДА АвансовыйОтчет.Ссылка ЕСТЬ НЕ NULL 
	|			ТОГДА АвансовыйОтчет.УчитыватьВНУ
	|	КОНЕЦ КАК УчитыватьВНУ,
	|	ЛОЖЬ КАК ЭтоТоварыКРеализации,
	|	ВЫБОР
	|		КОГДА РасходСоСчета.Ссылка ЕСТЬ НЕ NULL 
	|			ТОГДА РасходСоСчета.ВалютаДенежныхСредств
	|		КОГДА РасходИзКассы.Ссылка ЕСТЬ НЕ NULL 
	|			ТОГДА РасходИзКассы.ВалютаДенежныхСредств
	|		КОГДА АвансовыйОтчет.Ссылка ЕСТЬ НЕ NULL 
	|			ТОГДА АвансовыйОтчет.ВалютаДокумента
	|	КОНЕЦ КАК ВалютаДокумента
	|ПОМЕСТИТЬ ВтОплатаЗаДолг
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками КАК РасчетыСПоставщиками
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РасходСоСчета КАК РасходСоСчета
	|		ПО (РасходСоСчета.Ссылка = РасчетыСПоставщиками.Документ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РасходИзКассы КАК РасходИзКассы
	|		ПО (РасходИзКассы.Ссылка = РасчетыСПоставщиками.Документ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.АвансовыйОтчет КАК АвансовыйОтчет
	|		ПО (АвансовыйОтчет.Ссылка = РасчетыСПоставщиками.Документ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОрганизации КАК ВтОрганизации
	|		ПО (ВтОрганизации.Ссылка = РасходСоСчета.Организация
	|				ИЛИ ВтОрганизации.Ссылка = РасходИзКассы.Организация
	|				ИЛИ ВтОрганизации.Ссылка = АвансовыйОтчет.Организация)
	|ГДЕ
	|	РасчетыСПоставщиками.Регистратор <> РасчетыСПоставщиками.Документ
	|	И РасчетыСПоставщиками.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)
	|	И (РасходСоСчета.Ссылка ЕСТЬ НЕ NULL 
	|			ИЛИ РасходИзКассы.Ссылка ЕСТЬ НЕ NULL 
	|			ИЛИ АвансовыйОтчет.Ссылка ЕСТЬ НЕ NULL )
	|	И ВтОрганизации.Ссылка ЕСТЬ НЕ NULL
	|	И РасчетыСПоставщиками.Документ <> Неопределено
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасчетыСПоставщиками.Период,
	|	РасчетыСПоставщиками.Регистратор,
	|	РасчетыСПоставщиками.Регистратор,
	|	РасчетыСПоставщиками.Документ,
	|	ВЫБОР
	|		КОГДА РасходСоСчета.Ссылка ЕСТЬ НЕ NULL 
	|				ИЛИ РасходИзКассы.Ссылка ЕСТЬ НЕ NULL 
	|				ИЛИ АвансовыйОтчет.Ссылка ЕСТЬ НЕ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА РасходСоСчета.Ссылка ЕСТЬ НЕ NULL 
	|			ТОГДА РасходСоСчета.Организация
	|		КОГДА РасходИзКассы.Ссылка ЕСТЬ НЕ NULL 
	|			ТОГДА РасходИзКассы.Организация
	|		КОГДА ПоступлениеНаСчет.Ссылка ЕСТЬ НЕ NULL 
	|			ТОГДА ПоступлениеНаСчет.Организация
	|		КОГДА ПоступлениеВКассу.Ссылка ЕСТЬ НЕ NULL 
	|			ТОГДА ПоступлениеВКассу.Организация
	|		КОГДА АвансовыйОтчет.Ссылка ЕСТЬ НЕ NULL 
	|			ТОГДА АвансовыйОтчет.Организация
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА РасходСоСчета.Ссылка ЕСТЬ НЕ NULL 
	|			ТОГДА РасходСоСчета.Дата
	|		КОГДА РасходИзКассы.Ссылка ЕСТЬ НЕ NULL 
	|			ТОГДА РасходИзКассы.Дата
	|		КОГДА ПоступлениеНаСчет.Ссылка ЕСТЬ НЕ NULL 
	|			ТОГДА ПоступлениеНаСчет.Дата
	|		КОГДА ПоступлениеВКассу.Ссылка ЕСТЬ НЕ NULL 
	|			ТОГДА ПоступлениеВКассу.Дата
	|		КОГДА АвансовыйОтчет.Ссылка ЕСТЬ НЕ NULL 
	|			ТОГДА АвансовыйОтчет.Дата
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА РасходСоСчета.Ссылка ЕСТЬ НЕ NULL 
	|			ТОГДА РасходСоСчета.УчитыватьВНУ
	|		КОГДА РасходИзКассы.Ссылка ЕСТЬ НЕ NULL 
	|			ТОГДА РасходИзКассы.УчитыватьВНУ
	|		КОГДА ПоступлениеНаСчет.Ссылка ЕСТЬ НЕ NULL 
	|			ТОГДА ПоступлениеНаСчет.УчитыватьВНУ
	|		КОГДА ПоступлениеВКассу.Ссылка ЕСТЬ НЕ NULL 
	|			ТОГДА ПоступлениеВКассу.УчитыватьВНУ
	|		КОГДА АвансовыйОтчет.Ссылка ЕСТЬ НЕ NULL 
	|			ТОГДА АвансовыйОтчет.УчитыватьВНУ
	|	КОНЕЦ,
	|	ЛОЖЬ,
	|	ВЫБОР
	|		КОГДА РасходСоСчета.Ссылка ЕСТЬ НЕ NULL 
	|			ТОГДА РасходСоСчета.ВалютаДенежныхСредств
	|		КОГДА РасходИзКассы.Ссылка ЕСТЬ НЕ NULL 
	|			ТОГДА РасходИзКассы.ВалютаДенежныхСредств
	|		КОГДА ПоступлениеНаСчет.Ссылка ЕСТЬ НЕ NULL 
	|			ТОГДА ПоступлениеНаСчет.ВалютаДенежныхСредств
	|		КОГДА ПоступлениеВКассу.Ссылка ЕСТЬ НЕ NULL 
	|			ТОГДА ПоступлениеВКассу.ВалютаДенежныхСредств
	|		КОГДА АвансовыйОтчет.Ссылка ЕСТЬ НЕ NULL 
	|			ТОГДА АвансовыйОтчет.ВалютаДокумента
	|	КОНЕЦ
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками КАК РасчетыСПоставщиками
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РасходСоСчета КАК РасходСоСчета
	|		ПО (РасходСоСчета.Ссылка = РасчетыСПоставщиками.Регистратор)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РасходИзКассы КАК РасходИзКассы
	|		ПО (РасходИзКассы.Ссылка = РасчетыСПоставщиками.Регистратор)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеНаСчет КАК ПоступлениеНаСчет
	|		ПО (ПоступлениеНаСчет.Ссылка = РасчетыСПоставщиками.Регистратор)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеВКассу КАК ПоступлениеВКассу
	|		ПО (ПоступлениеВКассу.Ссылка = РасчетыСПоставщиками.Регистратор)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.АвансовыйОтчет КАК АвансовыйОтчет
	|		ПО (АвансовыйОтчет.Ссылка = РасчетыСПоставщиками.Регистратор)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОрганизации КАК ВтОрганизации
	|		ПО (ВтОрганизации.Ссылка = РасходСоСчета.Организация
	|				ИЛИ ВтОрганизации.Ссылка = РасходИзКассы.Организация
	|				ИЛИ ВтОрганизации.Ссылка = ПоступлениеНаСчет.Организация
	|				ИЛИ ВтОрганизации.Ссылка = ПоступлениеВКассу.Организация
	|				ИЛИ ВтОрганизации.Ссылка = АвансовыйОтчет.Организация)
	|ГДЕ
	|	РасчетыСПоставщиками.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Долг)
	|	И (РасходСоСчета.Ссылка ЕСТЬ НЕ NULL 
	|			ИЛИ РасходИзКассы.Ссылка ЕСТЬ НЕ NULL 
	|			ИЛИ ПоступлениеНаСчет.Ссылка ЕСТЬ НЕ NULL 
	|			ИЛИ ПоступлениеВКассу.Ссылка ЕСТЬ НЕ NULL 
	|			ИЛИ АвансовыйОтчет.Ссылка ЕСТЬ НЕ NULL )
	|	И ВтОрганизации.Ссылка ЕСТЬ НЕ NULL 
	|	И РасчетыСПоставщиками.Документ <> Неопределено
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Номенклатура.Ссылка
	|ПОМЕСТИТЬ ВТТовары
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтавкиНДС.Ссылка,
	|	СтавкиНДС.Ставка
	|ПОМЕСТИТЬ ВТСтавкиНДС
	|ИЗ
	|	Справочник.СтавкиНДС КАК СтавкиНДС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОплатаЗаДолг.ТоварныйДокумент
	|ПОМЕСТИТЬ ВТТоварныеДокументы
	|ИЗ
	|	ВтОплатаЗаДолг КАК ОплатаЗаДолг
	|
	|СГРУППИРОВАТЬ ПО
	|	ОплатаЗаДолг.ТоварныйДокумент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТТоварныеДокументы.ТоварныйДокумент,
	|	Закупки.Номенклатура,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(Закупки.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
	|			ТОГДА Закупки.Количество
	|		ИНАЧЕ Закупки.Количество * Закупки.ЕдиницаИзмерения.Коэффициент
	|	КОНЕЦ КАК Количество,
	|	Закупки.Всего КАК Сумма,
	|	ЕСТЬNULL(ВТСтавкиНДС.Ставка, 0) КАК СтавкаНДС,
	|	НЕ Закупки.ТоварыДляПроизводства КАК ЭтоТоварыКРеализации
	|ПОМЕСТИТЬ ВТТоварыКРеализации
	|ИЗ
	|	ВТТоварныеДокументы КАК ВТТоварныеДокументы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриходнаяНакладная.Запасы КАК Закупки
	|		ПО (Закупки.Ссылка = ВТТоварныеДокументы.ТоварныйДокумент)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТТовары КАК ВТТовары
	|		ПО (ВТТовары.Ссылка = Закупки.Номенклатура)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтавкиНДС КАК ВТСтавкиНДС
	|		ПО (ВТСтавкиНДС.Ссылка = Закупки.СтавкаНДС)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТТоварныеДокументы.ТоварныйДокумент,
	|	Закупки.Номенклатура,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(Закупки.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
	|			ТОГДА -Закупки.Количество
	|		ИНАЧЕ -Закупки.Количество * Закупки.ЕдиницаИзмерения.Коэффициент
	|	КОНЕЦ,
	|	-Закупки.Всего,
	|	ЕСТЬNULL(ВТСтавкиНДС.Ставка, 0),
	|	НЕ Закупки.ТоварыДляПроизводства
	|ИЗ
	|	ВТТоварныеДокументы КАК ВТТоварныеДокументы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РасходнаяНакладная.Запасы КАК Закупки
	|		ПО (Закупки.Ссылка = ВТТоварныеДокументы.ТоварныйДокумент)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТТовары КАК ВТТовары
	|		ПО (ВТТовары.Ссылка = Закупки.Номенклатура)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтавкиНДС КАК ВТСтавкиНДС
	|		ПО (ВТСтавкиНДС.Ссылка = Закупки.СтавкаНДС)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтОплатаЗаДолг.ДенежныйДокумент,
	|	РасшифровкаПлатежа.Документ,
	|	ЕСТЬNULL(ВТСтавкиНДС.Ставка, 0) КАК СтавкаНДС,
	|	СУММА(РасшифровкаПлатежа.СуммаПлатежа) КАК СуммаПлатежа
	|ПОМЕСТИТЬ ВтОплатаЗаДолгНДС
	|ИЗ
	|	ВтОплатаЗаДолг КАК ВтОплатаЗаДолг
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РасходИзКассы.РасшифровкаПлатежа КАК РасшифровкаПлатежа
	|		ПО ВтОплатаЗаДолг.ДенежныйДокумент = РасшифровкаПлатежа.Ссылка
	|			И (РасшифровкаПлатежа.Документ = ВтОплатаЗаДолг.ТоварныйДокумент)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтавкиНДС КАК ВТСтавкиНДС
	|		ПО (ВТСтавкиНДС.Ссылка = РасшифровкаПлатежа.СтавкаНДС)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВтОплатаЗаДолг.ДенежныйДокумент,
	|	РасшифровкаПлатежа.Документ,
	|	ЕСТЬNULL(ВТСтавкиНДС.Ставка, 0)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВтОплатаЗаДолг.ДенежныйДокумент,
	|	РасшифровкаПлатежа.Документ,
	|	ЕСТЬNULL(ВТСтавкиНДС.Ставка, 0),
	|	СУММА(РасшифровкаПлатежа.СуммаПлатежа)
	|ИЗ
	|	ВтОплатаЗаДолг КАК ВтОплатаЗаДолг
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РасходСоСчета.РасшифровкаПлатежа КАК РасшифровкаПлатежа
	|		ПО ВтОплатаЗаДолг.ДенежныйДокумент = РасшифровкаПлатежа.Ссылка
	|			И (РасшифровкаПлатежа.Документ = ВтОплатаЗаДолг.ТоварныйДокумент)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтавкиНДС КАК ВТСтавкиНДС
	|		ПО (ВТСтавкиНДС.Ссылка = РасшифровкаПлатежа.СтавкаНДС)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВтОплатаЗаДолг.ДенежныйДокумент,
	|	РасшифровкаПлатежа.Документ,
	|	ЕСТЬNULL(ВТСтавкиНДС.Ставка, 0)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВтОплатаЗаДолг.ДенежныйДокумент,
	|	РасшифровкаПлатежа.Документ,
	|	ЕСТЬNULL(ВТСтавкиНДС.Ставка, 0),
	|	-СУММА(РасшифровкаПлатежа.СуммаПлатежа)
	|ИЗ
	|	ВтОплатаЗаДолг КАК ВтОплатаЗаДолг
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеНаСчет.РасшифровкаПлатежа КАК РасшифровкаПлатежа
	|		ПО ВтОплатаЗаДолг.ДенежныйДокумент = РасшифровкаПлатежа.Ссылка
	|			И (РасшифровкаПлатежа.Документ = ВтОплатаЗаДолг.ТоварныйДокумент)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтавкиНДС КАК ВТСтавкиНДС
	|		ПО (ВТСтавкиНДС.Ссылка = РасшифровкаПлатежа.СтавкаНДС)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВтОплатаЗаДолг.ДенежныйДокумент,
	|	РасшифровкаПлатежа.Документ,
	|	ЕСТЬNULL(ВТСтавкиНДС.Ставка, 0)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВтОплатаЗаДолг.ДенежныйДокумент,
	|	РасшифровкаПлатежа.Документ,
	|	ЕСТЬNULL(ВТСтавкиНДС.Ставка, 0),
	|	-СУММА(РасшифровкаПлатежа.СуммаПлатежа)
	|ИЗ
	|	ВтОплатаЗаДолг КАК ВтОплатаЗаДолг
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеВКассу.РасшифровкаПлатежа КАК РасшифровкаПлатежа
	|		ПО ВтОплатаЗаДолг.ДенежныйДокумент = РасшифровкаПлатежа.Ссылка
	|			И (РасшифровкаПлатежа.Документ = ВтОплатаЗаДолг.ТоварныйДокумент)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтавкиНДС КАК ВТСтавкиНДС
	|		ПО (ВТСтавкиНДС.Ссылка = РасшифровкаПлатежа.СтавкаНДС)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВтОплатаЗаДолг.ДенежныйДокумент,
	|	РасшифровкаПлатежа.Документ,
	|	ЕСТЬNULL(ВТСтавкиНДС.Ставка, 0)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВтОплатаЗаДолг.ДенежныйДокумент,
	|	Оплаты.Документ,
	|	ВЫБОР
	|		КОГДА Оплаты.Ссылка.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ОблагаетсяНДС)
	|			ТОГДА 18
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	СУММА(Оплаты.СуммаПлатежа)
	|ИЗ
	|	ВтОплатаЗаДолг КАК ВтОплатаЗаДолг
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.АвансовыйОтчет.Оплаты КАК Оплаты
	|		ПО ВтОплатаЗаДолг.ДенежныйДокумент = Оплаты.Ссылка
	|			И (Оплаты.Документ = ВтОплатаЗаДолг.ТоварныйДокумент)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВтОплатаЗаДолг.ДенежныйДокумент,
	|	Оплаты.Документ,
	|	Оплаты.Ссылка.НалогообложениеНДС
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Предоплата.Документ,
	|	ВтОплатаЗаДолг.ТоварныйДокумент,
	|	ВЫБОР
	|		КОГДА Предоплата.Ссылка.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ОблагаетсяНДС)
	|			ТОГДА 18
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	СУММА(Предоплата.СуммаПлатежа)
	|ИЗ
	|	ВтОплатаЗаДолг КАК ВтОплатаЗаДолг
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриходнаяНакладная.Предоплата КАК Предоплата
	|		ПО ВтОплатаЗаДолг.ТоварныйДокумент = Предоплата.Ссылка
	|			И (Предоплата.Документ = ВтОплатаЗаДолг.ДенежныйДокумент)
	|
	|СГРУППИРОВАТЬ ПО
	|	Предоплата.Документ,
	|	ВтОплатаЗаДолг.ТоварныйДокумент,
	|	Предоплата.Ссылка.НалогообложениеНДС
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Предоплата.Документ,
	|	ВтОплатаЗаДолг.ТоварныйДокумент,
	|	ВЫБОР
	|		КОГДА Предоплата.Ссылка.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ОблагаетсяНДС)
	|			ТОГДА 18
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	-СУММА(Предоплата.СуммаПлатежа)
	|ИЗ
	|	ВтОплатаЗаДолг КАК ВтОплатаЗаДолг
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РасходнаяНакладная.Предоплата КАК Предоплата
	|		ПО ВтОплатаЗаДолг.ТоварныйДокумент = Предоплата.Ссылка
	|			И (Предоплата.Документ = ВтОплатаЗаДолг.ДенежныйДокумент)
	|
	|СГРУППИРОВАТЬ ПО
	|	Предоплата.Документ,
	|	ВтОплатаЗаДолг.ТоварныйДокумент,
	|	Предоплата.Ссылка.НалогообложениеНДС
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Предоплата.Документ,
	|	ВтОплатаЗаДолг.ТоварныйДокумент,
	|	ВЫБОР
	|		КОГДА Предоплата.Ссылка.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ОблагаетсяНДС)
	|			ТОГДА 18
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	СУММА(Предоплата.СуммаРасчетов)
	|ИЗ
	|	ВтОплатаЗаДолг КАК ВтОплатаЗаДолг
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ДополнительныеРасходы.Предоплата КАК Предоплата
	|		ПО ВтОплатаЗаДолг.ТоварныйДокумент = Предоплата.Ссылка
	|			И (Предоплата.Документ = ВтОплатаЗаДолг.ДенежныйДокумент)
	|
	|СГРУППИРОВАТЬ ПО
	|	Предоплата.Документ,
	|	ВтОплатаЗаДолг.ТоварныйДокумент,
	|	Предоплата.Ссылка.НалогообложениеНДС
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Предоплата.Документ,
	|	ВтОплатаЗаДолг.ТоварныйДокумент,
	|	ВЫБОР
	|		КОГДА Предоплата.Ссылка.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ОблагаетсяНДС)
	|			ТОГДА 18
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	СУММА(ВЫБОР
	|			КОГДА НЕ Предоплата.ЕстьВДокументеПоступления
	|				ТОГДА Предоплата.СуммаРасчетов
	|			ИНАЧЕ Предоплата.СуммаРасчетов - Предоплата.СуммаРасчетовДоИзменения
	|		КОНЕЦ)
	|ИЗ
	|	ВтОплатаЗаДолг КАК ВтОплатаЗаДолг
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КорректировкаПоступления.Предоплата КАК Предоплата
	|		ПО ВтОплатаЗаДолг.ТоварныйДокумент = Предоплата.Ссылка
	|			И (Предоплата.Документ = ВтОплатаЗаДолг.ДенежныйДокумент)
	|
	|СГРУППИРОВАТЬ ПО
	|	Предоплата.Документ,
	|	ВтОплатаЗаДолг.ТоварныйДокумент,
	|	Предоплата.Ссылка.НалогообложениеНДС
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Предоплата.Документ,
	|	ВтОплатаЗаДолг.ТоварныйДокумент,
	|	ВЫБОР
	|		КОГДА Предоплата.Ссылка.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ОблагаетсяНДС)
	|			ТОГДА 18
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	СУММА(Предоплата.СуммаРасчетов)
	|ИЗ
	|	ВтОплатаЗаДолг КАК ВтОплатаЗаДолг
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтчетКомитенту.Предоплата КАК Предоплата
	|		ПО ВтОплатаЗаДолг.ТоварныйДокумент = Предоплата.Ссылка
	|			И (Предоплата.Документ = ВтОплатаЗаДолг.ДенежныйДокумент)
	|
	|СГРУППИРОВАТЬ ПО
	|	Предоплата.Документ,
	|	ВтОплатаЗаДолг.ТоварныйДокумент,
	|	Предоплата.Ссылка.НалогообложениеНДС
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Предоплата.Документ,
	|	ВтОплатаЗаДолг.ТоварныйДокумент,
	|	ВЫБОР
	|		КОГДА Предоплата.Ссылка.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ОблагаетсяНДС)
	|			ТОГДА 18
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	СУММА(Предоплата.СуммаРасчетов)
	|ИЗ
	|	ВтОплатаЗаДолг КАК ВтОплатаЗаДолг
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтчетПереработчика.Предоплата КАК Предоплата
	|		ПО ВтОплатаЗаДолг.ТоварныйДокумент = Предоплата.Ссылка
	|			И (Предоплата.Документ = ВтОплатаЗаДолг.ДенежныйДокумент)
	|
	|СГРУППИРОВАТЬ ПО
	|	Предоплата.Документ,
	|	ВтОплатаЗаДолг.ТоварныйДокумент,
	|	Предоплата.Ссылка.НалогообложениеНДС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АвансовыйОтчет.Дата КАК Период,
	|	АвансовыйОтчет.Ссылка КАК Регистратор,
	|	АвансовыйОтчет.Ссылка КАК ДенежныйДокумент,
	|	АвансовыйОтчет.Ссылка КАК ТоварныйДокумент,
	|	АвансовыйОтчет.Организация,
	|	АвансовыйОтчетЗапасы.Номенклатура,
	|	НЕ АвансовыйОтчетЗапасы.ТоварыДляПроизводства КАК ЭтоТоварыКРеализации,
	|	АвансовыйОтчет.УчитыватьВНУ,
	|	АвансовыйОтчетЗапасы.Всего КАК Сумма,
	|	0 КАК СуммаНДС,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(АвансовыйОтчетЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
	|			ТОГДА АвансовыйОтчетЗапасы.Количество
	|		ИНАЧЕ АвансовыйОтчетЗапасы.Количество * АвансовыйОтчетЗапасы.ЕдиницаИзмерения.Коэффициент
	|	КОНЕЦ КАК Количество,
	|	АвансовыйОтчет.Дата КАК ДатаДокумента,
	|	АвансовыйОтчет.ВалютаДокумента,
	|	ЕСТЬNULL(ВТСтавкиНДС.Ставка, 0) КАК СтавкаНДС
	|ИЗ
	|	Документ.АвансовыйОтчет КАК АвансовыйОтчет
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.АвансовыйОтчет.Запасы КАК АвансовыйОтчетЗапасы
	|		ПО (АвансовыйОтчетЗапасы.Ссылка = АвансовыйОтчет.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтавкиНДС КАК ВТСтавкиНДС
	|		ПО (ВТСтавкиНДС.Ссылка = АвансовыйОтчетЗапасы.СтавкаНДС)
	|ГДЕ
	|	АвансовыйОтчет.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	АвансовыйОтчет.Дата,
	|	АвансовыйОтчет.Ссылка,
	|	АвансовыйОтчет.Ссылка,
	|	АвансовыйОтчет.Ссылка,
	|	АвансовыйОтчет.Организация,
	|	NULL,
	|	ЛОЖЬ,
	|	АвансовыйОтчет.УчитыватьВНУ,
	|	СУММА(АвансовыйОтчетРасходы.Всего),
	|	0,
	|	0,
	|	АвансовыйОтчет.Дата,
	|	АвансовыйОтчет.ВалютаДокумента,
	|	ЕСТЬNULL(ВТСтавкиНДС.Ставка, 0)
	|ИЗ
	|	Документ.АвансовыйОтчет КАК АвансовыйОтчет
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.АвансовыйОтчет.Расходы КАК АвансовыйОтчетРасходы
	|		ПО (АвансовыйОтчетРасходы.Ссылка = АвансовыйОтчет.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтавкиНДС КАК ВТСтавкиНДС
	|		ПО (ВТСтавкиНДС.Ссылка = АвансовыйОтчетРасходы.СтавкаНДС)
	|ГДЕ
	|	АвансовыйОтчет.Проведен
	|
	|СГРУППИРОВАТЬ ПО
	|	АвансовыйОтчет.Ссылка,
	|	АвансовыйОтчет.Дата,
	|	АвансовыйОтчет.Организация,
	|	АвансовыйОтчет.ВалютаДокумента,
	|	АвансовыйОтчет.УчитыватьВНУ,
	|	ЕСТЬNULL(ВТСтавкиНДС.Ставка, 0),
	|	АвансовыйОтчет.Ссылка,
	|	АвансовыйОтчет.Ссылка,
	|	АвансовыйОтчет.Дата
	|ИТОГИ ПО
	|	Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтОплатаЗаДолг.Период,
	|	ВтОплатаЗаДолг.ВозвратПоставщику,
	|	ВтОплатаЗаДолг.Регистратор,
	|	ВтОплатаЗаДолг.ДенежныйДокумент,
	|	ВтОплатаЗаДолг.ТоварныйДокумент,
	|	ВтОплатаЗаДолг.Организация,
	|	NULL КАК Номенклатура,
	|	ВтОплатаЗаДолг.ЭтоТоварыКРеализации,
	|	ВтОплатаЗаДолг.УчитыватьВНУ,
	|	ВтОплатаЗаДолгНДС.СуммаПлатежа КАК Сумма,
	|	0 КАК СуммаНДС,
	|	0 КАК Количество,
	|	ВтОплатаЗаДолг.ДатаДокумента,
	|	ВтОплатаЗаДолг.ВалютаДокумента,
	|	ЕСТЬNULL(ВтОплатаЗаДолгНДС.СтавкаНДС, 0) КАК СтавкаНДС
	|ИЗ
	|	ВтОплатаЗаДолг КАК ВтОплатаЗаДолг
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтОплатаЗаДолгНДС КАК ВтОплатаЗаДолгНДС
	|		ПО (ВтОплатаЗаДолгНДС.ДенежныйДокумент = ВтОплатаЗаДолг.ДенежныйДокумент)
	|			И (ВтОплатаЗаДолгНДС.Документ = ВтОплатаЗаДолг.ТоварныйДокумент)
	|ГДЕ
	|	ВтОплатаЗаДолгНДС.СуммаПлатежа <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТТоварыКРеализации.ТоварныйДокумент КАК ТоварныйДокумент,
	|	ВТТоварыКРеализации.Номенклатура,
	|	ВТТоварыКРеализации.Количество,
	|	ВТТоварыКРеализации.Сумма,
	|	ВТТоварыКРеализации.СтавкаНДС
	|ИЗ
	|	ВТТоварыКРеализации КАК ВТТоварыКРеализации
	|ГДЕ
	|	ВТТоварыКРеализации.Сумма <> 0
	|ИТОГИ ПО
	|	ТоварныйДокумент";
	
	Пакет = Запрос.ВыполнитьПакет();
	
	УчетВалюты = ПолучитьФункциональнуюОпцию("УчетВалютныхОпераций");
	НацВалюта = Константы.НациональнаяВалюта.Получить();
	
	КурсыВалютСоответствие = Новый Соответствие;
	
	// Обрабатываем авансовые отчеты
	ВыборкаАвансовыхОтчетов = Пакет[7].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаАвансовыхОтчетов.Следующий() Цикл
		НаборЗаписейДенежныеСредства = РегистрыНакопления.ЗакупкиДляКУДиР.СоздатьНаборЗаписей();
		НаборЗаписейДенежныеСредства.Отбор.Регистратор.Значение = ВыборкаАвансовыхОтчетов.Регистратор;
		ВыборкаЗаписей = ВыборкаАвансовыхОтчетов.Выбрать();
		Пока ВыборкаЗаписей.Следующий() Цикл
			НовСтр = НаборЗаписейДенежныеСредства.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр, ВыборкаЗаписей);
			НовСтр.СуммаВал = НовСтр.Сумма;
			Если УчетВалюты И ВыборкаЗаписей.ВалютаДокумента <> НацВалюта Тогда
				ТекущийКурс = КурсыВалютСоответствие.Получить(НачалоДня( ВыборкаЗаписей.ДатаДокумента));
				Если ТекущийКурс = Неопределено Или ТекущийКурс.Валюта <> ВыборкаЗаписей.ВалютаДокумента Тогда
					ТекущийКурс = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВыборкаЗаписей.ВалютаДокумента,  ВыборкаЗаписей.ДатаДокумента);
					КурсыВалютСоответствие.Вставить(НачалоДня( ВыборкаЗаписей.ДатаДокумента), ТекущийКурс);
				КонецЕсли;
				НовСтр.Сумма = НовСтр.Сумма * ТекущийКурс.Курс / ТекущийКурс.Кратность;
			КонецЕсли;
			НовСтр.СуммаНДС = НовСтр.Сумма - НовСтр.Сумма /((100+ ВыборкаЗаписей.СтавкаНДС)/100);
			НовСтр.Сумма = НовСтр.Сумма - НовСтр.СуммаНДС;
		КонецЦикла;
		
		НаборЗаписейДенежныеСредства.Записать();
	КонецЦикла;
	
	ТаблицаОплаты = Пакет[8].Выгрузить();
	ВыборкаТоваров = Пакет[9].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаТоваров.Следующий() Цикл
		СвободныеОплаты = ТаблицаОплаты.НайтиСтроки(Новый Структура("ТоварныйДокумент", ВыборкаТоваров.ТоварныйДокумент));
		
		ВыборкаЗаписей = ВыборкаТоваров.Выбрать();
		Остаток = 0;
		СтавкаНДС = 0;
		Для Каждого ДокументОплаты Из СвободныеОплаты Цикл
			
			НаборЗаписейЗакупкиДляКУДиР = РегистрыНакопления.ЗакупкиДляКУДиР.СоздатьНаборЗаписей();
			НаборЗаписейЗакупкиДляКУДиР.Отбор.Регистратор.Значение = ДокументОплаты.Регистратор;
			НаборЗаписейЗакупкиДляКУДиР.Прочитать();
			
			Если Остаток > 0 Тогда
				НовСтр = НаборЗаписейЗакупкиДляКУДиР.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтр, ВыборкаЗаписей);
				ЗаполнитьЗначенияСвойств(НовСтр, ДокументОплаты,,"ЭтоТоварыКРеализации");
				Если НЕ ДокументОплаты.ВозвратПоставщику Тогда
					Если ДокументОплаты.Сумма >= Остаток Тогда
						НовСтр.Сумма = Остаток;
					Иначе
						НовСтр.Сумма = ДокументОплаты.Сумма;
						Остаток = Остаток - НовСтр.Сумма;
					КонецЕсли;
				Иначе
					Если ДокументОплаты.Сумма <= Остаток Тогда
						НовСтр.Сумма = Остаток;
					Иначе
						НовСтр.Сумма = ДокументОплаты.Сумма;
						Остаток = Остаток - НовСтр.Сумма;
					КонецЕсли;
				КонецЕсли;
				ДокументОплаты.Сумма = ДокументОплаты.Сумма - НовСтр.Сумма;
				НовСтр.Номенклатура = ВыборкаЗаписей.Номенклатура;
				НовСтр.СуммаВал = НовСтр.Сумма;
				Если УчетВалюты И ДокументОплаты.ВалютаДокумента <> НацВалюта Тогда
					ТекущийКурс = КурсыВалютСоответствие.Получить(НачалоДня( ДокументОплаты.ДатаДокумента));
					Если ТекущийКурс = Неопределено Или ТекущийКурс.Валюта <> ДокументОплаты.ВалютаДокумента Тогда
						ТекущийКурс = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ДокументОплаты.ВалютаДокумента,  ДокументОплаты.ДатаДокумента);
						КурсыВалютСоответствие.Вставить(НачалоДня( ДокументОплаты.ДатаДокумента), ТекущийКурс);
					КонецЕсли;
					НовСтр.Сумма = НовСтр.Сумма * ТекущийКурс.Курс / ТекущийКурс.Кратность;
				КонецЕсли;
				НовСтр.СуммаНДС = НовСтр.Сумма - НовСтр.Сумма /((100+ СтавкаНДС)/100);
				НовСтр.Сумма = НовСтр.Сумма - НовСтр.СуммаНДС;
			КонецЕсли;
			
			Пока ДокументОплаты.Сумма <> 0 И ВыборкаЗаписей.Следующий() Цикл
				НовСтр = НаборЗаписейЗакупкиДляКУДиР.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтр, ВыборкаЗаписей);
				ЗаполнитьЗначенияСвойств(НовСтр, ДокументОплаты,,"ЭтоТоварыКРеализации");
				Если НЕ ДокументОплаты.ВозвратПоставщику Тогда
					Если ДокументОплаты.Сумма >= ВыборкаЗаписей.Сумма Тогда
						НовСтр.Сумма = ВыборкаЗаписей.Сумма;
					Иначе
						НовСтр.Сумма = ДокументОплаты.Сумма;
						Остаток = ВыборкаЗаписей.Сумма - НовСтр.Сумма;
					КонецЕсли;
				Иначе
					Если ДокументОплаты.Сумма <= ВыборкаЗаписей.Сумма Тогда
						НовСтр.Сумма = ВыборкаЗаписей.Сумма;
					Иначе
						НовСтр.Сумма = ДокументОплаты.Сумма;
						Остаток = ВыборкаЗаписей.Сумма - НовСтр.Сумма;
					КонецЕсли;
				КонецЕсли;
				СтавкаНДС =  ВыборкаЗаписей.СтавкаНДС;
				ДокументОплаты.Сумма = ДокументОплаты.Сумма - НовСтр.Сумма;
				НовСтр.СуммаВал = НовСтр.Сумма;
				Если УчетВалюты И ДокументОплаты.ВалютаДокумента <> НацВалюта Тогда
					ТекущийКурс = КурсыВалютСоответствие.Получить(НачалоДня( ДокументОплаты.ДатаДокумента));
					Если ТекущийКурс = Неопределено Или ТекущийКурс.Валюта <> ДокументОплаты.ВалютаДокумента Тогда
						ТекущийКурс = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ДокументОплаты.ВалютаДокумента,  ДокументОплаты.ДатаДокумента);
						КурсыВалютСоответствие.Вставить(НачалоДня( ДокументОплаты.ДатаДокумента), ТекущийКурс);
					КонецЕсли;
					НовСтр.Сумма = НовСтр.Сумма * ТекущийКурс.Курс / ТекущийКурс.Кратность;
				КонецЕсли;
				НовСтр.СуммаНДС = НовСтр.Сумма - НовСтр.Сумма /((100+ СтавкаНДС)/100);
				НовСтр.Номенклатура = ВыборкаЗаписей.Номенклатура;
				НовСтр.Количество =  ВыборкаЗаписей.Количество;
				НовСтр.Сумма = НовСтр.Сумма - НовСтр.СуммаНДС;
			КонецЦикла;
			НаборЗаписейЗакупкиДляКУДиР.Записать();
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого ДокументОплаты Из ТаблицаОплаты Цикл
		Если ДокументОплаты.Сумма = 0 Тогда
			Продолжить;
		КонецЕсли;
		НаборЗаписейЗакупкиДляКУДиР = РегистрыНакопления.ЗакупкиДляКУДиР.СоздатьНаборЗаписей();
		НаборЗаписейЗакупкиДляКУДиР.Отбор.Регистратор.Значение = ДокументОплаты.Регистратор;
		НаборЗаписейЗакупкиДляКУДиР.Прочитать();
		НовСтр = НаборЗаписейЗакупкиДляКУДиР.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, ДокументОплаты);
		НовСтр.СуммаВал = НовСтр.Сумма;
		Если УчетВалюты И ДокументОплаты.ВалютаДокумента <> НацВалюта Тогда
			ТекущийКурс = КурсыВалютСоответствие.Получить(НачалоДня( ДокументОплаты.ДатаДокумента));
			Если ТекущийКурс = Неопределено Или ТекущийКурс.Валюта <> ДокументОплаты.ВалютаДокумента Тогда
				ТекущийКурс = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ДокументОплаты.ВалютаДокумента,  ДокументОплаты.ДатаДокумента);
				КурсыВалютСоответствие.Вставить(НачалоДня( ДокументОплаты.ДатаДокумента), ТекущийКурс);
			КонецЕсли;
			НовСтр.Сумма = НовСтр.Сумма * ТекущийКурс.Курс / ТекущийКурс.Кратность;
		КонецЕсли;
		НовСтр.СуммаНДС = НовСтр.Сумма - НовСтр.Сумма /((100+ ДокументОплаты.СтавкаНДС)/100);
		НовСтр.Сумма = НовСтр.Сумма - НовСтр.СуммаНДС;
		ДокументОплаты.Сумма = 0;
		
		НаборЗаписейЗакупкиДляКУДиР.Записать();
	КонецЦикла;
	
	Если Параметры <> Неопределено Тогда
		Параметры.ОбработкаЗавершена = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьЗадачуРасчетСтраховыхВзносовНа2017год() Экспорт
	
	Если ОбменДаннымиПовтИсп.ЭтоАвтономноеРабочееМесто() Тогда
		Возврат;
	КонецЕсли;
	
	Справочники.КалендарьПодготовкиОтчетности.ЗагрузитьКалендарьПодготовкиОтчетности();
	
КонецПроцедуры

Процедура ОбновитьПараметрыРасчетаДоставки_1_6_10(Параметры = Неопределено) Экспорт
	
	ЗаполнитьПараметрыРасчетовДоставки();
	
	Если Параметры <> Неопределено Тогда
		Параметры.ОбработкаЗавершена = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыСобственнойСлужбыДоставки_1_6_10(Параметры = Неопределено) Экспорт
	
	ЗаполнитьРеквизитыСобственнойСлужбыДоставки();
	
	Если Параметры <> Неопределено Тогда
		Параметры.ОбработкаЗавершена = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьПредопределенныеШаблоныКоммерческогоПредложения(Параметры = Неопределено) Экспорт
	
	ШаблоныСозданы = ШаблоныПечатиОфисныхДокументов.СоздатьПредопределенныеШаблоныКоммерческогоПредложения();
	Если Параметры <> Неопределено Тогда
		Параметры.ОбработкаЗавершена = ШаблоныСозданы;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьВидыВычетовНДФЛ2017() Экспорт
	
	Сотрудники.ЗаполнитьРазмерыВычетовНДФЛ();
	
КонецПроцедуры

Процедура ВключитьИспользованиеМобильнойТелефонии(Параметры = Неопределено) Экспорт
	
	ТелефонияИспользуется = Константы.ИспользоватьМобильнуюТелефонию.Получить();
	
	Если НЕ ТелефонияИспользуется Тогда
		СписокПользователей = ПользователиИнформационнойБазы.ПолучитьПользователей();
		Для каждого Пользователь Из СписокПользователей Цикл
			ПерсональноеМобильноеУстройство = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиТелефонии", "УзелОбмена", Неопределено,, Пользователь.Имя);
			Если ПерсональноеМобильноеУстройство <> Неопределено Тогда
				ТелефонияИспользуется = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Константы.ИспользоватьМобильнуюТелефонию.Установить(ТелефонияИспользуется);
	КонецЕсли;
	
	Если Параметры <> Неопределено Тогда
		Параметры.ОбработкаЗавершена = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура СнятьРегистрациюКонстантыОтложенноеОбновлениеЗавершеноУспешно(Параметры = Неопределено) Экспорт
	
	Выборка = ПланыОбмена.АвтономнаяРабота.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ЭтотУзел Тогда
			Продолжить;
		КонецЕсли;
		
		ПланыОБмена.УдалитьРегистрациюИзменений(Выборка.Ссылка, Метаданные.Константы.ОтложенноеОбновлениеЗавершеноУспешно);
		ПланыОБмена.УдалитьРегистрациюИзменений(Выборка.Ссылка, Метаданные.РегистрыСведений.ВерсииПодсистем);
		ПланыОБмена.УдалитьРегистрациюИзменений(Выборка.Ссылка, Метаданные.РегистрыСведений.НДФЛРазмерВычетов);
		
	КонецЦикла;
	
	
КонецПроцедуры

Процедура ПометитьЗадачиСЗВМНаУдаление() Экспорт
	
	Если ОбменДаннымиПовтИсп.ЭтоАвтономноеРабочееМесто() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КалендарьПодготовкиОтчетности.Ссылка
	|ИЗ
	|	Справочник.КалендарьПодготовкиОтчетности КАК КалендарьПодготовкиОтчетности
	|ГДЕ
	|	КалендарьПодготовкиОтчетности.Задача = &Задача
	|	И КалендарьПодготовкиОтчетности.ДатаОкончанияСобытия > &Начало2017Года
	|	И ДЕНЬ(КалендарьПодготовкиОтчетности.ДатаОкончанияСобытия) < 15";
	
	Запрос.УстановитьПараметр("Задача", Справочники.ЗадачиКалендаряПодготовкиОтчетности.СведенияОЗастрахованныхЛицах);
	Запрос.УстановитьПараметр("Начало2017Года", '20170101');
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Задача = Выборка.Ссылка.ПолучитьОбъект();
		Задача.УстановитьПометкуУдаления(Истина);
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработатьГодовые6НДФЛ() Экспорт
	
	Если ОбменДаннымиПовтИсп.ЭтоАвтономноеРабочееМесто() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КалендарьПодготовкиОтчетности.Ссылка
	|ИЗ
	|	Справочник.КалендарьПодготовкиОтчетности КАК КалендарьПодготовкиОтчетности
	|ГДЕ
	|	КалендарьПодготовкиОтчетности.Задача = &Задача
	|	И (КалендарьПодготовкиОтчетности.ДатаОкончанияСобытия = &СдачаВ2017Году
	|	ИЛИ КалендарьПодготовкиОтчетности.ДатаОкончанияСобытия =&СдачаВ2018Году)";
	
	Запрос.УстановитьПараметр("Задача", Справочники.ЗадачиКалендаряПодготовкиОтчетности.Форма6НДФЛ);
	Запрос.УстановитьПараметр("СдачаВ2017Году", '20170430');
	Запрос.УстановитьПараметр("СдачаВ2018Году", '20180430');
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Задача = Выборка.Ссылка.ПолучитьОбъект();
		Если Задача.ДатаОкончанияСобытия = '20170430' Тогда
			Задача.ДатаОкончанияСобытия = '20170403';
		Иначе
			Задача.ДатаОкончанияСобытия = '20180402';
		КонецЕсли;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Задача, Ложь, Ложь);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
