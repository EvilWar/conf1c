////////////////////////////////////////////////////////////////////////////////
// Подсистема "Криптография".
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Выполняет поиска сертификата в хранилище.
Функция НайтиСертификат(Сертификат, ВыполнятьПроверку = Ложь) Экспорт
	
	НайденныйСертификат = ХранилищеСертификатов.НайтиСертификат(Сертификат);
	
	Если НайденныйСертификат <> Неопределено Тогда
		НайденныйСертификат = Новый Структура(НайденныйСертификат);
		Если ВыполнятьПроверку Тогда
			СертификатДействителен = Истина;
			Попытка
				СервисКриптографии.ПроверитьСертификат(НайденныйСертификат.Сертификат);
			Исключение
				СертификатДействителен = Ложь;
			КонецПопытки;
			НайденныйСертификат.Вставить("Валиден", СертификатДействителен);
		КонецЕсли;
		ДобавитьРеквизитыДляСовместимости(НайденныйСертификат);
	КонецЕсли;
	
	Возврат НайденныйСертификат;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ДобавитьРеквизитыДляСовместимости(Сертификат)
	
	// Поля для совместимости
	Сертификат.Вставить("ДействителенС", Сертификат.ДатаНачала);
	Сертификат.Вставить("ДействителенПо", Сертификат.ДатаОкончания);
	
	Сертификат.Вставить("Поставщик", ПреобразоватьВСтроку(Сертификат.Издатель));
	Сертификат.Вставить("Владелец", ПреобразоватьВСтроку(Сертификат.Субъект));
	
	Сертификат.Вставить("Отпечаток", НРег(СтрЗаменить(Сертификат.Отпечаток, " ", "")));
	Сертификат.СерийныйНомер = НРег(СокрЛП(Сертификат.СерийныйНомер));
	Сертификат.Вставить("ЭтоЭлектроннаяПодписьВМоделиСервиса", Истина);
	
	Возврат Сертификат;
	
КонецФункции

Функция ПреобразоватьВСтроку(Издатель)
	
	СтрокаИздателя = "";
	
	Для Каждого Тег Из Издатель Цикл 
		СтрокаИздателя = СтрокаИздателя + ?(СтрокаИздателя = "", "", ",") + Тег.Ключ + "=" + Тег.Значение;
	КонецЦикла;
	
	Возврат СтрокаИздателя;
	
КонецФункции

#КонецОбласти