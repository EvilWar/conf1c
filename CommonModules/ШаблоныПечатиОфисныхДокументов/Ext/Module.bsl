
#Область ПрограммныйИнтерфейс

Функция СоздатьПредопределенныеШаблоныКоммерческогоПредложения() Экспорт
	
	Макеты = Новый Массив;
	Макеты.Добавить("КоммерческоеПредложениеПример_docx");
	Макеты.Добавить("КоммерческоеПредложениеПример_odt");
	
	Попытка
		НачатьТранзакцию();
		
		Для каждого МакетИмя Из Макеты Цикл
			МетаданныеОбъекта = Документы.ЗаказПокупателя.ПустаяСсылка().Метаданные();
			Макет = МетаданныеОбъекта.Макеты.Найти(МакетИмя);
			Если Макет = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			МакетДвоичныеДанные = Документы.ЗаказПокупателя.ПолучитьМакет(Макет);
			МакетДвоичныеДанныеАдрес = ПоместитьВоВременноеХранилище(МакетДвоичныеДанные, Новый УникальныйИдентификатор);
			
			СсылкаНаШаблон = Справочники.ШаблоныПечатиОфисныхДокументов.ПолучитьСсылку();
			
			НаименованиеМакета = Макет.Представление();
			Расширение = Прав(Макет.ПолноеИмя(), СтрДлина(Макет.ПолноеИмя()) - СтрНайти(Макет.ПолноеИмя(), "_", НаправлениеПоиска.СКонца));
			
			ПараметрыФайла = Новый Структура;
			ПараметрыФайла.Вставить("Автор", Пользователи.АвторизованныйПользователь());
			ПараметрыФайла.Вставить("ВладелецФайлов", СсылкаНаШаблон);
			ПараметрыФайла.Вставить("ИмяБезРасширения", НаименованиеМакета);
			ПараметрыФайла.Вставить("РасширениеБезТочки", Расширение);
			ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное", ТекущаяДатаСеанса());
			ПрисоединенныйФайл = ПрисоединенныеФайлы.ДобавитьПрисоединенныйФайл(ПараметрыФайла, МакетДвоичныеДанныеАдрес);
			
			Шаблон = Справочники.ШаблоныПечатиОфисныхДокументов.СоздатьЭлемент();
			Шаблон.Заполнить(Неопределено);
			Шаблон.Наименование = НаименованиеМакета;
			Шаблон.ОбъектПечати = МетаданныеОбъекта.ПолноеИмя();
			Шаблон.ФайлШаблон = ПрисоединенныйФайл;
			Шаблон.УстановитьСсылкуНового(СсылкаНаШаблон);
			Шаблон.Записать();
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
		Возврат Истина;
	Исключение
		ОтменитьТранзакцию();
		
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Ошибка создания предопределенных шаблонов коммерческих предложений:
				|%1'"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
		);
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Справочники.ШаблоныПечатиОфисныхДокументов,, ТекстСообщения);
			
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

Функция СФормироватьДокумент(Шаблон, ОбъектПечати, УникальныйИдентификатор) Экспорт
	
	ДанныеШаблона = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Шаблон, "Наименование,ФайлШаблон");
	
	ШаблонНаименование = ДанныеШаблона.Наименование;
	ШаблонПрисоединенныйФайл = ДанныеШаблона.ФайлШаблон;
	
	ДанныеФайла = ПрисоединенныеФайлы.ПолучитьДанныеФайла(ШаблонПрисоединенныйФайл, УникальныйИдентификатор, Истина);
	Расширение = НРег(ДанныеФайла.Расширение);
	
	ВременныйФайлШаблон = ПолучитьИмяВременногоФайла(Расширение);
	ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла).Записать(ВременныйФайлШаблон);
	
	ВременныйФайлШаблонАрхив = ПолучитьИмяВременногоФайла(".zip");
	КопироватьФайл(ВременныйФайлШаблон, ВременныйФайлШаблонАрхив);
	
	ВременнаяПапка = ПолучитьИмяВременногоФайла();
	Архив = Новый ЧтениеZipФайла(ВременныйФайлШаблонАрхив);
	Архив.ИзвлечьВсе(ВременнаяПапка, РежимВосстановленияПутейФайловZIP.Восстанавливать);
	Архив.Закрыть();
	
	Если Расширение = "docx" Тогда
		ОтносительныйПутьКФайлу = "/word/document.xml";
		ОтносительныйПутьКФайлуЗамены = "/word/document_update.xml";
		ЧтениеXMLАдресБуфера1 = ВременнаяПапка + "/word/document_update1.xml";
		ЧтениеXMLАдресБуфера2 = ВременнаяПапка + "/word/document_update2.xml";
	ИначеЕсли Расширение = "odt" Тогда
		ОтносительныйПутьКФайлу = "/content.xml";
		ОтносительныйПутьКФайлуЗамены = "/content_update.xml";
		ЧтениеXMLАдресБуфера1 = ВременнаяПапка + "/content_update1.xml";
		ЧтениеXMLАдресБуфера2 = ВременнаяПапка + "/content_update2.xml";
	КонецЕсли;
	
	ЧтениеXML = Новый ЧтениеXML();
	ЧтениеXML.ОткрытьФайл(ВременнаяПапка + ОтносительныйПутьКФайлу);
	
	ЧтениеXML2 = Новый ЧтениеXML();
	ЧтениеXML2.ОткрытьФайл(ВременнаяПапка + ОтносительныйПутьКФайлу);
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ВременнаяПапка + ОтносительныйПутьКФайлуЗамены);
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	Если Расширение = "docx" Тогда
		СписокПараметров = ПараметрыИзДокументаDOCX(ВременнаяПапка + ОтносительныйПутьКФайлу);
	ИначеЕсли Расширение = "odt" Тогда
		СписокПараметров = ПараметрыИзДокументаODT(ВременнаяПапка + ОтносительныйПутьКФайлу);
	КонецЕсли;
	
	КоличествоСтрокТЧ = 0;
	ПолучитьЗначенияНайденныхПараметровПоСКД(СписокПараметров, ОбъектПечати, Новый Структура, КоличествоСтрокТЧ);
	ПолучитьЗначенияНайденныхДополнительныхРеквизитов(СписокПараметров, ОбъектПечати);
	ПолучитьЗначенияКонтактнойИнформации(СписокПараметров, ОбъектПечати);
	
	Если Расширение = "docx" Тогда
		ЗаполнитьПараметрыДокументаDOCX(ЧтениеXML, ЧтениеXML2, ЗаписьXML, ЧтениеXMLАдресБуфера1, ЧтениеXMLАдресБуфера2, СписокПараметров, КоличествоСтрокТЧ);
	ИначеЕсли Расширение = "odt" Тогда
		ЗаполнитьПараметрыДокументаODT(ЧтениеXML, ЧтениеXML2, ЗаписьXML, ЧтениеXMLАдресБуфера1, ЧтениеXMLАдресБуфера2, СписокПараметров, КоличествоСтрокТЧ);
	КонецЕсли;
	
	ФайлБуфер = Новый Файл(ЧтениеXMLАдресБуфера1);
	Если ФайлБуфер.Существует() Тогда
		УдалитьФайлы(ЧтениеXMLАдресБуфера1);
	КонецЕсли;
	
	ФайлБуфер = Новый Файл(ЧтениеXMLАдресБуфера2);
	Если ФайлБуфер.Существует() Тогда
		УдалитьФайлы(ЧтениеXMLАдресБуфера2);
	КонецЕсли;
	
	ЧтениеXML.Закрыть();
	ЧтениеXML2.Закрыть();
	ЗаписьXML.Закрыть();
	
	ПереместитьФайл(ВременнаяПапка + ОтносительныйПутьКФайлуЗамены, ВременнаяПапка + ОтносительныйПутьКФайлу);
	УдалитьФайлы(ВременнаяПапка + ОтносительныйПутьКФайлуЗамены);
	
	Архиватор = Новый ЗаписьZipФайла(ВременныйФайлШаблонАрхив);
	Архиватор.Добавить(ВременнаяПапка + "\*.*", РежимСохраненияПутейZIP.СохранятьОтносительныеПути, РежимОбработкиПодкаталоговZIP.ОбрабатыватьРекурсивно);
	Архиватор.Записать();
	
	ВременныйФайлРезультат = ПолучитьИмяВременногоФайла(Расширение);
	
	ПереместитьФайл(ВременныйФайлШаблонАрхив, ВременныйФайлРезультат);
	
	ДвоичныеДанныеЗаполненногоФайла      = Новый ДвоичныеДанные(ВременныйФайлРезультат);
	ДвоичныеДанныеЗаполненногоФайлаАдрес = ПоместитьВоВременноеХранилище(ДвоичныеДанныеЗаполненногоФайла, УникальныйИдентификатор);
	
	Файл = Новый Файл(ВременныйФайлРезультат);
	Расширение = СтрЗаменить(Файл.Расширение, ".", "");
	
	УдалитьФайлы(ВременнаяПапка);
	УдалитьФайлы(ВременныйФайлШаблон);
	УдалитьФайлы(ВременныйФайлШаблонАрхив);
	УдалитьФайлы(ВременныйФайлРезультат);
	
	Наименование = ИмяФайлаПоУмолчанию(ШаблонНаименование, ОбъектПечати);
	Наименование = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(Наименование);
	ИмяФайла = Наименование + "." + Расширение;
	
	ДанныеФайла = Новый Структура;
	ДанныеФайла.Вставить("Наименование", Наименование); 
	ДанныеФайла.Вставить("ИмяФайла", ИмяФайла);
	ДанныеФайла.Вставить("Расширение", Расширение);
	ДанныеФайла.Вставить("СсылкаНаДвоичныеДанныеФайла", ДвоичныеДанныеЗаполненногоФайлаАдрес);
	ДанныеФайла.Вставить("Размер", ДвоичныеДанныеЗаполненногоФайла.Размер());
	ДанныеФайла.Вставить("ОтносительныйПуть", "");
	ДанныеФайла.Вставить("Редактирует", Неопределено);
	ДанныеФайла.Вставить("ДатаМодификацииУниверсальная", ТекущаяДатаСеанса());
	
	Возврат ДанныеФайла;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ИмяФайлаПоУмолчанию(ШаблонНаименование, ОбъектПечати)
	
	Если ОбщегоНазначения.ЭтоДокумент(Метаданные.НайтиПоТипу(ТипЗнч(ОбъектПечати))) Тогда
		ПараметрыДляВставки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОбъектПечати, "Дата,Номер");
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПрефиксацияОбъектов") Тогда
			МодульПрефиксацияОбъектовКлиентСервер = ОбщегоНазначения.ОбщийМодуль("ПрефиксацияОбъектовКлиентСервер");
			ПараметрыДляВставки.Номер = МодульПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ПараметрыДляВставки.Номер);
		КонецЕсли;
		ПараметрыДляВставки.Дата = Формат(ПараметрыДляВставки.Дата, "ДЛФ=D");
		ПараметрыДляВставки.Вставить("НазваниеПечатнойФормы", ШаблонНаименование);
		Шаблон = НСтр("ru = '[НазваниеПечатнойФормы] № [Номер] от [Дата]'");
	Иначе
		ПараметрыДляВставки = Новый Структура;
		ПараметрыДляВставки.Вставить("НазваниеПечатнойФормы",ШаблонНаименование);
		ПараметрыДляВставки.Вставить("ПредставлениеОбъекта", ОбщегоНазначения.ПредметСтрокой(ОбъектПечати));
		ПараметрыДляВставки.Вставить("ТекущаяДата",Формат(ТекущаяДатаСеанса(), "ДЛФ=D"));
		Шаблон = НСтр("ru = '[НазваниеПечатнойФормы] - [ПредставлениеОбъекта] - [ТекущаяДата]'");
	КонецЕсли;
	
	Возврат СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(Шаблон, ПараметрыДляВставки);
	
КонецФункции

Процедура СобратьИерархическоеСоответствиеПараметров(СоответствиеПараметров, Знач МассивРазобранныйПараметр)
	ЭлементСоответствия = СоответствиеПараметров.Получить(МассивРазобранныйПараметр[0]);
	Если ЭлементСоответствия = Неопределено Тогда
		Если МассивРазобранныйПараметр.Количество() > 1 Тогда
			ВнутреннийЭлементСоответствия = Новый Соответствие;
			СоответствиеПараметров.Вставить(МассивРазобранныйПараметр[0], ВнутреннийЭлементСоответствия);
			МассивРазобранныйПараметр.Удалить(0);
			СобратьИерархическоеСоответствиеПараметров(ВнутреннийЭлементСоответствия, МассивРазобранныйПараметр)
		Иначе
			Если СоответствиеПараметров[МассивРазобранныйПараметр[0]] = Неопределено Тогда
				СоответствиеПараметров.Вставить(МассивРазобранныйПараметр[0], "");
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если МассивРазобранныйПараметр.Количество() > 1 Тогда
			МассивРазобранныйПараметр.Удалить(0);
			СобратьИерархическоеСоответствиеПараметров(ЭлементСоответствия, МассивРазобранныйПараметр)
		Иначе
			Если СоответствиеПараметров[МассивРазобранныйПараметр[0]] = Неопределено Тогда
				СоответствиеПараметров.Вставить(МассивРазобранныйПараметр[0], "");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Функция РазобратьПараметрВМассивУзлов(Знач ИмяПараметра)
	
	РазобранныйПараметр = Новый Массив;
	
	Пока ИмяПараметра <> "" Цикл
		Если СтрНачинаетсяС(ИмяПараметра, "[") Тогда
			ЧастьПараметра = Лев(ИмяПараметра, СтрНайти(ИмяПараметра, "]"));
		ИначеЕсли СтрНайти(ИмяПараметра, ".") <> 0 Тогда
			ЧастьПараметра = Лев(ИмяПараметра, СтрНайти(ИмяПараметра, ".") - 1);
		Иначе
			ЧастьПараметра = ИмяПараметра;
		КонецЕсли;
		РазобранныйПараметр.Добавить(ЧастьПараметра);
		ИмяПараметра = Прав(ИмяПараметра, СтрДлина(ИмяПараметра) - СтрДлина(ЧастьПараметра));
		Если СтрНачинаетсяС(ИмяПараметра, ".") Тогда
			ИмяПараметра = Прав(ИмяПараметра, СтрДлина(ИмяПараметра) - 1);
		КонецЕсли;
	КонецЦикла;
	
	Возврат РазобранныйПараметр;
	
КонецФункции

Процедура ОбработатьНайденныйМассивПараметров(СоответствиеПараметров, МассивПараметров)
	
	Для каждого ЭлементаМассиваПараметров Из МассивПараметров Цикл
		ИмяПараметра = ЭлементаМассиваПараметров.Ключ;
		МассивРазобранныйПараметр = РазобратьПараметрВМассивУзлов(ИмяПараметра);
		
		СобратьИерархическоеСоответствиеПараметров(СоответствиеПараметров, МассивРазобранныйПараметр);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПолучитьЗначенияНайденныхПараметровПоСКД(СписокПараметров, Предмет, ДополнительныеПараметры, КоличествоСтрокТЧ)
	
	Если СписокПараметров.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗапроса = Новый Массив;
	МетаданныеОбъекта = Предмет.Метаданные();
	ИмяОбъекта = МетаданныеОбъекта.Имя;
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(МетаданныеОбъекта.ПолноеИмя());
	МакетСКД = МенеджерОбъекта.ПолучитьМакет("СКД_ДанныеШаблонаПечатиОфисныхДокументов");
	
	АдресСхемы = ПоместитьВоВременноеХранилище(МакетСКД);
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы));
	Для Каждого ДоступныйПараметр Из КомпоновщикНастроек.Настройки.ПараметрыДанных.ДоступныеПараметры.Элементы Цикл
		Если СтрСравнить(ДоступныйПараметр.Заголовок, "Период") <> 0 Тогда
			ПараметрыЗапроса.Добавить(Строка(ДоступныйПараметр.Параметр));
		КонецЕсли;
	КонецЦикла;
	
	КомпоновщикНастроек.ЗагрузитьНастройки(МакетСКД.НастройкиПоУмолчанию);
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
	
	ДобавитьПоляКомпоновкиДанныхРекурсивно(
		КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора,
		КомпоновщикНастроек.Настройки.Выбор.Элементы,
		СписокПараметров[ИмяОбъекта]
	);
	
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(МакетСКД, КомпоновщикНастроек.ПолучитьНастройки(),,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	ТекстЗапросаМакет = МакетКомпоновкиДанных.НаборыДанных.Данные.Запрос;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаМакет;
	
	ЕстьНезаполненныйПараметр = Ложь;
	Для каждого ТребуемыйПараметр Из ПараметрыЗапроса Цикл
		Если СтрСравнить(ТребуемыйПараметр, "ТекущаяДата") = 0 Тогда
			Запрос.УстановитьПараметр(ТребуемыйПараметр, ТекущаяДатаСеанса());
		ИначеЕсли СтрСравнить(ТребуемыйПараметр, ИмяОбъекта) = 0 Тогда
			Запрос.УстановитьПараметр(ТребуемыйПараметр, Предмет);
		Иначе
			Если ДополнительныеПараметры.ПараметрыСКД.Свойство(ТребуемыйПараметр) Тогда
				Запрос.УстановитьПараметр(ТребуемыйПараметр, ДополнительныеПараметры.ПараметрыСКД[ТребуемыйПараметр]);
			Иначе
				ЕстьНезаполненныйПараметр = Истина;
				Прервать;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьНезаполненныйПараметр Тогда
		ВызватьИсключение НСтр("ru = 'Не удалось сформировать сообщение, т.к. отсутствуют необходимые параметры.'");
	КонецЕсли;
	
	Для каждого Параметр Из МакетКомпоновкиДанных.ЗначенияПараметров Цикл
		Если Запрос.Параметры.Свойство(Параметр.Имя) Тогда
			Продолжить;
		КонецЕсли;
		Запрос.УстановитьПараметр(Параметр.Имя, Параметр.Значение);
	КонецЦикла;
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Если РезультатЗапроса.Количество() > 0 Тогда
		СтрокаТаблицыЗначенийВСоответствие(Предмет, РезультатЗапроса[0], СписокПараметров[ИмяОбъекта], МакетСКД.НаборыДанных.Данные.Поля, КоличествоСтрокТЧ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьЗначенияНайденныхДополнительныхРеквизитов(СписокПараметров, Предмет)
	
	Если СписокПараметров.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗначенияСвойств = УправлениеСвойствами.ПолучитьЗначенияСвойств(Предмет, Истина, Ложь);
	
	Для каждого Параметр Из СписокПараметров Цикл
		
		Если ЗначениеЗаполнено(Параметр.Значение) Тогда
			Продолжить;
		КонецЕсли;
		
		Для каждого СтрДопРеквизит Из ЗначенияСвойств Цикл
			
			Если СтрСравнить(СтрДопРеквизит.Свойство.Наименование, Параметр.Ключ) = 0 Тогда
				СписокПараметров.Вставить(Параметр.Ключ, Формат(СтрДопРеквизит.Значение, СтрДопРеквизит.Свойство.ФорматСвойства));
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ИмяПараметраВидКонтактнойИнформации(ВидКонтактнойИнформацииНаименование) Экспорт
	
	Если СтрНайти(ВидКонтактнойИнформацииНаименование, " ")
		ИЛИ СтрНайти(ВидКонтактнойИнформацииНаименование, ".")
		ИЛИ СтрНайти(ВидКонтактнойИнформацииНаименование, "-") Тогда
		
		Возврат СтрШаблон("[%1]", ВидКонтактнойИнформацииНаименование);
		
	Иначе
		
		Возврат ВидКонтактнойИнформацииНаименование;
		
	КонецЕсли;
	
КонецФункции

Процедура ПолучитьЗначенияКонтактнойИнформации(СписокПараметров, Предмет)
	
	Если СписокПараметров.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МетаданныеОбъекта = Предмет.Метаданные();
	ПараметрыПредмета = СписокПараметров[МетаданныеОбъекта.Имя];
	ОбъектыСКонтактнойИнформацией = Новый Массив;
	ВладельцыКонтактнойИнформации = Новый Массив;
	
	Для каждого Реквизит Из МетаданныеОбъекта.Реквизиты Цикл
		
		ПараметрыРеквизита = ПараметрыПредмета.Получить(Реквизит.Имя);
		
		Если ПараметрыРеквизита = Неопределено ИЛИ ТипЗнч(ПараметрыРеквизита) <> Тип("Соответствие") Тогда
			Продолжить;
		КонецЕсли;
		
		ВладелецКИ = Предмет[Реквизит.Имя];
		ОбъектКИ = ВладелецКИ;
		Если ТипЗнч(ВладелецКИ) = Тип("СправочникСсылка.Сотрудники") Тогда
			ВладелецКИ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВладелецКИ, "Физлицо");
		КонецЕсли;
		
		ВидыКонтактнойИнформации = УправлениеКонтактнойИнформацией.ВидыКонтактнойИнформацияОбъекта(ВладелецКИ);
		Если ВидыКонтактнойИнформации.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ВладельцыКонтактнойИнформации.Добавить(ВладелецКИ);
		ОбъектыСКонтактнойИнформацией.Добавить(Новый Структура("Ссылка,ИмяПараметра", ОбъектКИ, Реквизит.Имя));
		
	КонецЦикла;
	
	Если ОбъектыСКонтактнойИнформацией.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	КонтактнаяИнформацияОбъектов = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(ВладельцыКонтактнойИнформации);
	Для каждого ОбъектКИ Из ОбъектыСКонтактнойИнформацией Цикл
		
		ВладелецКИ = ОбъектКИ.Ссылка;
		Если ТипЗнч(ВладелецКИ) = Тип("СправочникСсылка.Сотрудники") Тогда
			ВладелецКИ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВладелецКИ, "Физлицо");
		КонецЕсли;
		
		ПараметрыРеквизита = ПараметрыПредмета.Получить(ОбъектКИ.ИмяПараметра).Получить("КонтактнаяИнформация");
		Если ПараметрыРеквизита = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ЗначенияКИ = КонтактнаяИнформацияОбъектов.НайтиСтроки(Новый Структура("Объект", ВладелецКИ));
		Для каждого ЗначениеКИ Из ЗначенияКИ Цикл
			НаименованиеВидаКИ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗначениеКИ.Вид, "Наименование");
			НаименованиеВидаКИ = ИмяПараметраВидКонтактнойИнформации(НаименованиеВидаКИ);
			ПараметрыРеквизита.Вставить(НаименованиеВидаКИ, ЗначениеКИ.Представление);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьПоляКомпоновкиДанныхРекурсивно(ДоступныеПоля, КоллекцияВыбранныхПолей, СписокПараметров, Родитель = "")
	
	Если СписокПараметров = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Параметр Из СписокПараметров Цикл
		
		Если ТипЗнч(Параметр.Значение) = Тип("Соответствие") Тогда
			Если ЗначениеЗаполнено(Родитель) Тогда
				Родитель = Родитель + "." + Параметр.Ключ;
			Иначе
				Родитель = Параметр.Ключ;
			КонецЕсли;
			ДобавитьПоляКомпоновкиДанныхРекурсивно(ДоступныеПоля, КоллекцияВыбранныхПолей, Параметр.Значение, Родитель);
			Родитель = "";
		Иначе
			Если ЗначениеЗаполнено(Родитель) Тогда
				ПутьКДаннымПоля = Родитель + "." + Параметр.Ключ;
			Иначе
				ПутьКДаннымПоля = Параметр.Ключ;
			КонецЕсли;
			
			Поле = Новый ПолеКомпоновкиДанных(ПутьКДаннымПоля);
			
			Если Родитель = "" И ДоступныеПоля.НайтиПоле(Поле) <> Неопределено
				ИЛИ Родитель <> "" Тогда
				
				ВыбранноеПоле = КоллекцияВыбранныхПолей.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
				ВыбранноеПоле.Поле = Поле;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьЗначениеПараметра(ВсеЗначения, ИмяПараметра)
	
	Если ИмяПараметра = "Номер" Тогда
		Возврат ПечатьДокументовУНФ.ПолучитьНомерНаПечатьСУчетомДатыДокумента(ВсеЗначения["Дата"], ВсеЗначения["Номер"], ВсеЗначения["СсылкаПрефикс"]);
	Иначе
		Возврат ВсеЗначения[ИмяПараметра];
	КонецЕсли;
	
КонецФункции

Процедура СтрокаТаблицыЗначенийВСоответствие(ОбъектПечати, СтрокаТаблицыЗначений, СписокПараметров, ПоляНабораДанных, КоличествоСтрокТЧ)
	
	Для каждого Колонка Из СтрокаТаблицыЗначений.Владелец().Колонки Цикл
		
		ЗначениеПараметра = ПолучитьЗначениеПараметра(СтрокаТаблицыЗначений, Колонка.Имя);
		
		Если ТипЗнч(ЗначениеПараметра) = Тип("ТаблицаЗначений") Тогда
			
			Если ЗначениеПараметра.Колонки.Найти("НомерВариантаКП") <> Неопределено Тогда
				Варианты = ЗначениеПараметра.Скопировать(, "НомерВариантаКП");
				Варианты.Свернуть("НомерВариантаКП");
				Варианты.Сортировать("НомерВариантаКП");
				Варианты = Варианты.ВыгрузитьКолонку("НомерВариантаКП");
				
				Родитель = Колонка.Имя;
				СписокПараметровТЧ = СписокПараметров.Получить(Колонка.Имя);
				
				Если СписокПараметровТЧ = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				Для каждого НомерВарианта Из Варианты Цикл
					
					Для каждого КолонкаТЧ Из ЗначениеПараметра.Колонки Цикл
						
						СписокВариантов = СписокПараметровТЧ.Получить(КолонкаТЧ.Имя);
						Если ТипЗнч(СписокВариантов) <> Тип("СписокЗначений") Тогда
							СписокВариантов = Новый СписокЗначений;
						КонецЕсли;
						
						ПолеНабора = ПоляНабораДанных.Найти(Родитель + "." + КолонкаТЧ.Имя);
						Если ПолеНабора <> Неопределено Тогда
							Формат = ПолеНабора.Оформление.Элементы.Найти("Формат");
							ФорматнаяСтрока = ?(Формат.Использование, Формат.Значение, "");
						КонецЕсли;
						
						ДанныеКолонки = Новый Массив;
						Строки = ЗначениеПараметра.НайтиСтроки(Новый Структура("НомерВариантаКП", НомерВарианта));
						Для каждого Стр Из Строки Цикл
							Если НЕ Стр.ЭтоРазделитель ИЛИ Стр.ЭтоРазделитель И
								(КолонкаТЧ.Имя = "Номенклатура" ИЛИ
								КолонкаТЧ.Имя = "Сумма" ИЛИ
								КолонкаТЧ.Имя = "СуммаНДС" ИЛИ
								КолонкаТЧ.Имя = "Всего" ИЛИ
								КолонкаТЧ.Имя = "ЭтоРазделитель") Тогда
								ДанныеКолонки.Добавить(Стр[КолонкаТЧ.Имя]);
							Иначе
								ДанныеКолонки.Добавить("");
							КонецЕсли;
						КонецЦикла;
						
						Если ЗначениеЗаполнено(ФорматнаяСтрока) Тогда
							ДанныеКолонкиКопия = Новый Массив;
							Для каждого Эл Из ДанныеКолонки Цикл
								ДанныеКолонкиКопия.Добавить(Формат(Эл, ФорматнаяСтрока));
							КонецЦикла;
							ДанныеКолонки = ДанныеКолонкиКопия;
							ДанныеКолонкиКопия = Неопределено;
						КонецЕсли;
						
						СписокВариантов.Добавить(ДанныеКолонки, СтрШаблон(НСтр("ru='Вариант №%1'"), НомерВарианта));
						
						СписокПараметровТЧ.Вставить(КолонкаТЧ.Имя, СписокВариантов);
						
						Если НЕ ЗначениеЗаполнено(КоличествоСтрокТЧ) Тогда
							КоличествоСтрокТЧ = ЗначениеПараметра.Количество();
						КонецЕсли;
						
					КонецЦикла;
				КонецЦикла;
				
			Иначе // ЗначениеПараметра.Колонки.Найти("НомерВариантаКП") = Неопределено
				
				Родитель = Колонка.Имя;
				СписокПараметровТЧ = СписокПараметров.Получить(Колонка.Имя);
				Для каждого КолонкаТЧ Из ЗначениеПараметра.Колонки Цикл
					
					ПолеНабора = ПоляНабораДанных.Найти(Родитель + "." + КолонкаТЧ.Имя);
					Если ПолеНабора <> Неопределено Тогда
						Формат = ПолеНабора.Оформление.Элементы.Найти("Формат");
						ФорматнаяСтрока = ?(Формат.Использование, Формат.Значение, "");
					КонецЕсли;
					
					ДанныеКолонки = ЗначениеПараметра.ВыгрузитьКолонку(КолонкаТЧ.Имя);
					Если ЗначениеЗаполнено(ФорматнаяСтрока) Тогда
						ДанныеКолонкиКопия = Новый Массив;
						Для каждого Эл Из ДанныеКолонки Цикл
							ДанныеКолонкиКопия.Добавить(Формат(Эл, ФорматнаяСтрока));
						КонецЦикла;
						ДанныеКолонки = ДанныеКолонкиКопия;
						ДанныеКолонкиКопия = Неопределено;
					КонецЕсли;
					
					СписокПараметровТЧ.Вставить(КолонкаТЧ.Имя, ДанныеКолонки);
					
					Если НЕ ЗначениеЗаполнено(КоличествоСтрокТЧ) Тогда
						КоличествоСтрокТЧ = ЗначениеПараметра.Количество();
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
		Иначе
			ФорматнаяСтрока = "";
			ПолеНабора = Неопределено;
			Для каждого ПолеНабора Из ПоляНабораДанных Цикл
				Если ТипЗнч(ПолеНабора) <> Тип("ПолеНабораДанныхСхемыКомпоновкиДанных") Тогда
					Продолжить;
				КонецЕсли;
				Если ПолеНабора.Поле = Колонка.Имя Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если ПолеНабора <> Неопределено Тогда
				Формат = ПолеНабора.Оформление.Элементы.Найти("Формат");
				ФорматнаяСтрока = ?(Формат.Использование, Формат.Значение, "");
			КонецЕсли;
			Если ЗначениеЗаполнено(ФорматнаяСтрока) Тогда
				ЗначениеПараметра = Формат(ЗначениеПараметра, ФорматнаяСтрока);
			КонецЕсли;
			Если СписокПараметров.Получить(Колонка.Имя) <> Неопределено Тогда
				СписокПараметров.Вставить(Колонка.Имя, ЗначениеПараметра);
			Иначе
				Для каждого ВложенныйПараметр Из СписокПараметров Цикл
					Если ТипЗнч(ВложенныйПараметр.Значение) <> Тип("Соответствие") Тогда
						Продолжить;
					КонецЕсли;
					Если ВложенныйПараметр.Значение.Получить(Колонка.Имя) <> Неопределено Тогда
						ВложенныйПараметр.Значение.Вставить(Колонка.Имя, ЗначениеПараметра);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;

		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьПараметрыИзЗапроса(Параметры, Результат, Знач Префикс = "")
	
	Если ЗначениеЗаполнено(Префикс) Тогда
		Префикс = Префикс + "_";
	КонецЕсли;
	Для каждого ЗначениеПараметра Из Параметры Цикл
		Если ТипЗнч(Параметры[ЗначениеПараметра.Ключ]) = Тип("Соответствие") Тогда
			УстановитьПараметрыИзЗапроса(Параметры[ЗначениеПараметра.Ключ], Результат, Префикс + ЗначениеПараметра.Ключ);
		Иначе
			Если ПустаяСтрока(ЗначениеПараметра.Значение) Тогда
				Параметры[ЗначениеПараметра.Ключ] = ?(Результат[Префикс + ЗначениеПараметра.Ключ] <> Неопределено, Результат[Префикс + ЗначениеПараметра.Ключ], "");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция НайденоПолеТабличнойЧасти(СписокПараметров, ИмяПараметра, Знач МассивРазобранныйПараметр = Неопределено)
	
	ЗначениеПараметра = Неопределено;
	
	Если МассивРазобранныйПараметр = Неопределено Тогда
		МассивРазобранныйПараметр = СтрРазделить(ИмяПараметра, ".", Ложь);
	КонецЕсли;
	
	Для каждого Эл Из МассивРазобранныйПараметр Цикл
		
		ЗначениеПараметра = СписокПараметров.Получить(Эл);
		Если ТипЗнч(ЗначениеПараметра) = Тип("Соответствие") Тогда
			МассивРазобранныйПараметр.Удалить(0);
			Возврат НайденоПолеТабличнойЧасти(ЗначениеПараметра, ИмяПараметра, МассивРазобранныйПараметр);
		КонецЕсли;
		
		НайденоПолеТабличнойЧасти = (ТипЗнч(ЗначениеПараметра) = Тип("Массив") ИЛИ ТипЗнч(ЗначениеПараметра) = Тип("СписокЗначений"));
		Если НайденоПолеТабличнойЧасти Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ЗначениеПараметра(СписокПараметров, ИмяПараметра, НомерСтроки = Неопределено, ПредставлениеСтроки = Неопределено,
	                      НомерВарианта = Неопределено, Знач МассивРазобранныйПараметр = Неопределено)
	
	Если Прав(ИмяПараметра, СтрДлина(ИмяПараметра) - СтрНайти(ИмяПараметра, ".", НаправлениеПоиска.СКонца)) = "НомерСтроки" Тогда
		Возврат ?(ПредставлениеСтроки = 0, "", ПредставлениеСтроки);
	КонецЕсли;
	
	ЗначениеПараметра = Неопределено;
	
	Если МассивРазобранныйПараметр = Неопределено Тогда
		//МассивРазобранныйПараметр = СтрРазделить(ИмяПараметра, ".", Ложь);
		МассивРазобранныйПараметр = РазобратьПараметрВМассивУзлов(ИмяПараметра);
	КонецЕсли;
	
	Для каждого Эл Из МассивРазобранныйПараметр Цикл
		
		ЗначениеПараметра = СписокПараметров.Получить(Эл);
		Если ТипЗнч(ЗначениеПараметра) = Тип("Соответствие") Тогда
			МассивРазобранныйПараметр.Удалить(0);
			Возврат ЗначениеПараметра(ЗначениеПараметра, ИмяПараметра, НомерСтроки, ПредставлениеСтроки, НомерВарианта, МассивРазобранныйПараметр);
		КонецЕсли;
		
		Если ТипЗнч(ЗначениеПараметра) = Тип("Массив") И НомерСтроки <> Неопределено Тогда
			ЗначениеПараметра = ЗначениеПараметра.Получить(НомерСтроки);
		ИначеЕсли ТипЗнч(ЗначениеПараметра) = Тип("СписокЗначений") И НомерВарианта <> Неопределено Тогда
			ЗначениеПараметра = ЗначениеПараметра[НомерВарианта].Значение[НомерСтроки];
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТипЗнч(ЗначениеПараметра) <> Тип("Строка") Тогда
		ЗначениеПараметра = Строка(ЗначениеПараметра);
	КонецЕсли;
	
	Возврат ЗначениеПараметра;
	
КонецФункции

Функция СоздатьНовуюЗаписьXML(ИмяФайла)
	
	ФайлНаДиске = Новый Файл(ИмяФайла);
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ИмяФайла);
	ЗаписьXML.ЗаписатьОбъявлениеXML(); 
	
	Возврат ЗаписьXML;
	
КонецФункции

Функция ЭтоСтрокаРазделитель(СписокПараметров, Знач ИмяПараметра, НомерСтроки, НомерВарианта)
	
	ИмяПараметра = Лев(ИмяПараметра, СтрНайти(ИмяПараметра, ".",,, 2)) + "ЭтоРазделитель";
	Возврат Булево(ЗначениеПараметра(СписокПараметров, ИмяПараметра, НомерСтроки, , НомерВарианта));
	
КонецФункции

#КонецОбласти

#Область ЗаполнениеДокументовDOCX

Процедура ОбновитьСвойстваЧтенияXMLДокументаDOCX(ЧтениеXML, ПараметрыЧтенияXML, КоличествоСтрокТЧ)
	
	Если ПараметрыЧтенияXML = Неопределено Тогда
		ПараметрыЧтенияXML = Новый Структура(
			"НайденоПоле,НайденТекстПоля,КорневойЭлемент,ЭлементТекущийИмя,ЭлементРодительИмя,ИмяПараметра",
			Ложь, Ложь, Ложь, "", "", ""
		);
		ПараметрыЧтенияXML.Вставить(
			"Таблица",
			Новый Структура(
				"Найдена,НайденаЭталоннаяСтрока,СодержитДанныеТЧ,ТекущаяСтрокаТаблицы,ТекущаяКолонкаТаблицы,ПропуститьТекущуюСтроку",
				Ложь, Ложь, Ложь, 0, 0, Ложь
			)
		);
		
		Возврат;
	КонецЕсли;
	
	Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
		
		ПараметрыЧтенияXML.ЭлементРодительИмя = ПараметрыЧтенияXML.ЭлементТекущийИмя;
		ПараметрыЧтенияXML.ЭлементТекущийИмя = ЧтениеXML.Имя;
		
	КонецЕсли;
	
	Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента ИЛИ ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
		
		Если ПараметрыЧтенияXML.КорневойЭлемент <> Неопределено Тогда
			ПараметрыЧтенияXML.КорневойЭлемент = ЧтениеXML.Имя = "w:document";
		КонецЕсли;
		
		Если ЧтениеXML.Имя = "w:fldChar" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			ПараметрыЧтенияXML.НайденоПоле = Истина;
		КонецЕсли;
		
		Если ЧтениеXML.Имя = "w:t" Тогда
			ПараметрыЧтенияXML.НайденТекстПоля = (ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента);
		КонецЕсли;
		
		Если ЧтениеXML.Имя = "w:tbl" И КоличествоСтрокТЧ > 0 Тогда
			
			Если ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
				
				Если ПараметрыЧтенияXML.Таблица.Найдена Тогда
					ПараметрыЧтенияXML.Таблица.СодержитДанныеТЧ = Ложь;
				КонецЕсли;
				
			КонецЕсли;
			
			ПараметрыЧтенияXML.Таблица.Найдена = (ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента);
			ПараметрыЧтенияXML.Таблица.ТекущаяСтрокаТаблицы = 0;
			ПараметрыЧтенияXML.Таблица.ТекущаяКолонкаТаблицы = 0;
			ПараметрыЧтенияXML.Таблица.ПропуститьТекущуюСтроку = Ложь;
			
		КонецЕсли;
		
		Если ЧтениеXML.Имя = "w:tr" И ПараметрыЧтенияXML.Таблица.Найдена Тогда
			
			Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				
				Если ПараметрыЧтенияXML.Таблица.ТекущаяСтрокаТаблицы > КоличествоСтрокТЧ И ПараметрыЧтенияXML.Таблица.СодержитДанныеТЧ Тогда
					ПараметрыЧтенияXML.Таблица.ПропуститьТекущуюСтроку = Истина;
				Иначе
					ПараметрыЧтенияXML.Таблица.ТекущаяСтрокаТаблицы = ПараметрыЧтенияXML.Таблица.ТекущаяСтрокаТаблицы + 1;
					ПараметрыЧтенияXML.Таблица.НайденаЭталоннаяСтрока = (ПараметрыЧтенияXML.Таблица.ТекущаяСтрокаТаблицы = 2 И КоличествоСтрокТЧ > 0);
				КонецЕсли;
				
			ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
				
				ПараметрыЧтенияXML.Таблица.ТекущаяКолонкаТаблицы = 0;
				ПараметрыЧтенияXML.Таблица.НайденаЭталоннаяСтрока = Ложь;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЧтениеXML.Имя = "w:tc" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			ПараметрыЧтенияXML.Таблица.ТекущаяКолонкаТаблицы = ПараметрыЧтенияXML.Таблица.ТекущаяКолонкаТаблицы + 1;
		КонецЕсли
		
	КонецЕсли;
	
	Если ЧтениеXML.ТипУзла = ТипУзлаXML.Атрибут Тогда
		
		Если ПараметрыЧтенияXML.НайденоПоле И ЧтениеXML.Имя = "w:fldCharType" Тогда
			Если ЧтениеXML.Значение = "end" Тогда
				ПараметрыЧтенияXML.НайденоПоле = Ложь;
				ПараметрыЧтенияXML.ИмяПараметра = "";
			КонецЕсли;
		КонецЕсли;
		
		Если ПараметрыЧтенияXML.НайденоПоле И ЧтениеXML.Имя = "w:val" И ПараметрыЧтенияXML.ЭлементТекущийИмя = "w:default" И ПараметрыЧтенияXML.ЭлементРодительИмя = "w:textInput" Тогда
			ПараметрыЧтенияXML.ИмяПараметра = ЧтениеXML.Значение;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПараметрыИзДокументаDOCX(ПутьКФайлу)
	
	МассивПараметров = Новый Соответствие;
	
	ЧтениеXML = Новый ЧтениеXML();
	ЧтениеXML.ОткрытьФайл(ПутьКФайлу);
	
	ПараметрыЧтенияXML = Неопределено;
	ОбновитьСвойстваЧтенияXMLДокументаDOCX(ЧтениеXML, ПараметрыЧтенияXML, 2);
	
	Пока ЧтениеXML.Прочитать() Цикл
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			ОбновитьСвойстваЧтенияXMLДокументаDOCX(ЧтениеXML, ПараметрыЧтенияXML, 2);
			
			Если ПараметрыЧтенияXML.Таблица.ПропуститьТекущуюСтроку Тогда
				Продолжить;
			КонецЕсли;
			
			Пока ЧтениеXML.ПрочитатьАтрибут() Цикл
				ОбновитьСвойстваЧтенияXMLДокументаDOCX(ЧтениеXML, ПараметрыЧтенияXML, 2);
				
				Если ЗначениеЗаполнено(ПараметрыЧтенияXML.ИмяПараметра) Тогда
					МассивПараметров.Вставить(ПараметрыЧтенияXML.ИмяПараметра, "");
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	СоответствиеПараметров = Новый Соответствие;
	ОбработатьНайденныйМассивПараметров(СоответствиеПараметров, МассивПараметров);
	Возврат СоответствиеПараметров;
	
КонецФункции

Процедура ЗаписатьТаблицуИСтрокуВБуферDOCX(ЧтениеXML, ЧтениеXMLАдресБуфераТаблица, ЧтениеXMLАдресБуфераСтрока, СписокПараметров, КоличествоСтрокТЧ, НомерТаблицыСодержащейДанныеТЧ)
	
	НомерТаблицы = 0;
	НомерТаблицыСодержащейДанныеТЧ = 0;
	
	ЧтениеXML.ИгнорироватьПробелы = Ложь;
	
	ПараметрыЧтенияXML = Неопределено;
	ОбновитьСвойстваЧтенияXMLДокументаDOCX(ЧтениеXML, ПараметрыЧтенияXML, КоличествоСтрокТЧ);
	
	ЗаписьXMLТаблица = СоздатьНовуюЗаписьXML(ЧтениеXMLАдресБуфераТаблица);
	ЗаписьXMLСтрока = СоздатьНовуюЗаписьXML(ЧтениеXMLАдресБуфераСтрока);
	
	Пока ЧтениеXML.Прочитать() Цикл
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			
			ТаблицаНайденаКэш = ПараметрыЧтенияXML.Таблица.Найдена;
			
			ОбновитьСвойстваЧтенияXMLДокументаDOCX(ЧтениеXML, ПараметрыЧтенияXML, КоличествоСтрокТЧ);
			
			Если НЕ ТаблицаНайденаКэш И ПараметрыЧтенияXML.Таблица.Найдена Тогда
				НомерТаблицы = НомерТаблицы + 1;
			КонецЕсли;
			
			Если ПараметрыЧтенияXML.Таблица.ПропуститьТекущуюСтроку Тогда
				Продолжить;
			КонецЕсли;
			
			Если ПараметрыЧтенияXML.КорневойЭлемент Тогда
				ЗаписьXMLТаблица.ЗаписатьНачалоЭлемента(ЧтениеXML.Имя);
				ЗаписьXMLСтрока.ЗаписатьНачалоЭлемента(ЧтениеXML.Имя);
			КонецЕсли;
			
			Если ПараметрыЧтенияXML.Таблица.Найдена Тогда
				ЗаписьXMLТаблица.ЗаписатьНачалоЭлемента(ЧтениеXML.Имя);
				Если ПараметрыЧтенияXML.Таблица.НайденаЭталоннаяСтрока Тогда
					ЗаписьXMLСтрока.ЗаписатьНачалоЭлемента(ЧтениеXML.Имя);
				КонецЕсли;
			КонецЕсли;
			
			Пока ЧтениеXML.ПрочитатьАтрибут() Цикл
				ОбновитьСвойстваЧтенияXMLДокументаDOCX(ЧтениеXML, ПараметрыЧтенияXML, КоличествоСтрокТЧ);
				
				Если ПараметрыЧтенияXML.КорневойЭлемент Тогда
					ЗаписьXMLТаблица.ЗаписатьАтрибут(ЧтениеXML.Имя, ЧтениеXML.Значение);
					ЗаписьXMLСтрока.ЗаписатьАтрибут(ЧтениеXML.Имя, ЧтениеXML.Значение);
				ИначеЕсли ПараметрыЧтенияXML.Таблица.Найдена Тогда
					ЗаписьXMLТаблица.ЗаписатьАтрибут(ЧтениеXML.Имя, ЧтениеXML.Значение);
					Если ПараметрыЧтенияXML.Таблица.НайденаЭталоннаяСтрока Тогда
						ЗаписьXMLСтрока.ЗаписатьАтрибут(ЧтениеXML.Имя, ЧтениеXML.Значение);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Если ПараметрыЧтенияXML.Таблица.Найдена И НЕ ПараметрыЧтенияXML.Таблица.СодержитДанныеТЧ И ЗначениеЗаполнено(ПараметрыЧтенияXML.ИмяПараметра) Тогда
				ПараметрыЧтенияXML.Таблица.СодержитДанныеТЧ = НайденоПолеТабличнойЧасти(СписокПараметров, ПараметрыЧтенияXML.ИмяПараметра);
				НомерТаблицыСодержащейДанныеТЧ = НомерТаблицы;
			КонецЕсли;
			
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
			
			Если ПараметрыЧтенияXML.Таблица.Найдена Тогда
				ЗаписьXMLТаблица.ЗаписатьТекст(ЧтениеXML.Значение);
				Если ПараметрыЧтенияXML.Таблица.НайденаЭталоннаяСтрока Тогда
					ЗаписьXMLСтрока.ЗаписатьТекст(ЧтениеXML.Значение);
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			
			Если ПараметрыЧтенияXML.Таблица.Найдена Тогда
				ЗаписьXMLТаблица.ЗаписатьКонецЭлемента();
				Если ПараметрыЧтенияXML.Таблица.НайденаЭталоннаяСтрока Тогда
					ЗаписьXMLСтрока.ЗаписатьКонецЭлемента();
				КонецЕсли;
			КонецЕсли;
			
			ОбновитьСвойстваЧтенияXMLДокументаDOCX(ЧтениеXML, ПараметрыЧтенияXML, КоличествоСтрокТЧ);
			
			Если ПараметрыЧтенияXML.КорневойЭлемент Тогда
				ЗаписьXMLТаблица.ЗаписатьКонецЭлемента();
				ЗаписьXMLСтрока.ЗаписатьКонецЭлемента();
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	ЗаписьXMLСтрока.Закрыть();
	ЗаписьXMLТаблица.Закрыть();
	
КонецПроцедуры

Процедура ПродублироватьСтрокиВТаблицеDOCX(ЗаписьXML, ЧтениеXMLСтрока, СписокПараметров, КоличествоСтрокТЧ, НомерСтроки, ПредставлениеСтроки, НомерВарианта, НомерТаблицыСодержащейДанныеТЧ)
	
	ЧтениеXMLНомерСтроки = 0;
	
	ПараметрыЧтенияXML = Неопределено;
	ОбновитьСвойстваЧтенияXMLДокументаDOCX(ЧтениеXMLСтрока, ПараметрыЧтенияXML, КоличествоСтрокТЧ);
	
	Пока ЧтениеXMLСтрока.Прочитать() Цикл
		
		Если ЧтениеXMLСтрока.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			
			Если ЧтениеXMLСтрока.Имя = "w:tr" Тогда
				ЧтениеXMLНомерСтроки = ЧтениеXMLНомерСтроки + 1;
			КонецЕсли;
			
			Если ЧтениеXMLНомерСтроки <> НомерТаблицыСодержащейДанныеТЧ Тогда
				Продолжить;
			КонецЕсли;
			
			ОбновитьСвойстваЧтенияXMLДокументаDOCX(ЧтениеXMLСтрока, ПараметрыЧтенияXML, КоличествоСтрокТЧ);
			
			Если ПараметрыЧтенияXML.КорневойЭлемент Тогда
				Продолжить;
			КонецЕсли;
			
			ЗаписьXML.ЗаписатьНачалоЭлемента(ЧтениеXMLСтрока.Имя);
			
			Если ЧтениеXMLСтрока.Имя = "w:rPr" И ПараметрыЧтенияXML.НайденоПоле Тогда
				Если ЭтоСтрокаРазделитель(СписокПараметров, ПараметрыЧтенияXML.ИмяПараметра, НомерСтроки, НомерВарианта - 1) Тогда
					ЗаписьXML.ЗаписатьБезОбработки("<w:b/>");
				КонецЕсли;
			КонецЕсли;
			
			Пока ЧтениеXMLСтрока.ПрочитатьАтрибут() Цикл
				ОбновитьСвойстваЧтенияXMLДокументаDOCX(ЧтениеXMLСтрока, ПараметрыЧтенияXML, КоличествоСтрокТЧ);
				ЗаписьXML.ЗаписатьАтрибут(ЧтениеXMLСтрока.Имя, ЧтениеXMLСтрока.Значение);
			КонецЦикла;
			
		ИначеЕсли ЧтениеXMLСтрока.ТипУзла = ТипУзлаXML.Текст Тогда
			
			Если ЧтениеXMLНомерСтроки <> НомерТаблицыСодержащейДанныеТЧ Тогда
				Продолжить;
			КонецЕсли;
			
			Если ПараметрыЧтенияXML.НайденоПоле И ПараметрыЧтенияXML.НайденТекстПоля Тогда
				// Заполнение поля таблицы
				Если ЭтоСтрокаРазделитель(СписокПараметров, ПараметрыЧтенияXML.ИмяПараметра, НомерСтроки, НомерВарианта - 1) Тогда
					ПредставлениеСтроки = 0;
				КонецЕсли;
				ЗначениеПараметра = ЗначениеПараметра(СписокПараметров, ПараметрыЧтенияXML.ИмяПараметра, НомерСтроки, ПредставлениеСтроки, НомерВарианта - 1);
				ЗначениеПараметра = СтрЗаменить(ЗначениеПараметра, Символы.ПС, "<w:br/>");
				ЗаписьXML.ЗаписатьБезОбработки(ЗначениеПараметра);
				ОбновитьСвойстваЧтенияXMLДокументаDOCX(ЧтениеXMLСтрока, ПараметрыЧтенияXML, КоличествоСтрокТЧ);
			Иначе
				// Обычный текст
				ЗаписьXML.ЗаписатьТекст(ЧтениеXMLСтрока.Значение);
			КонецЕсли;
			
		ИначеЕсли ЧтениеXMLСтрока.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			
			Если ЧтениеXMLНомерСтроки <> НомерТаблицыСодержащейДанныеТЧ Тогда
				Продолжить;
			КонецЕсли;
			
			ОбновитьСвойстваЧтенияXMLДокументаDOCX(ЧтениеXMLСтрока, ПараметрыЧтенияXML, КоличествоСтрокТЧ);
			Если ПараметрыЧтенияXML.КорневойЭлемент Тогда 
				Продолжить;
			КонецЕсли;
			ЗаписьXML.ЗаписатьКонецЭлемента();
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьИЗаполнитьТаблицуВДокументеDOCX(СписокПараметров, ЧтениеXMLАдресБуфераТаблица, ЧтениеXMLАдресБуфераСтрока, ЗаписьXML, КоличествоСтрокТЧ, НомерТаблицыСодержащейДанныеТЧ)
	
	КолонкаВарианты = СписокПараметров["ЗаказПокупателя"]["Запасы"]["НомерВариантаКП"];
	Если ТипЗнч(КолонкаВарианты) = Тип("СписокЗначений") Тогда
		КоличествоВариантов = КолонкаВарианты.Количество();
	ИначеЕсли ТипЗнч(КолонкаВарианты) = Тип("Массив") Тогда
		КоличествоВариантов = 0;
	КонецЕсли;
	
	Для НомерВарианта = ?(КоличествоВариантов = 0, 0, 1) По КоличествоВариантов Цикл
		
		ИмяПараметра = "";
		ЗначениеПараметра = "";
		ЧтениеXMLБуферОткрыт = Ложь;
		
		Если КоличествоВариантов > 1 Тогда
			ЗаголовокВарианта = СтрШаблон(
				НСтр("ru='Вариант №%1'"),
				НомерВарианта
			);
			ЗаписьXML.ЗаписатьБезОбработки(СтрШаблон("<w:p><w:r><w:t>%1</w:t></w:r></w:p>", ЗаголовокВарианта));
		КонецЕсли;
		
		КолСтрок = СписокПараметров["ЗаказПокупателя"]["Запасы"]["НомерВариантаКП"][НомерВарианта - 1].Значение.Количество();
		
		ЧтениеXMLТаблица = Новый ЧтениеXML;
		ЧтениеXMLТаблица.ОткрытьФайл(ЧтениеXMLАдресБуфераТаблица);
		ЧтениеXMLТаблица.ИгнорироватьПробелы = Ложь;
		
		ПараметрыЧтенияXML = Неопределено;
		ОбновитьСвойстваЧтенияXMLДокументаDOCX(ЧтениеXMLТаблица, ПараметрыЧтенияXML, КоличествоСтрокТЧ);
		
		УзелXMLЭлементТекущийИмя = "";
		УзелXMLЭлементРодительИмя = "";
		
		НомерТаблицы = 0;
		
		Пока ЧтениеXMLТаблица.Прочитать() Цикл
			
			Если ЧтениеXMLТаблица.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				
				ТаблицаНайденаКэш = ПараметрыЧтенияXML.Таблица.Найдена;
				НайденаЭталоннаяСтрокаКэш = ПараметрыЧтенияXML.Таблица.НайденаЭталоннаяСтрока;
				ОбновитьСвойстваЧтенияXMLДокументаDOCX(ЧтениеXMLТаблица, ПараметрыЧтенияXML, КоличествоСтрокТЧ);
				
				Если НЕ ТаблицаНайденаКэш И ПараметрыЧтенияXML.Таблица.Найдена Тогда
					НомерТаблицы = НомерТаблицы + 1;
				КонецЕсли;
				
				Если НомерТаблицы <> НомерТаблицыСодержащейДанныеТЧ Тогда
					Продолжить;
				КонецЕсли;
				
				Если НайденаЭталоннаяСтрокаКэш И ПараметрыЧтенияXML.Таблица.НайденаЭталоннаяСтрока Тогда
					Продолжить;
				КонецЕсли;
				
				Если ПараметрыЧтенияXML.КорневойЭлемент Тогда
					Продолжить;
				КонецЕсли;
				
				Если ПараметрыЧтенияXML.Таблица.НайденаЭталоннаяСтрока Тогда
					
					ПредставлениеСтроки = 0;
					Для НомерСтроки = 0 По КолСтрок - 1 Цикл
						
						ПредставлениеСтроки = ПредставлениеСтроки + 1;
						
						ЧтениеXMLСтрока = Новый ЧтениеXML;
						ЧтениеXMLСтрока.ОткрытьФайл(ЧтениеXMLАдресБуфераСтрока);
						ЧтениеXMLСтрока.ИгнорироватьПробелы = Ложь;
						
						ПродублироватьСтрокиВТаблицеDOCX(ЗаписьXML, ЧтениеXMLСтрока, СписокПараметров, КоличествоСтрокТЧ, НомерСтроки, ПредставлениеСтроки, НомерВарианта, НомерТаблицыСодержащейДанныеТЧ);
						
						ЧтениеXMLСтрока.Закрыть();
						
					КонецЦикла;
					
				Иначе
					ЗаписьXML.ЗаписатьНачалоЭлемента(ЧтениеXMLТаблица.Имя);
					Пока ЧтениеXMLТаблица.ПрочитатьАтрибут() Цикл
						ЗаписьXML.ЗаписатьАтрибут(ЧтениеXMLТаблица.Имя, ЧтениеXMLТаблица.Значение);
					КонецЦикла;
				КонецЕсли;
				
				УзелXMLЭлементРодительИмя = ЧтениеXMLТаблица.Имя;
				
			ИначеЕсли ЧтениеXMLТаблица.ТипУзла = ТипУзлаXML.Текст Тогда
				
				Если НомерТаблицы <> НомерТаблицыСодержащейДанныеТЧ Тогда
					Продолжить;
				КонецЕсли;
				
				Если ПараметрыЧтенияXML.Таблица.НайденаЭталоннаяСтрока Тогда
					Продолжить;
				КонецЕсли;
				
				ЗаписьXML.ЗаписатьТекст(ЧтениеXMLТаблица.Значение);
				
			ИначеЕсли ЧтениеXMLТаблица.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
				
				ТаблицаНайденаКэш = ПараметрыЧтенияXML.Таблица.Найдена;
				НайденаЭталоннаяСтрокаКэш = ПараметрыЧтенияXML.Таблица.НайденаЭталоннаяСтрока;
				
				ОбновитьСвойстваЧтенияXMLДокументаDOCX(ЧтениеXMLТаблица, ПараметрыЧтенияXML, КоличествоСтрокТЧ);
				
				Если ТаблицаНайденаКэш И НомерТаблицы <> НомерТаблицыСодержащейДанныеТЧ Тогда
					Продолжить;
				КонецЕсли;
				
				Если НайденаЭталоннаяСтрокаКэш Тогда
					Продолжить;
				КонецЕсли;
				
				Если ПараметрыЧтенияXML.КорневойЭлемент Тогда 
					Продолжить;
				КонецЕсли;
				
				ЗаписьXML.ЗаписатьКонецЭлемента();
				
			КонецЕсли;
			
		КонецЦикла;
		
		ЧтениеXMLТаблица.Закрыть();
		
		Если КоличествоВариантов > 0 Тогда
			ЗаписьXML.ЗаписатьБезОбработки("<w:p> </w:p>");
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыДокументаDOCX(ЧтениеXML, ЧтениеXMLТаблица, ЗаписьXML, ЧтениеXMLАдресБуфераСтрока, ЧтениеXMLАдресБуфераТаблица, СписокПараметров, КоличествоСтрокТЧ)
	
	ЧтениеXML.ИгнорироватьПробелы = Ложь;
	ЧтениеXMLТаблица.ИгнорироватьПробелы = Ложь;
	
	ИмяПараметра = "";
	ЗначениеПараметра = "";
	ЧтениеXMLБуферОткрыт = Ложь;
	
	ТаблицаВставлена = Ложь;
	НомерТаблицы = 0;
	НомерТаблицыСодержащейДанныеТЧ = 0;
	ЗаписатьТаблицуИСтрокуВБуферDOCX(ЧтениеXMLТаблица, ЧтениеXMLАдресБуфераТаблица, ЧтениеXMLАдресБуфераСтрока, СписокПараметров, КоличествоСтрокТЧ, НомерТаблицыСодержащейДанныеТЧ);
	
	ПараметрыЧтенияXML = Неопределено;
	ОбновитьСвойстваЧтенияXMLДокументаDOCX(ЧтениеXML, ПараметрыЧтенияXML, КоличествоСтрокТЧ);
	
	Пока ЧтениеXML.Прочитать() Цикл
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			
			ТаблицаНайденаКэш = ПараметрыЧтенияXML.Таблица.Найдена;
			
			ОбновитьСвойстваЧтенияXMLДокументаDOCX(ЧтениеXML, ПараметрыЧтенияXML, КоличествоСтрокТЧ);
			
			Если НЕ ТаблицаНайденаКэш И ПараметрыЧтенияXML.Таблица.Найдена Тогда
				НомерТаблицы = НомерТаблицы + 1;
			КонецЕсли;
			
			Если ПараметрыЧтенияXML.Таблица.Найдена И НЕ ТаблицаВставлена И НомерТаблицы = НомерТаблицыСодержащейДанныеТЧ Тогда
				
				ДобавитьИЗаполнитьТаблицуВДокументеDOCX(СписокПараметров, ЧтениеXMLАдресБуфераТаблица, ЧтениеXMLАдресБуфераСтрока, ЗаписьXML, КоличествоСтрокТЧ, НомерТаблицыСодержащейДанныеТЧ);
				ТаблицаВставлена = Истина;
				
			ИначеЕсли НЕ ПараметрыЧтенияXML.Таблица.Найдена ИЛИ ПараметрыЧтенияXML.Таблица.Найдена И НомерТаблицы <> НомерТаблицыСодержащейДанныеТЧ Тогда
				
				ЗаписьXML.ЗаписатьНачалоЭлемента(ЧтениеXML.Имя);
				Пока ЧтениеXML.ПрочитатьАтрибут() Цикл
					ОбновитьСвойстваЧтенияXMLДокументаDOCX(ЧтениеXML, ПараметрыЧтенияXML, КоличествоСтрокТЧ);
					ЗаписьXML.ЗаписатьАтрибут(ЧтениеXML.Имя, ЧтениеXML.Значение);
				КонецЦикла;
				
			КонецЕсли;
			
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
			
			Если ПараметрыЧтенияXML.Таблица.Найдена И НомерТаблицы = НомерТаблицыСодержащейДанныеТЧ Тогда
				Продолжить;
			КонецЕсли;
			
			Если ПараметрыЧтенияXML.НайденоПоле И ПараметрыЧтенияXML.НайденТекстПоля Тогда
				// Заполнение поля документа
				ЗначениеПараметра = ЗначениеПараметра(СписокПараметров, ПараметрыЧтенияXML.ИмяПараметра);
				ЗначениеПараметра = СтрЗаменить(ЗначениеПараметра, Символы.ПС, "<w:br/>");
				ЗаписьXML.ЗаписатьБезОбработки(ЗначениеПараметра);
				ОбновитьСвойстваЧтенияXMLДокументаDOCX(ЧтениеXML, ПараметрыЧтенияXML, КоличествоСтрокТЧ);
			Иначе
				// Обычный текст
				ЗаписьXML.ЗаписатьТекст(ЧтениеXML.Значение);
			КонецЕсли;
			
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			
			ТаблицаНайденаКэш = ПараметрыЧтенияXML.Таблица.Найдена;
			ОбновитьСвойстваЧтенияXMLДокументаDOCX(ЧтениеXML, ПараметрыЧтенияXML, КоличествоСтрокТЧ);
			Если ТаблицаНайденаКэш И НомерТаблицы = НомерТаблицыСодержащейДанныеТЧ Тогда
				Продолжить;
			КонецЕсли;
			
			ЗаписьXML.ЗаписатьКонецЭлемента();
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеДокументовODT

Процедура ОбновитьСвойстваЧтенияXMLДокументаODT(ЧтениеXML, ПараметрыЧтенияXML, КоличествоСтрокТЧ)
	
	Если ПараметрыЧтенияXML = Неопределено Тогда
		ПараметрыЧтенияXML = Новый Структура(
			"НайденоПоле,КорневойЭлемент,ЭлементТекущийИмя,ЭлементРодительИмя,ИмяПараметра",
			Ложь, Ложь, Ложь, "", "", ""
		);
		ПараметрыЧтенияXML.Вставить(
			"Таблица",
			Новый Структура(
				"Найдена,НайденаЭталоннаяСтрока,СодержитДанныеТЧ,ТекущаяСтрокаТаблицы,ТекущаяКолонкаТаблицы,ПропуститьТекущуюСтроку",
				Ложь, Ложь, Ложь, 0, 0, Ложь
			)
		);
		
		Возврат;
	КонецЕсли;
	
	Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента ИЛИ ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
		ПараметрыЧтенияXML.КорневойЭлемент = ЧтениеXML.Имя = "office:document-content";
	КонецЕсли;
	
	Если ЧтениеXML.Имя = "text:variable-set" Тогда
		ПараметрыЧтенияXML.НайденоПоле = (ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента);
		ПараметрыЧтенияXML.ИмяПараметра = "";
	КонецЕсли;
	
	Если ЧтениеXML.ТипУзла = ТипУзлаXML.Атрибут И ЧтениеXML.Имя = "text:name" Тогда
		ПараметрыЧтенияXML.ИмяПараметра = ЧтениеXML.Значение;
	КонецЕсли;
	
	Если ЧтениеXML.Имя = "table:table" И КоличествоСтрокТЧ > 0 Тогда
		
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			
			Если ПараметрыЧтенияXML.Таблица.Найдена Тогда
				ПараметрыЧтенияXML.Таблица.СодержитДанныеТЧ = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
		ПараметрыЧтенияXML.Таблица.Найдена = (ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента);
		ПараметрыЧтенияXML.Таблица.ТекущаяСтрокаТаблицы = 0;
		ПараметрыЧтенияXML.Таблица.ТекущаяКолонкаТаблицы = 0;
		ПараметрыЧтенияXML.Таблица.ПропуститьТекущуюСтроку = Ложь;
		
	КонецЕсли;
	
	Если ЧтениеXML.Имя = "table:table-row" И ПараметрыЧтенияXML.Таблица.Найдена Тогда
		
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			
			Если ПараметрыЧтенияXML.Таблица.ТекущаяСтрокаТаблицы > КоличествоСтрокТЧ И ПараметрыЧтенияXML.Таблица.СодержитДанныеТЧ Тогда
				ПараметрыЧтенияXML.Таблица.ПропуститьТекущуюСтроку = Истина;
			Иначе
				ПараметрыЧтенияXML.Таблица.ТекущаяСтрокаТаблицы = ПараметрыЧтенияXML.Таблица.ТекущаяСтрокаТаблицы + 1;
				ПараметрыЧтенияXML.Таблица.НайденаЭталоннаяСтрока = (ПараметрыЧтенияXML.Таблица.ТекущаяСтрокаТаблицы = 2 И КоличествоСтрокТЧ > 1);
			КонецЕсли;
			
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			
			ПараметрыЧтенияXML.Таблица.ТекущаяКолонкаТаблицы = 0;
			ПараметрыЧтенияXML.Таблица.НайденаЭталоннаяСтрока = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЧтениеXML.Имя = "table:table-cell" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
		ПараметрыЧтенияXML.Таблица.ТекущаяКолонкаТаблицы = ПараметрыЧтенияXML.Таблица.ТекущаяКолонкаТаблицы + 1;
	КонецЕсли;
	
КонецПроцедуры

Функция ПараметрыИзДокументаODT(ПутьКФайлу)
	
	МассивПараметров = Новый Соответствие;
	
	ЧтениеXML = Новый ЧтениеXML();
	ЧтениеXML.ОткрытьФайл(ПутьКФайлу);
	
	ПараметрыЧтенияXML = Неопределено;
	ОбновитьСвойстваЧтенияXMLДокументаODT(ЧтениеXML, ПараметрыЧтенияXML, 2);
	
	УзелXMLЭлементТекущийИмя = "";
	
	Пока ЧтениеXML.Прочитать() Цикл
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			
			УзелXMLЭлементТекущийИмя = ЧтениеXML.Имя;
			
			Пока ЧтениеXML.ПрочитатьАтрибут() Цикл
				
				Если ЧтениеXML.Имя = "text:name" И УзелXMLЭлементТекущийИмя = "text:variable-decl" Тогда
					МассивПараметров.Вставить(ЧтениеXML.Значение, "");
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
	КонецЦикла;
	
	ЧтениеXML.Закрыть();
	
	СоответствиеПараметров = Новый Соответствие;
	ОбработатьНайденныйМассивПараметров(СоответствиеПараметров, МассивПараметров);
	Возврат СоответствиеПараметров;
	
КонецФункции

Процедура ЗаписатьТаблицуИСтрокуВБуферODT(ЧтениеXML, ЧтениеXMLАдресБуфераТаблица, ЧтениеXMLАдресБуфераСтрока, СписокПараметров, КоличествоСтрокТЧ, НомерТаблицыСодержащейДанныеТЧ)
	
	НомерТаблицы = 0;
	НомерТаблицыСодержащейДанныеТЧ = 0;
	
	ЧтениеXML.ИгнорироватьПробелы = Ложь;
	
	ПараметрыЧтенияXML = Неопределено;
	ОбновитьСвойстваЧтенияXMLДокументаODT(ЧтениеXML, ПараметрыЧтенияXML, КоличествоСтрокТЧ);
	
	ЗаписьXMLТаблица = СоздатьНовуюЗаписьXML(ЧтениеXMLАдресБуфераТаблица);
	ЗаписьXMLСтрока = СоздатьНовуюЗаписьXML(ЧтениеXMLАдресБуфераСтрока);
	
	Пока ЧтениеXML.Прочитать() Цикл
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			
			ТаблицаНайденаКэш = ПараметрыЧтенияXML.Таблица.Найдена;
			
			ОбновитьСвойстваЧтенияXMLДокументаODT(ЧтениеXML, ПараметрыЧтенияXML, КоличествоСтрокТЧ);
			
			Если НЕ ТаблицаНайденаКэш И ПараметрыЧтенияXML.Таблица.Найдена Тогда
				НомерТаблицы = НомерТаблицы + 1;
			КонецЕсли;
			
			Если ПараметрыЧтенияXML.Таблица.ПропуститьТекущуюСтроку Тогда
				Продолжить;
			КонецЕсли;
			
			Если ПараметрыЧтенияXML.КорневойЭлемент Тогда
				ЗаписьXMLТаблица.ЗаписатьНачалоЭлемента(ЧтениеXML.Имя);
				ЗаписьXMLСтрока.ЗаписатьНачалоЭлемента(ЧтениеXML.Имя);
			КонецЕсли;
			
			Если ПараметрыЧтенияXML.Таблица.Найдена Тогда
				ЗаписьXMLТаблица.ЗаписатьНачалоЭлемента(ЧтениеXML.Имя);
				Если ПараметрыЧтенияXML.Таблица.НайденаЭталоннаяСтрока Тогда
					ЗаписьXMLСтрока.ЗаписатьНачалоЭлемента(ЧтениеXML.Имя);
				КонецЕсли;
			КонецЕсли;
			
			Пока ЧтениеXML.ПрочитатьАтрибут() Цикл
				ОбновитьСвойстваЧтенияXMLДокументаODT(ЧтениеXML, ПараметрыЧтенияXML, КоличествоСтрокТЧ);
				
				Если ПараметрыЧтенияXML.Таблица.Найдена И НЕ ПараметрыЧтенияXML.Таблица.СодержитДанныеТЧ И ЗначениеЗаполнено(ПараметрыЧтенияXML.ИмяПараметра) Тогда
					ПараметрыЧтенияXML.Таблица.СодержитДанныеТЧ = НайденоПолеТабличнойЧасти(СписокПараметров, ПараметрыЧтенияXML.ИмяПараметра);
					НомерТаблицыСодержащейДанныеТЧ = НомерТаблицы;
				КонецЕсли;
				
				Если ПараметрыЧтенияXML.КорневойЭлемент Тогда
					ЗаписьXMLТаблица.ЗаписатьАтрибут(ЧтениеXML.Имя, ЧтениеXML.Значение);
					ЗаписьXMLСтрока.ЗаписатьАтрибут(ЧтениеXML.Имя, ЧтениеXML.Значение);
				ИначеЕсли ПараметрыЧтенияXML.Таблица.Найдена Тогда
					ЗаписьXMLТаблица.ЗаписатьАтрибут(ЧтениеXML.Имя, ЧтениеXML.Значение);
					Если ПараметрыЧтенияXML.Таблица.НайденаЭталоннаяСтрока Тогда
						ЗаписьXMLСтрока.ЗаписатьАтрибут(ЧтениеXML.Имя, ЧтениеXML.Значение);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
			
			Если ПараметрыЧтенияXML.Таблица.Найдена Тогда
				ЗаписьXMLТаблица.ЗаписатьТекст(ЧтениеXML.Значение);
				Если ПараметрыЧтенияXML.Таблица.НайденаЭталоннаяСтрока Тогда
					ЗаписьXMLСтрока.ЗаписатьТекст(ЧтениеXML.Значение);
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			
			Если ПараметрыЧтенияXML.Таблица.Найдена Тогда
				ЗаписьXMLТаблица.ЗаписатьКонецЭлемента();
				Если ПараметрыЧтенияXML.Таблица.НайденаЭталоннаяСтрока Тогда
					ЗаписьXMLСтрока.ЗаписатьКонецЭлемента();
				КонецЕсли;
			КонецЕсли;
			
			ОбновитьСвойстваЧтенияXMLДокументаODT(ЧтениеXML, ПараметрыЧтенияXML, КоличествоСтрокТЧ);
			
			Если ПараметрыЧтенияXML.КорневойЭлемент Тогда
				ЗаписьXMLТаблица.ЗаписатьКонецЭлемента();
				ЗаписьXMLСтрока.ЗаписатьКонецЭлемента();
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	ЗаписьXMLСтрока.Закрыть();
	ЗаписьXMLТаблица.Закрыть();
	
КонецПроцедуры

Процедура ПродублироватьСтрокиВТаблицеODT(ЗаписьXML, ЧтениеXMLСтрока, СписокПараметров, КоличествоСтрокТЧ, НомерСтроки, ПредставлениеСтроки, НомерВарианта, НомерТаблицыСодержащейДанныеТЧ)
	
	ЧтениеXMLНомерСтроки = 0;
	
	ПараметрыЧтенияXML = Неопределено;
	ОбновитьСвойстваЧтенияXMLДокументаODT(ЧтениеXMLСтрока, ПараметрыЧтенияXML, КоличествоСтрокТЧ);
	
	Пока ЧтениеXMLСтрока.Прочитать() Цикл
		
		Если ЧтениеXMLСтрока.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			
			Если ЧтениеXMLСтрока.Имя = "table:table-row" Тогда
				ЧтениеXMLНомерСтроки = ЧтениеXMLНомерСтроки + 1;
			КонецЕсли;
			
			Если ЧтениеXMLНомерСтроки <> НомерТаблицыСодержащейДанныеТЧ Тогда
				Продолжить;
			КонецЕсли;
			
			ОбновитьСвойстваЧтенияXMLДокументаODT(ЧтениеXMLСтрока, ПараметрыЧтенияXML, КоличествоСтрокТЧ);
			
			Если ПараметрыЧтенияXML.КорневойЭлемент Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЧтениеXMLСтрока.Имя = "text:variable-set" Тогда
				ЧтениеXMLСтрокаИмя = "text:variable-set";
				БуферТекстXML = "<text:variable-set%1>%2</text:variable-set>";
				БуферАтрибуты = "";
				БуферТекстЗначение = "";
			Иначе
				ЗаписьXML.ЗаписатьНачалоЭлемента(ЧтениеXMLСтрока.Имя);
			КонецЕсли;
			
			Пока ЧтениеXMLСтрока.ПрочитатьАтрибут() Цикл
				ОбновитьСвойстваЧтенияXMLДокументаODT(ЧтениеXMLСтрока, ПараметрыЧтенияXML, КоличествоСтрокТЧ);
				Если ЧтениеXMLСтрокаИмя = "text:variable-set" Тогда
					БуферАтрибуты = БуферАтрибуты + СтрШаблон(" %1=""%2""", ЧтениеXMLСтрока.Имя, ЧтениеXMLСтрока.Значение);
				Иначе
					ЗаписьXML.ЗаписатьАтрибут(ЧтениеXMLСтрока.Имя, ЧтениеXMLСтрока.Значение);
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли ЧтениеXMLСтрока.ТипУзла = ТипУзлаXML.Текст Тогда
			
			Если ЧтениеXMLНомерСтроки <> НомерТаблицыСодержащейДанныеТЧ Тогда
				Продолжить;
			КонецЕсли;
			
			Если ПараметрыЧтенияXML.НайденоПоле Тогда
				// Заполнение поля таблицы
				ЭтоРазделитель = ЭтоСтрокаРазделитель(СписокПараметров, ПараметрыЧтенияXML.ИмяПараметра, НомерСтроки, НомерВарианта - 1);
				Если ЭтоРазделитель Тогда
					ПредставлениеСтроки = 0;
				КонецЕсли;
				ЗначениеПараметра = ЗначениеПараметра(СписокПараметров, ПараметрыЧтенияXML.ИмяПараметра, НомерСтроки, ПредставлениеСтроки, НомерВарианта - 1);
				ЗначениеПараметра = СтрЗаменить(ЗначениеПараметра, Символы.ПС, "<text:line-break/>");
				
				БуферТекстЗначение = ЗначениеПараметра;
				
				Если ЭтоРазделитель Тогда
					БуферТекстXML = "<text:span text:style-name=""style_isgroup"">" + БуферТекстXML + "</text:span>";
				КонецЕсли;
				
				ОбновитьСвойстваЧтенияXMLДокументаODT(ЧтениеXMLСтрока, ПараметрыЧтенияXML, КоличествоСтрокТЧ);
			Иначе
				// Обычный текст
				ЗаписьXML.ЗаписатьТекст(ЧтениеXMLСтрока.Значение);
			КонецЕсли;
			
		ИначеЕсли ЧтениеXMLСтрока.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			
			Если ЧтениеXMLНомерСтроки <> НомерТаблицыСодержащейДанныеТЧ Тогда
				Продолжить;
			КонецЕсли;
			
			НайденоПолеКэш = ПараметрыЧтенияXML.НайденоПоле;
			
			ОбновитьСвойстваЧтенияXMLДокументаODT(ЧтениеXMLСтрока, ПараметрыЧтенияXML, КоличествоСтрокТЧ);
			
			Если ПараметрыЧтенияXML.КорневойЭлемент Тогда 
				Продолжить;
			КонецЕсли;
			
			Если НайденоПолеКэш Тогда
				ЗаписьXML.ЗаписатьБезОбработки(
					СтрШаблон(
						БуферТекстXML,
						БуферАтрибуты,
						БуферТекстЗначение
				));
			Иначе
				ЗаписьXML.ЗаписатьКонецЭлемента();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьИЗаполнитьТаблицуВДокументеODT(СписокПараметров, ЧтениеXMLАдресБуфераТаблица, ЧтениеXMLАдресБуфераСтрока, ЗаписьXML, КоличествоСтрокТЧ, НомерТаблицыСодержащейДанныеТЧ)
	
	КолонкаВарианты = СписокПараметров["ЗаказПокупателя"]["Запасы"]["НомерВариантаКП"];
	Если ТипЗнч(КолонкаВарианты) = Тип("СписокЗначений") Тогда
		КоличествоВариантов = КолонкаВарианты.Количество();
	ИначеЕсли ТипЗнч(КолонкаВарианты) = Тип("Массив") Тогда
		КоличествоВариантов = 0;
	КонецЕсли;
	
	Для НомерВарианта = ?(КоличествоВариантов = 0, 0, 1) По КоличествоВариантов Цикл
		
		ИмяПараметра = "";
		ЗначениеПараметра = "";
		ЧтениеXMLБуферОткрыт = Ложь;
		
		Если КоличествоВариантов > 1 Тогда
			ЗаголовокВарианта = СтрШаблон(
				НСтр("ru='Вариант №%1'"),
				НомерВарианта
			);
			ЗаписьXML.ЗаписатьБезОбработки(СтрШаблон("<text:p>%1</text:p>", ЗаголовокВарианта));
		КонецЕсли;
		
		КолСтрок = СписокПараметров["ЗаказПокупателя"]["Запасы"]["НомерВариантаКП"][НомерВарианта - 1].Значение.Количество();
		
		ЧтениеXMLТаблица = Новый ЧтениеXML;
		ЧтениеXMLТаблица.ОткрытьФайл(ЧтениеXMLАдресБуфераТаблица);
		ЧтениеXMLТаблица.ИгнорироватьПробелы = Ложь;
		
		ПараметрыЧтенияXML = Неопределено;
		ОбновитьСвойстваЧтенияXMLДокументаODT(ЧтениеXMLТаблица, ПараметрыЧтенияXML, КоличествоСтрокТЧ);
		
		УзелXMLЭлементТекущийИмя = "";
		УзелXMLЭлементРодительИмя = "";
		
		НомерТаблицы = 0;
		
		Пока ЧтениеXMLТаблица.Прочитать() Цикл
			
			Если ЧтениеXMLТаблица.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				
				ТаблицаНайденаКэш = ПараметрыЧтенияXML.Таблица.Найдена;
				НайденаЭталоннаяСтрокаКэш = ПараметрыЧтенияXML.Таблица.НайденаЭталоннаяСтрока;
				ОбновитьСвойстваЧтенияXMLДокументаODT(ЧтениеXMLТаблица, ПараметрыЧтенияXML, КоличествоСтрокТЧ);
				
				Если НЕ ТаблицаНайденаКэш И ПараметрыЧтенияXML.Таблица.Найдена Тогда
					НомерТаблицы = НомерТаблицы + 1;
				КонецЕсли;
				
				Если НомерТаблицы <> НомерТаблицыСодержащейДанныеТЧ Тогда
					Продолжить;
				КонецЕсли;
				
				Если НайденаЭталоннаяСтрокаКэш И ПараметрыЧтенияXML.Таблица.НайденаЭталоннаяСтрока Тогда
					Продолжить;
				КонецЕсли;
				
				Если ПараметрыЧтенияXML.КорневойЭлемент Тогда
					Продолжить;
				КонецЕсли;
				
				Если ПараметрыЧтенияXML.Таблица.НайденаЭталоннаяСтрока Тогда
					
					ПредставлениеСтроки = 0;
					Для НомерСтроки = 0 По КолСтрок - 1 Цикл
						
						ПредставлениеСтроки = ПредставлениеСтроки + 1;
						
						ЧтениеXMLСтрока = Новый ЧтениеXML;
						ЧтениеXMLСтрока.ОткрытьФайл(ЧтениеXMLАдресБуфераСтрока);
						ЧтениеXMLСтрока.ИгнорироватьПробелы = Ложь;
						
						ПродублироватьСтрокиВТаблицеODT(ЗаписьXML, ЧтениеXMLСтрока, СписокПараметров, КоличествоСтрокТЧ, НомерСтроки, ПредставлениеСтроки, НомерВарианта, НомерТаблицыСодержащейДанныеТЧ);
						
						ЧтениеXMLСтрока.Закрыть();
						
					КонецЦикла;
					
				Иначе
					ЗаписьXML.ЗаписатьНачалоЭлемента(ЧтениеXMLТаблица.Имя);
					Пока ЧтениеXMLТаблица.ПрочитатьАтрибут() Цикл
						ЗаписьXML.ЗаписатьАтрибут(ЧтениеXMLТаблица.Имя, ЧтениеXMLТаблица.Значение);
					КонецЦикла;
				КонецЕсли;
				
				УзелXMLЭлементРодительИмя = ЧтениеXMLТаблица.Имя;
				
			ИначеЕсли ЧтениеXMLТаблица.ТипУзла = ТипУзлаXML.Текст Тогда
				
				Если НомерТаблицы <> НомерТаблицыСодержащейДанныеТЧ Тогда
					Продолжить;
				КонецЕсли;
				
				Если ПараметрыЧтенияXML.Таблица.НайденаЭталоннаяСтрока Тогда
					Продолжить;
				КонецЕсли;
				
				ЗаписьXML.ЗаписатьТекст(ЧтениеXMLТаблица.Значение);
				
			ИначеЕсли ЧтениеXMLТаблица.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
				
				ТаблицаНайденаКэш = ПараметрыЧтенияXML.Таблица.Найдена;
				НайденаЭталоннаяСтрокаКэш = ПараметрыЧтенияXML.Таблица.НайденаЭталоннаяСтрока;
				
				ОбновитьСвойстваЧтенияXMLДокументаODT(ЧтениеXMLТаблица, ПараметрыЧтенияXML, КоличествоСтрокТЧ);
				
				
				Если ТаблицаНайденаКэш И НомерТаблицы <> НомерТаблицыСодержащейДанныеТЧ Тогда
					Продолжить;
				КонецЕсли;
				
				Если НайденаЭталоннаяСтрокаКэш Тогда
					Продолжить;
				КонецЕсли;
				
				Если ПараметрыЧтенияXML.КорневойЭлемент Тогда 
					Продолжить;
				КонецЕсли;
				
				ЗаписьXML.ЗаписатьКонецЭлемента();
				
			КонецЕсли;
			
		КонецЦикла;
		
		ЧтениеXMLТаблица.Закрыть();
		
		Если КоличествоВариантов > 0 Тогда
			ЗаписьXML.ЗаписатьБезОбработки("<text:p/>");
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыДокументаODT(ЧтениеXML, ЧтениеXMLТаблица, ЗаписьXML, ЧтениеXMLАдресБуфераСтрока, ЧтениеXMLАдресБуфераТаблица, СписокПараметров, КоличествоСтрокТЧ)
	
	ЧтениеXML.ИгнорироватьПробелы = Ложь;
	
	ЗначениеПараметра = "";
	ЧтениеXMLБуферОткрыт = Ложь;
	
	ТаблицаВставлена = Ложь;
	НомерТаблицы = 0;
	НомерТаблицыСодержащейДанныеТЧ = 0;
	ЗаписатьТаблицуИСтрокуВБуферODT(ЧтениеXMLТаблица, ЧтениеXMLАдресБуфераТаблица, ЧтениеXMLАдресБуфераСтрока, СписокПараметров,КоличествоСтрокТЧ, НомерТаблицыСодержащейДанныеТЧ);
	
	ПараметрыЧтенияXML = Неопределено;
	ОбновитьСвойстваЧтенияXMLДокументаODT(ЧтениеXML, ПараметрыЧтенияXML, КоличествоСтрокТЧ);
	
	СтилиДобавлены = Ложь;
	
	Пока ЧтениеXML.Прочитать() Цикл
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			
			ТаблицаНайденаКэш = ПараметрыЧтенияXML.Таблица.Найдена;
			
			ОбновитьСвойстваЧтенияXMLДокументаODT(ЧтениеXML, ПараметрыЧтенияXML, КоличествоСтрокТЧ);
			
			Если НЕ ТаблицаНайденаКэш И ПараметрыЧтенияXML.Таблица.Найдена Тогда
				НомерТаблицы = НомерТаблицы + 1;
			КонецЕсли;
			
			Если ЧтениеXML.Имя = "office:body" И НЕ СтилиДобавлены Тогда
				ДобавитьСтильГруппировки(ЗаписьXML, Истина);
			КонецЕсли;
			
			Если ПараметрыЧтенияXML.Таблица.Найдена И НЕ ТаблицаВставлена И НомерТаблицы = НомерТаблицыСодержащейДанныеТЧ Тогда
				
				ДобавитьИЗаполнитьТаблицуВДокументеODT(СписокПараметров, ЧтениеXMLАдресБуфераТаблица, ЧтениеXMLАдресБуфераСтрока, ЗаписьXML, КоличествоСтрокТЧ, НомерТаблицыСодержащейДанныеТЧ);
				ТаблицаВставлена = Истина;
				
			ИначеЕсли НЕ ПараметрыЧтенияXML.Таблица.Найдена ИЛИ ПараметрыЧтенияXML.Таблица.Найдена И НомерТаблицы <> НомерТаблицыСодержащейДанныеТЧ Тогда
				
				ЗаписьXML.ЗаписатьНачалоЭлемента(ЧтениеXML.Имя);
				Пока ЧтениеXML.ПрочитатьАтрибут() Цикл
					ОбновитьСвойстваЧтенияXMLДокументаODT(ЧтениеXML, ПараметрыЧтенияXML, КоличествоСтрокТЧ);
					ЗаписьXML.ЗаписатьАтрибут(ЧтениеXML.Имя, ЧтениеXML.Значение);
				КонецЦикла;
				
			КонецЕсли;
			
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
			
			Если ПараметрыЧтенияXML.Таблица.Найдена И НомерТаблицы = НомерТаблицыСодержащейДанныеТЧ Тогда
				Продолжить;
			КонецЕсли;
			
			Если ПараметрыЧтенияXML.НайденоПоле Тогда
				// Заполнение поля документа
				ЗначениеПараметра = ЗначениеПараметра(СписокПараметров, ПараметрыЧтенияXML.ИмяПараметра);
				ЗначениеПараметра = СтрЗаменить(ЗначениеПараметра, Символы.ПС, "<text:line-break/>");
				ЗаписьXML.ЗаписатьБезОбработки(ЗначениеПараметра);
				
				ПараметрыЧтенияXML.НайденоПоле = Ложь;
			Иначе
				// Обычный текст
				ЗаписьXML.ЗаписатьТекст(ЧтениеXML.Значение);
			КонецЕсли;
			
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			
			Если ЧтениеXML.Имя = "office:automatic-styles" Тогда
				ДобавитьСтильГруппировки(ЗаписьXML);
				СтилиДобавлены = Истина;
			КонецЕсли;
			
			ТаблицаНайденаКэш = ПараметрыЧтенияXML.Таблица.Найдена;
			ОбновитьСвойстваЧтенияXMLДокументаODT(ЧтениеXML, ПараметрыЧтенияXML, КоличествоСтрокТЧ);
			Если ТаблицаНайденаКэш И НомерТаблицы = НомерТаблицыСодержащейДанныеТЧ Тогда
				Продолжить;
			КонецЕсли;
			
			ЗаписьXML.ЗаписатьКонецЭлемента();
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьСтильГруппировки(ЗаписьXML, ДобавитьРодителя = Ложь)
	
	СтильТекст = СтрШаблон(
		"%1<style:style style:name=""%2"" style:family=""text"">
		|	<style:text-properties fo:font-weight=""bold"" style:font-weight-asian=""bold"" style:font-weight-complex=""bold""/>
		|</style:style>%3",
		?(ДобавитьРодителя, "<office:automatic-styles>", ""),
		"style_isgroup",
		?(ДобавитьРодителя, "</office:automatic-styles>", "")
	);
	
	ЗаписьXML.ЗаписатьБезОбработки(СтильТекст);
	
КонецПроцедуры

#КонецОбласти
