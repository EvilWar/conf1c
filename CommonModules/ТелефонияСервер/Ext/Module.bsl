
#Область ПрограммныйИнтерфейс

Процедура ОбработатьЗвонокОблачнаяТелефония(ПараметрыЗапроса) Экспорт
	
	МестноеВремяВызова = МестноеВремя(ПараметрыЗапроса.timestamp, ЧасовойПоясСеанса());
	
	Если ПараметрыЗапроса.from.Свойство("extension") И ПараметрыЗапроса.to.Свойство("number") Тогда
		
		Если ПараметрыЗапроса.Свойство("command_id") И ВРег(ПараметрыЗапроса.call_state) = ВРег("Appeared") Тогда
			
			СобытиеСсылка = Документы.Событие.ПолучитьСсылку(Новый УникальныйИдентификатор(ПараметрыЗапроса.command_id));
			Если ОбщегоНазначения.СсылкаСуществует(СобытиеСсылка) Тогда
				
				МенеджерЗаписи = РегистрыСведений.СоответствиеЗвонковОблачномуПровайдеру.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.ТелефонныйЗвонок = СобытиеСсылка;
				МенеджерЗаписи.ИдентификаторГруппыВызовов = ПараметрыЗапроса.entry_id;
				МенеджерЗаписи.Записать();
				
			КонецЕсли;
			
		ИначеЕсли Не ПараметрыЗапроса.Свойство("command_id") Тогда
			
			ПользовательОтКого = ПолучитьПользователяПоВнутреннемуНомеру(ПараметрыЗапроса.from.extension);
			АбонентКому = ПолучитьАбонентаПоНомеруТелефона(ПараметрыЗапроса.to.number);
			
			Если ЗначениеЗаполнено(ПользовательОтКого) И ЗначениеЗаполнено(АбонентКому) Тогда
				Событие = ЗарегистрироватьСобытиеЗвонокОблачнаяТелефония(
					ПараметрыЗапроса.entry_id,
					ПараметрыЗапроса.to.number,
					АбонентКому,
					ПользовательОтКого,
					Перечисления.ВходящееИсходящееСобытие.Исходящее,
					ПараметрыЗапроса.call_state,
					МестноеВремяВызова
				);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПараметрыЗапроса.from.Свойство("number") И Не ПараметрыЗапроса.Свойство("command_id") Тогда
		
		АбонентОтКого = ПолучитьАбонентаПоНомеруТелефона(ПараметрыЗапроса.from.number);
		
		Если ЗначениеЗаполнено(АбонентОтКого)
			И (ВРег(ПараметрыЗапроса.location) = ВРег("ivr") Или ВРег(ПараметрыЗапроса.location) = ВРег("queue"))
			И ВРег(ПараметрыЗапроса.call_state) = ВРег("Appeared")
			И Не ПараметрыЗапроса.to.Свойство("extension")
			И ПолучитьНастройкиТелефонии().МаршрутизироватьВходящиеНаОтветственных
			И АбонентОтКого.Метаданные().Реквизиты.Найти("Ответственный") <> Неопределено Тогда
			
			Ответственный = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(АбонентОтКого, "Ответственный");
			Если ЗначениеЗаполнено(Ответственный) И ТипЗнч(Ответственный) = Тип("СправочникСсылка.Сотрудники") Тогда
				Ответственный = РегистрыСведений.СотрудникиПользователя.ПолучитьПользователяПоСотруднику(Ответственный);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Ответственный) И ТипЗнч(Ответственный) = Тип("СправочникСсылка.Пользователи") Тогда
				
				ВнутреннийНомер = ПолучитьВнутреннийНомерПоПользователю(Ответственный);
				Если ЗначениеЗаполнено(ВнутреннийНомер) Тогда
					МаршрутизироватьВызовОблачнаяТелефония(ПараметрыЗапроса.call_id, ВнутреннийНомер);
					Возврат;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПараметрыЗапроса.to.Свойство("extension") Тогда
			
			ПользовательКому = ПолучитьПользователяПоВнутреннемуНомеру(ПараметрыЗапроса.to.extension);
			
			Если ЗначениеЗаполнено(АбонентОтКого) И ЗначениеЗаполнено(ПользовательКому) Тогда
				Событие = ЗарегистрироватьСобытиеЗвонокОблачнаяТелефония(
					ПараметрыЗапроса.entry_id,
					ПараметрыЗапроса.from.number,
					АбонентОтКого,
					ПользовательКому,
					Перечисления.ВходящееИсходящееСобытие.Входящее,
					ПараметрыЗапроса.call_state,
					МестноеВремяВызова
				);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ПользовательКому) И ВРег(ПараметрыЗапроса.call_state) = ВРег("Appeared") Тогда
				ЗарегистрироватьТекущийВходящийЗвонок(
					ПараметрыЗапроса.from.number,
					АбонентОтКого,
					ПользовательКому,
					МестноеВремяВызова,
					Событие
				);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура НабратьНомерОблачнаяТелефония(НомерАбонента, ИдентификаторКоманды) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьОблачнуюТелефонию") Тогда
		Возврат;
	КонецЕсли;
	
	ВнутреннийНомер = ПолучитьВнутреннийНомерПоПользователю();
	Если ВнутреннийНомер = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет));
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
	
	ЗаписьJSON.ЗаписатьИмяСвойства("command_id");
	ЗаписьJSON.ЗаписатьЗначение(Строка(ИдентификаторКоманды));
	
	ЗаписьJSON.ЗаписатьИмяСвойства("from");
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
	ЗаписьJSON.ЗаписатьИмяСвойства("extension");
	ЗаписьJSON.ЗаписатьЗначение(ВнутреннийНомер);
	ЗаписьJSON.ЗаписатьКонецОбъекта();
	
	ЗаписьJSON.ЗаписатьИмяСвойства("to_number");
	ЗаписьJSON.ЗаписатьЗначение(НомерАбонента);
	
	ЗаписьJSON.ЗаписатьКонецОбъекта();
	json = ЗаписьJSON.Закрыть();
	
	НастройкиТелефонии = ПолучитьНастройкиТелефонии();
	sign = ПолучитьSign(НастройкиТелефонии.vpbx_api_key, json, НастройкиТелефонии.vpbx_api_salt);
	
	ПараметрыТела = Новый Массив;
	ПараметрыТела.Добавить("vpbx_api_key=" + НастройкиТелефонии.vpbx_api_key);
	ПараметрыТела.Добавить("sign=" + sign);
	ПараметрыТела.Добавить(КодироватьСтроку("json=" + json, СпособКодированияСтроки.URLВКодировкеURL));
	
	URL = ТелефонияКлиентСервер.КорневойАдресОблачногоПровайдера() + "commands/callback";
	СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(URL);
	
	HTTPЗапрос = Новый HTTPЗапрос();
	HTTPЗапрос.АдресРесурса = СтруктураURI.ПутьНаСервере;
	HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
	HTTPЗапрос.УстановитьТелоИзСтроки(СтрСоединить(ПараметрыТела, "&"),
		КодировкаТекста.UTF8,
		ИспользованиеByteOrderMark.НеИспользовать
	);
	
	HTTPСоединение = Новый HTTPСоединение(
		СтруктураURI.Хост,
		СтруктураURI.Порт,,,,,
		Новый ЗащищенноеСоединениеOpenSSL
	);
	
	HTTPОтвет = HTTPСоединение.ВызватьHTTPМетод("POST", HTTPЗапрос);
	
КонецПроцедуры

Процедура МаршрутизироватьВызовОблачнаяТелефония(call_id, ВнутреннийНомер) Экспорт
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет));
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
	
	ЗаписьJSON.ЗаписатьИмяСвойства("command_id");
	ЗаписьJSON.ЗаписатьЗначение(Строка(Новый УникальныйИдентификатор));
	
	ЗаписьJSON.ЗаписатьИмяСвойства("call_id");
	ЗаписьJSON.ЗаписатьЗначение(call_id);
	
	ЗаписьJSON.ЗаписатьИмяСвойства("to_number");
	ЗаписьJSON.ЗаписатьЗначение(ВнутреннийНомер);
	
	ЗаписьJSON.ЗаписатьКонецОбъекта();
	json = ЗаписьJSON.Закрыть();
	
	НастройкиТелефонии = ПолучитьНастройкиТелефонии();
	sign = ПолучитьSign(НастройкиТелефонии.vpbx_api_key, json, НастройкиТелефонии.vpbx_api_salt);
	
	ПараметрыТела = Новый Массив;
	ПараметрыТела.Добавить("vpbx_api_key=" + НастройкиТелефонии.vpbx_api_key);
	ПараметрыТела.Добавить("sign=" + sign);
	ПараметрыТела.Добавить(КодироватьСтроку("json=" + json, СпособКодированияСтроки.URLВКодировкеURL));
	
	URL = ТелефонияКлиентСервер.КорневойАдресОблачногоПровайдера() + "commands/route";
	СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(URL);
	
	HTTPЗапрос = Новый HTTPЗапрос();
	HTTPЗапрос.АдресРесурса = СтруктураURI.ПутьНаСервере;
	HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
	HTTPЗапрос.УстановитьТелоИзСтроки(СтрСоединить(ПараметрыТела, "&"),
		КодировкаТекста.UTF8,
		ИспользованиеByteOrderMark.НеИспользовать
	);
	
	HTTPСоединение = Новый HTTPСоединение(
		СтруктураURI.Хост,
		СтруктураURI.Порт,,,,,
		Новый ЗащищенноеСоединениеOpenSSL);
	
	HTTPОтвет = HTTPСоединение.ВызватьHTTPМетод("POST", HTTPЗапрос);
	
	ЗаписьЖурналаРегистрации(
		СобытиеЖурналаРегистрации() + "./commands/route",
		УровеньЖурналаРегистрации.Примечание,
		,
		,
		json + Символы.ПС + НСтр("ru='Код состояния HTTP ответа: '") + HTTPОтвет.КодСостояния
	);
	
КонецПроцедуры

Процедура ОбработатьУведомлениеОЗаписиОблачнаяТелефония(ПараметрыЗапроса) Экспорт
	
	Если ВРег(ПараметрыЗапроса.recording_state) <> ВРег("Completed")
		Или ПараметрыЗапроса.completion_code <> 1000 // 1000 - Действие успешно выполнено
		Или СтрНайти(ВРег(ПараметрыЗапроса.recipient), "CLOUD") = 0 Тогда
		
		Возврат;
	КонецЕсли;
	
	Событие = ПолучитьСобытие(ПараметрыЗапроса.entry_id);
	
	Если Событие = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерЗаписи = РегистрыСведений.СоответствиеЗвонковОблачномуПровайдеру.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ТелефонныйЗвонок = Событие;
	МенеджерЗаписи.ИдентификаторГруппыВызовов = ПараметрыЗапроса.entry_id;
	МенеджерЗаписи.Прочитать();
	Если МенеджерЗаписи.Выбран() Тогда
		МенеджерЗаписи.ИдентификаторЗаписиРазговора = ПараметрыЗапроса.recording_id;
		МенеджерЗаписи.Записать();
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьВходящийЗвонокПользователя(Пользователь = Неопределено) Экспорт
	
	Результат = Новый Структура("АбонентОтКого, ДатаЗвонка, НомерТелефонаАбонента, ПредставлениеАбонента");
	
	Если Пользователь = Неопределено Тогда
		Пользователь = ПользователиКлиентСервер.ТекущийПользователь();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ТекущиеВходящиеЗвонки.ИдентификаторЗвонка КАК ИдентификаторЗвонка,
		|	ТекущиеВходящиеЗвонки.АбонентОтКого КАК АбонентОтКого,
		|	ТекущиеВходящиеЗвонки.ДатаЗвонка КАК ДатаЗвонка,
		|	ТекущиеВходящиеЗвонки.НомерТелефонаАбонента КАК НомерТелефонаАбонента,
		|	ПРЕДСТАВЛЕНИЕ(ТекущиеВходящиеЗвонки.АбонентОтКого) КАК ПредставлениеАбонента
		|ИЗ
		|	РегистрСведений.ТекущиеВходящиеЗвонки КАК ТекущиеВходящиеЗвонки
		|ГДЕ
		|	ТекущиеВходящиеЗвонки.ПользовательКому = &ПользовательКому
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаЗвонка УБЫВ";
	
	Запрос.УстановитьПараметр("ПользовательКому", Пользователь);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.ТекущиеВходящиеЗвонки.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ПользовательКому.Установить(Пользователь);
	НаборЗаписей.Записать(Истина);
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьНастройкиТелефонии() Экспорт
	
	Результат = НастройкиТелефонииПоУмолчанию();
	СохраненныеНастройки = Константы.НастройкиТелефонии.Получить().Получить();
	
	Если СохраненныеНастройки <> Неопределено Тогда
		
		Для Каждого КлючИЗначение Из Результат Цикл
			Если СохраненныеНастройки.Свойство(КлючИЗначение.Ключ) Тогда
				Результат[КлючИЗначение.Ключ] = СохраненныеНастройки[КлючИЗначение.Ключ];
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция УстановитьНастройкуТелефонии(Ключ, Значение) Экспорт
	
	НастройкиТелефонии = ТелефонияСервер.ПолучитьНастройкиТелефонии();
	НастройкиТелефонии.Вставить(Ключ, Значение);
	
	Константы.НастройкиТелефонии.Установить(Новый ХранилищеЗначения(НастройкиТелефонии, Новый СжатиеДанных(6)));
	
КонецФункции

Процедура ОбработатьЗвонок(знач НомерТелефонаАбонента, знач ПользовательКому,
	знач ДатаЗвонка, знач ТипЗвонка, знач ВариантСобытия) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьМобильнуюТелефонию")
		Или Не ОбрабатыватьЗвонокСНомера(НомерТелефонаАбонента) Тогда
		
		Возврат;
	КонецЕсли;
	
	Если ТипЗвонка = "Входящий" Тогда
		
		АбонентОтКого = Неопределено;
		
		Если Не ПустаяСтрока(НомерТелефонаАбонента) Тогда
			АбонентОтКого = ПолучитьАбонентаПоНомеруТелефона(НомерТелефонаАбонента);
		КонецЕсли;
		
		Если ВариантСобытия = "НачалоСигналаВходящего" Тогда
			
			Событие = Неопределено;
			Если ЗначениеЗаполнено(АбонентОтКого) Тогда
				Событие = ЗарегистрироватьСобытиеЗвонок(НомерТелефонаАбонента, АбонентОтКого, ПользовательКому, ДатаЗвонка);
			КонецЕсли;
			
			ЗарегистрироватьТекущийВходящийЗвонок(НомерТелефонаАбонента, АбонентОтКого, ПользовательКому, ДатаЗвонка, Событие);
			
		ИначеЕсли ВариантСобытия = "ЗавершениеВходящего" Тогда
			
			УстановитьОкончаниеСобытияЗвонка(ПользовательКому, ДатаЗвонка);
			
		КонецЕсли;
		
	ИначеЕсли ТипЗвонка = "Пропущенный" Тогда
		
		Если ВариантСобытия = "ЗавершениеВходящего" Тогда
			
			УстановитьОкончаниеСобытияЗвонка(ПользовательКому, ДатаЗвонка);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПерсональноеМобильноеУстройство() Экспорт
	
	Возврат ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиТелефонии", "УзелОбмена", Неопределено);
	
КонецФункции

// Процедура обработчик подписки "ОчиститьВходящиеЗвонки". Очищает вспомогательные данные по удаляемому абоненту.
//
Процедура ОчиститьВходящиеЗвонкиПередУдалением(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТекущиеВходящиеЗвонки.ПользовательКому КАК ПользовательКому
		|ИЗ
		|	РегистрСведений.ТекущиеВходящиеЗвонки КАК ТекущиеВходящиеЗвонки
		|ГДЕ
		|	ТекущиеВходящиеЗвонки.АбонентОтКого = &УдаляемыйАбонент";
	
	Запрос.УстановитьПараметр("УдаляемыйАбонент", Источник.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НаборЗаписей = РегистрыСведений.ТекущиеВходящиеЗвонки.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ПользовательКому.Установить(Выборка.ПользовательКому);
		НаборЗаписей.Записать(Истина);
	КонецЦикла;
	
КонецПроцедуры

Процедура ИзменитьСлужебногоПользователяОблачнаяТелефония(Включить = Ложь) Экспорт
	
	Логин = "TelephonyService";
	Пароль = "ae71f215-2d74-4528-be4f-f29923b8f3dd";
	
	УстановитьПривилегированныйРежим(Истина);
	ПользовательИзСправочника = Пользователи.НайтиПоИмени(Логин);
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ПользовательИзСправочника = Неопределено И Включить Тогда
		
		ОписаниеПользователяИБ = Пользователи.НовоеОписаниеПользователяИБ();
		ОписаниеПользователяИБ.Имя = Логин;
		ОписаниеПользователяИБ.ПолноеИмя = НСтр("ru='Служебный пользователь облачной телефонии'");
		ОписаниеПользователяИБ.АутентификацияСтандартная = Истина;
		ОписаниеПользователяИБ.ПоказыватьВСпискеВыбора = Ложь;
		ОписаниеПользователяИБ.Вставить("Действие", "Записать");
		ОписаниеПользователяИБ.Вставить("ВходВПрограммуРазрешен", Истина);
		ОписаниеПользователяИБ.ЗапрещеноИзменятьПароль = Истина;
		ОписаниеПользователяИБ.Пароль = Пароль;
		ОписаниеПользователяИБ.Роли = Новый Массив;
		ОписаниеПользователяИБ.Роли.Добавить(Метаданные.Роли.ИспользованиеМетодовПровайдераТелефонии.Имя);
		
		НовыйПользователь = Справочники.Пользователи.СоздатьЭлемент();
		НовыйПользователь.Наименование = ОписаниеПользователяИБ.ПолноеИмя;
		НовыйПользователь.Служебный = Истина;
		НовыйПользователь.ДополнительныеСвойства.Вставить("ОписаниеПользователяИБ", ОписаниеПользователяИБ);
		НовыйПользователь.Записать();
		
		Возврат;
		
	КонецЕсли;
	
	ИзменитьДоступВБазу(Включить, Пароль, ПользовательИзСправочника);
	
КонецПроцедуры

Функция АдресОбратногоВызоваОблачнаяТелефония() Экспорт
	Перем НавигационнаяСсылка;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьОблачнуюТелефонию") Тогда
		
		Возврат НавигационнаяСсылка;
		
	КонецЕсли;
	
	ОбщиеНастройкиТелефонии = УдалитьПроксированиеЗапросов.ПолучитьОбщиеНастройкиТелефонии();
	Если ОбщиеНастройкиТелефонии.Свойство("АдресРесурсаАнонимнойПубликации")
		И ОбщиеНастройкиТелефонии.Свойство("АдресРесурсаОсновнойПубликации")
		И ОбщиеНастройкиТелефонии.Свойство("ИмяАнонимнойПубликации")
		И ОбщиеНастройкиТелефонии.Свойство("ИмяОсновнойПубликации")
		Тогда
		
		ВызватьИсключение НСтр("ru ='Необходимо заполнить параметры публикаций http-сервисов'");
		
		
	КонецЕсли;
	
	Протоколы = Новый Массив(3);
	Протоколы[0] = "https://";
	Протоколы[1] = "http://";
	Протоколы[2] = "e1c://server/";
	
	ПервичнаяНавигационнаяСсылка = ПолучитьНавигационнуюСсылкуИнформационнойБазы();
	
	СтрокаПодключенияПараметрами = Новый Структура;
	СтрокаПодключенияПараметрами.Вставить("НавигационнаяСсылка", ПервичнаяНавигационнаяСсылка);
	СтрокаПодключенияПараметрами.Вставить("АдресРесурсаАнонимнойПубликации", УдалитьПроксированиеЗапросов.ПрочитатьЗначениеНастройкиНаСервере(ОбщиеНастройкиТелефонии, "АдресРесурсаАнонимнойПубликации"));
	СтрокаПодключенияПараметрами.Вставить("АдресРесурсаОсновнойПубликации", УдалитьПроксированиеЗапросов.ПрочитатьЗначениеНастройкиНаСервере(ОбщиеНастройкиТелефонии, "АдресРесурсаОсновнойПубликации"));
	СтрокаПодключенияПараметрами.Вставить("ИмяАнонимнойПубликации", Метаданные.HTTPСервисы.УдалитьTelephonyAnonimizer.КорневойURL);
	СтрокаПодключенияПараметрами.Вставить("ИмяОсновнойПубликации", Метаданные.HTTPСервисы.TelephonyApi.КорневойURL);
	СтрокаПодключенияПараметрами.Вставить("ОбластьДанных", РаботаВМоделиСервиса.ЗначениеРазделителяСеанса());
	
	Для Каждого Протокол Из Протоколы Цикл
		
		Если СтрНайти(ПервичнаяНавигационнаяСсылка, Протокол) > 0 Тогда
			
			СтрокаПодключенияБезПротокола = СтрЗаменить(ПервичнаяНавигационнаяСсылка, Протокол, "");
			ПозицияПервогоРазделителя = Найти(СтрокаПодключенияБезПротокола, "/");
			ИмяСервера = ?(ПозицияПервогоРазделителя > 0, Лев(СтрокаПодключенияБезПротокола, ПозицияПервогоРазделителя - 1), ИмяСервера);
			
			СтрокаПодключенияПараметрами.Вставить("Протокол", Протокол);
			СтрокаПодключенияПараметрами.Вставить("ИмяСервера", ИмяСервера);
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		
		Если ОбщиеНастройкиТелефонии.Свойство("ОпубликованТолькоОсновнойHTTPСервис")
			И ОбщиеНастройкиТелефонии.ОпубликованТолькоОсновнойHTTPСервис = Истина Тогда
			
			// http://ИмяСервера/АдресРесурса/НомерОбласти/hs/ИмяПубликации/МетодСервисаHTTP
			ШаблонСтрокиПубликацииОблачнойТелефонии = "[Протокол][ИмяСервера]/[АдресРесурсаОсновнойПубликации]/[ОбластьДанных]/hs/[ИмяОсновнойПубликации]";
			
		Иначе
			
			// http://ИмяСервера/АдресРесурса/hs/ИмяПубликации/НомерОбласти/МетодСервисаHTTP
			ШаблонСтрокиПубликацииОблачнойТелефонии = "[Протокол][ИмяСервера]/[АдресРесурсаАнонимнойПубликации]/hs/[ИмяАнонимнойПубликации]/[ОбластьДанных]";
			
		КонецЕсли;
		
	Иначе
		
		// Сейчас необходимо дать пользователю поле с АдресРесурсаОсновнойПубликации на локальной машине, иначе работать не будет...
		
		//http://ИмяСервера/АдресРесурса/hs/ИмяПубликации/МетодСервисаHTTP
		ШаблонСтрокиПубликацииОблачнойТелефонии = "[Протокол][ИмяСервера]/[АдресРесурсаОсновнойПубликации]/hs/[ИмяОсновнойПубликации]";
		
	КонецЕсли;
	
	НавигационнаяСсылка = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШаблонСтрокиПубликацииОблачнойТелефонии, СтрокаПодключенияПараметрами);
	
	Возврат НавигационнаяСсылка;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ВосстановлениеJSON(Свойство, Значение, ДополнительныеПараметры) Экспорт
	
	Если Свойство = "timestamp" Тогда
		Возврат Дата(1970,01,01) + Число(Значение);
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Возвращает строковую константу для формирования сообщений журнала регистрации.
//
// Возвращаемое значение:
//   Строка
//
Функция СобытиеЖурналаРегистрации() Экспорт
	
	Возврат НСтр("ru='Телефония'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
КонецФункции

Функция ПолучитьSign(vpbx_api_key, json, vpbx_api_salt) Экспорт
	
	ХешированиеДанных = Новый ХешированиеДанных(ХешФункция.SHA256);
	ХешированиеДанных.Добавить(vpbx_api_key + json + vpbx_api_salt);
	
	Возврат НРег(СтрЗаменить(Строка(ХешированиеДанных.ХешСумма), " ", ""));
	
КонецФункции

Функция ПолучитьПользователяОтветственногоЗаАбонента(АбонентОтКого) Экспорт
	
	Если Не ЗначениеЗаполнено(АбонентОтКого) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если АбонентОтКого.Метаданные().Реквизиты.Найти("Ответственный") = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Ответственный = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(АбонентОтКого, "Ответственный");
	Если ЗначениеЗаполнено(Ответственный) И ТипЗнч(Ответственный) = Тип("СправочникСсылка.Сотрудники") Тогда
		Ответственный = РегистрыСведений.СотрудникиПользователя.ПолучитьПользователяПоСотруднику(Ответственный);
	КонецЕсли;
	
	Возврат Ответственный;
	
КонецФункции

Функция ПолучитьИдентификаторЗаписиРазговора(ТелефонныйЗвонок) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СоответствиеЗвонковОблачномуПровайдеру.ИдентификаторЗаписиРазговора КАК ИдентификаторЗаписиРазговора
		|ИЗ
		|	РегистрСведений.СоответствиеЗвонковОблачномуПровайдеру КАК СоответствиеЗвонковОблачномуПровайдеру
		|ГДЕ
		|	СоответствиеЗвонковОблачномуПровайдеру.ТелефонныйЗвонок = &ТелефонныйЗвонок";
	
	Запрос.УстановитьПараметр("ТелефонныйЗвонок", ТелефонныйЗвонок);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ИдентификаторЗаписиРазговора;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПолучитьАбонентаПоНомеруТелефона(знач НомерТелефонаАбонента)
	
	ПоисковоеВыражение = СтрЗаменить(НомерТелефонаАбонента, "+", "") + "%";
	Если СтрНачинаетсяС(НомерТелефонаАбонента, "7") Или СтрНачинаетсяС(НомерТелефонаАбонента, "8") Тогда
		ПоисковоеВыражение = "[78]" + Сред(ПоисковоеВыражение, 2);
	КонецЕсли;
	
	ТипыАбонентов = Новый Массив;
	ТипыАбонентов.Добавить(Метаданные.Справочники.Контрагенты);
	ТипыАбонентов.Добавить(Метаданные.Справочники.КонтактныеЛица);
	
	СекцияОбъединить = "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|";
	БазаЗапроса = "
		|ВЫБРАТЬ
		|	КонтактнаяИнформация_1.Ссылка
		|ИЗ
		|	Справочник.Контрагенты.КонтактнаяИнформация КАК КонтактнаяИнформация_1
		|ГДЕ
		|	КонтактнаяИнформация_1.НомерТелефона ПОДОБНО &ПоисковоеВыражение
		|	И КонтактнаяИнформация_1.Тип = &ТипТелефон";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПоисковоеВыражение", ПоисковоеВыражение);
	Запрос.УстановитьПараметр("ТипТелефон", Перечисления.ТипыКонтактнойИнформации.Телефон);
	Запрос.Текст = "";
	НомерОбъединения = 0;
	
	Для Каждого ТипАбонента Из ТипыАбонентов Цикл
		
		НомерОбъединения = НомерОбъединения + 1;
		ЧастьОбъединения = СтрЗаменить(БазаЗапроса, "Справочник.Контрагенты", ТипАбонента.ПолноеИмя());
		ЧастьОбъединения = СтрЗаменить(ЧастьОбъединения, "КонтактнаяИнформация_1", "КонтактнаяИнформация_" + НомерОбъединения);
		
		Запрос.Текст = Запрос.Текст + ?(ПустаяСтрока(Запрос.Текст), "", СекцияОбъединить) + ЧастьОбъединения;
		
	КонецЦикла;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ЗарегистрироватьСобытиеЗвонок(НомерТелефонаАбонента, АбонентОтКого, ПользовательКому, ДатаЗвонка)
	
	СотрудникиПользователя = УправлениеНебольшойФирмойСервер.ПолучитьСотрудниковПользователя(ПользовательКому);
	
	Событие = Документы.Событие.СоздатьДокумент();
	Событие.Заполнить(Неопределено);
	Событие.Дата = ТекущаяДатаСеанса();
	Событие.УстановитьНовыйНомер();
	
	Событие.НачалоСобытия = ДатаЗвонка;
	Событие.ОкончаниеСобытия = ДатаЗвонка;
	Событие.ТипСобытия = Перечисления.ТипыСобытий.ТелефонныйЗвонок;
	Событие.Состояние = Справочники.СостоянияСобытий.Запланировано;
	Событие.ВходящееИсходящееСобытие = Перечисления.ВходящееИсходящееСобытие.Входящее;
	Событие.Ответственный = ?(СотрудникиПользователя.Количество() > 0, СотрудникиПользователя[0], Справочники.Сотрудники.ПустаяСсылка());
	Событие.Автор = ПользовательКому;
	Событие.КалендарьСотрудника = ЗаполнениеОбъектовУНФ.ПолучитьКалендарьСотрудника(Событие.Ответственный);
	
	Участник = Событие.Участники.Добавить();
	Участник.Контакт = АбонентОтКого;
	Участник.КакСвязаться = НомерТелефонаАбонента;
	
	Если ТипЗнч(АбонентОтКого) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
		Участник = Событие.Участники.Вставить(0);
		Участник.Контакт = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(АбонентОтКого, "Владелец");
	КонецЕсли;
	
	Событие.Записать();
	Возврат Событие.Ссылка;
	
КонецФункции

Процедура УстановитьОкончаниеСобытияЗвонка(ПользовательКому, ДатаЗвонка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТекущиеВходящиеЗвонки.Событие
		|ИЗ
		|	РегистрСведений.ТекущиеВходящиеЗвонки КАК ТекущиеВходящиеЗвонки
		|ГДЕ
		|	ТекущиеВходящиеЗвонки.ПользовательКому = &ПользовательКому
		|	И ТекущиеВходящиеЗвонки.Событие <> ЗНАЧЕНИЕ(Документ.Событие.ПустаяСсылка)";
	
	Запрос.УстановитьПараметр("ПользовательКому", ПользовательКому);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Событие = Выборка.Событие.ПолучитьОбъект();
		
		Попытка
			Событие.Заблокировать();
		Исключение
			ЗаписьЖурналаРегистрации(
				СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.Документы.Событие,
				Выборка.Событие,
				НСтр("ru='Не удалось установить время завершения телефонного звонка. Объект заблокирован.'")
			);
			Возврат;
		КонецПопытки;
		
		Событие.ОкончаниеСобытия = ДатаЗвонка;
		Событие.Состояние = Справочники.СостоянияСобытий.Завершено;
		Событие.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗарегистрироватьТекущийВходящийЗвонок(НомерТелефонаАбонента, АбонентОтКого, ПользовательКому, ДатаЗвонка, Событие)
	
	Набор = РегистрыСведений.ТекущиеВходящиеЗвонки.СоздатьНаборЗаписей();
	Набор.Отбор.ПользовательКому.Установить(ПользовательКому);
	
	ЗаписьНабора = Набор.Добавить();
	ЗаписьНабора.ПользовательКому		= ПользовательКому;
	ЗаписьНабора.НомерТелефонаАбонента	= НомерТелефонаАбонента;
	ЗаписьНабора.АбонентОтКого			= АбонентОтКого;
	ЗаписьНабора.ДатаЗвонка				= ДатаЗвонка;
	ЗаписьНабора.Событие				= Событие;
	
	Набор.Записать(Истина);
	
КонецПроцедуры

Функция НастройкиТелефонииПоУмолчанию()
	
	Результат = Новый Структура();
	
	Результат.Вставить("vpbx_api_key", "");
	Результат.Вставить("vpbx_api_salt", "");
	Результат.Вставить("МаршрутизироватьВходящиеНаОтветственных", Ложь);
	Результат.Вставить("ДействиеТекущегоЗвонкаНайденногоАбонента", "ОткрытьКарточкуАбонента");
	Результат.Вставить("ДействиеТекущегоЗвонкаНеизвестногоАбонента", "ЗадаватьВопрос");
	
	Возврат Результат;
	
КонецФункции

Функция ОбрабатыватьЗвонокСНомера(НомерТелефонаАбонента)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НеобрабатываемыеТелефонныеНомера.НомерТелефонаАбонента
		|ИЗ
		|	РегистрСведений.НеобрабатываемыеТелефонныеНомера КАК НеобрабатываемыеТелефонныеНомера
		|ГДЕ
		|	НеобрабатываемыеТелефонныеНомера.НомерТелефонаАбонента = &НомерТелефонаАбонента";
	
	Запрос.УстановитьПараметр("НомерТелефонаАбонента", НомерТелефонаАбонента);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Пустой();
	
КонецФункции

Функция ПолучитьСобытие(ИдентификаторГруппыВызовов)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СоответствиеЗвонковОблачномуПровайдеру.ТелефонныйЗвонок КАК Событие
		|ИЗ
		|	РегистрСведений.СоответствиеЗвонковОблачномуПровайдеру КАК СоответствиеЗвонковОблачномуПровайдеру
		|ГДЕ
		|	СоответствиеЗвонковОблачномуПровайдеру.ИдентификаторГруппыВызовов = &ИдентификаторГруппыВызовов";
	
	Запрос.УстановитьПараметр("ИдентификаторГруппыВызовов", ИдентификаторГруппыВызовов);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Событие;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПолучитьПользователяПоВнутреннемуНомеру(ВнутреннийНомер)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкиПользователейТелефонии.Пользователь КАК Пользователь
		|ИЗ
		|	РегистрСведений.НастройкиПользователейТелефонии КАК НастройкиПользователейТелефонии
		|ГДЕ
		|	НастройкиПользователейТелефонии.ВнутреннийНомер = &ВнутреннийНомер";
	
	Запрос.УстановитьПараметр("ВнутреннийНомер", ВнутреннийНомер);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Пользователь;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПолучитьВнутреннийНомерПоПользователю(знач Пользователь = Неопределено)
	
	Если Пользователь = Неопределено Тогда
		Пользователь = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкиПользователейТелефонии.ВнутреннийНомер КАК ВнутреннийНомер
		|ИЗ
		|	РегистрСведений.НастройкиПользователейТелефонии КАК НастройкиПользователейТелефонии
		|ГДЕ
		|	НастройкиПользователейТелефонии.Пользователь = &Пользователь";
	
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ВнутреннийНомер;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ЗарегистрироватьСобытиеЗвонокОблачнаяТелефония(ИдентификаторГруппыВызовов, НомерТелефонаАбонента,
	Абонент, Пользователь, ВходящийИсходящий, СостояниеВызова, ДатаВызова)
	
	Событие = ПолучитьСобытие(ИдентификаторГруппыВызовов);
	
	Если Событие = Неопределено Тогда
		
		СотрудникиПользователя = УправлениеНебольшойФирмойСервер.ПолучитьСотрудниковПользователя(Пользователь);
		
		СобытиеОбъект = Документы.Событие.СоздатьДокумент();
		СобытиеОбъект.Заполнить(Неопределено);
		СобытиеОбъект.Дата = ТекущаяДатаСеанса();
		СобытиеОбъект.УстановитьНовыйНомер();
		
		СобытиеОбъект.НачалоСобытия = ДатаВызова;
		СобытиеОбъект.ОкончаниеСобытия = ДатаВызова;
		СобытиеОбъект.ТипСобытия = Перечисления.ТипыСобытий.ТелефонныйЗвонок;
		СобытиеОбъект.Состояние = Справочники.СостоянияСобытий.Запланировано;
		СобытиеОбъект.ВходящееИсходящееСобытие = ВходящийИсходящий;
		СобытиеОбъект.Ответственный = ?(СотрудникиПользователя.Количество() > 0, СотрудникиПользователя[0], Справочники.Сотрудники.ПустаяСсылка());
		СобытиеОбъект.Автор = Пользователь;
		СобытиеОбъект.КалендарьСотрудника = ЗаполнениеОбъектовУНФ.ПолучитьКалендарьСотрудника(СобытиеОбъект.Ответственный);
		
		Участник = СобытиеОбъект.Участники.Добавить();
		Участник.Контакт = Абонент;
		Участник.КакСвязаться = НомерТелефонаАбонента;
		
		Если ТипЗнч(Абонент) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
			Участник = СобытиеОбъект.Участники.Вставить(0);
			Участник.Контакт = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Абонент, "Владелец");
		КонецЕсли;
		
		НачатьТранзакцию();
		Попытка
			
			СобытиеОбъект.Записать();
			
			МенеджерЗаписи = РегистрыСведений.СоответствиеЗвонковОблачномуПровайдеру.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.ТелефонныйЗвонок = СобытиеОбъект.Ссылка;
			МенеджерЗаписи.ИдентификаторГруппыВызовов = ИдентификаторГруппыВызовов;
			МенеджерЗаписи.Записать();
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
		
		Событие = СобытиеОбъект.Ссылка;
		
	Иначе
		
		Если ВРег(СостояниеВызова) = ВРег("Disconnected") Тогда
			СобытиеОбъект = Событие.ПолучитьОбъект();
			СобытиеОбъект.ОкончаниеСобытия = ДатаВызова;
			СобытиеОбъект.Состояние = Справочники.СостоянияСобытий.Завершено;
			СобытиеОбъект.Записать();
		ИначеЕсли ДатаВызова < ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Событие, "НачалоСобытия") Тогда
			СобытиеОбъект = Событие.ПолучитьОбъект();
			СобытиеОбъект.НачалоСобытия = ДатаВызова;
			СобытиеОбъект.Записать();
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Событие;
	
КонецФункции

Процедура ИзменитьДоступВБазу(Включить, Знач Пароль, Знач ПользовательИзСправочника)
	
	ОбновляемыеСвойства = Новый Структура;
	ОбновляемыеСвойства.Вставить("СтарыйПароль", Пароль);
	ОбновляемыеСвойства.Вставить("АутентификацияСтандартная", Включить);
	
	ОписаниеОшибки = "";
	ПользовательИБ = Неопределено;
	
	УстановитьПривилегированныйРежим(Истина);
	ПользовательЗаписан = Пользователи.ЗаписатьПользователяИБ(
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПользовательИзСправочника, "ИдентификаторПользователяИБ"),
		ОбновляемыеСвойства,
		ОписаниеОшибки,
		ПользовательИБ
	);
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Не ПользовательЗаписан Тогда
		ВызватьИсключение ОписаниеОшибки;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
